<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="" productName="CODESYS" productVersion="CODESYS V3.5 SP15 Patch 2" creationDateTime="2020-04-11T22:53:20.5572817" />
  <contentHeader name="MQTT" version="1.1.0.2" modificationDateTime="2020-04-11T22:45:00.0583058" organization="Stefan Dreyer" author="Stefan Dreyer">
    <Comment>MQTT Stuff
Using some cool stuff of OSCAT libs.
see oscat.de

more to describe
</Comment>
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation>
          <property name="Author" type="string">Stefan Dreyer</property>
          <property name="Company" type="string">Stefan Dreyer</property>
          <property name="DefaultNamespace" type="string">SD_MQTT</property>
          <property name="Description" type="string">MQTT Stuff
Using some cool stuff of OSCAT libs.
see oscat.de

more to describe
</property>
          <property name="DocFormat" type="string">reStructuredText</property>
          <property name="IsEndUserLibrary" type="boolean">false</property>
          <property name="LanguageModelAttribute" type="string">qualified-access-only</property>
          <property name="Placeholder" type="string">SD_MQTT</property>
          <property name="Project" type="string">MQTT 1.1.0.2</property>
          <property name="Released" type="boolean">false</property>
          <property name="Title" type="string">MQTT</property>
          <property name="Version" type="version">1.1.0.2</property>
          <property name="library-category-list" type="library-category-list" />
        </ProjectInformation>
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="ERRORS">
        <baseType>
          <enum>
            <values>
              <value name="NOT_VALID" value="0" />
              <value name="CONNECTION_REFUSED" value="1" />
              <value name="MAX_PING_REPEATS" value="2" />
              <value name="RECEIVED_PUBISH_TO_BIG_FOR_BUFFER" value="3" />
              <value name="FULL_PACKET_NOT_RECEIVED" value="4" />
              <value name="RECEIVED_PUBLISH_REMAINING_LENGTH_ERROR" value="5" />
              <value name="NO_MORE_RECEIVE_SLOTS_FREE" value="6" />
              <value name="CONNECTION_ESTABLISHED" value="7" />
              <value name="TIMEOUT_CONNECTION" value="8" />
              <value name="REPEAT_PUBLISH_PUBCOMP" value="9" />
              <value name="REPEAT_PUBREL" value="10" />
              <value name="REORDER_PUBREC" value="11" />
              <value name="REORDER_PUBLISH_OUTGOING" value="12" />
              <value name="REPEAT_PUBLISH_PUBREC" value="13" />
              <value name="REPEAT_PUBLISH_PUBACK" value="14" />
              <value name="HARD_DISCONNECT" value="15" />
              <value name="MOVED_TO_BIG_RECEIVE_BUFFER" value="16" />
              <value name="NEED_BUFFER_MOV" value="17" />
              <value name="UNKNOWN_PAKET_RECEIVED" value="18" />
              <value name="TO_BIG_PAKET" value="19" />
              <value name="TOPIC_MOVED_DOWN" value="20" />
              <value name="TOPIC_AND_PAYLOAD_MOVED" value="21" />
              <value name="PAYLOAD_MOVED_UP" value="22" />
              <value name="TOPIC_MOVED_DOWN_NETWORK" value="23" />
              <value name="PAYLOAD_MOVED_UP_NETWORK" value="24" />
              <value name="REPEAT_PUBREC" value="25" />
              <value name="PUBEC_DISCHARGE" value="26" />
              <value name="REODER_PUBLISH_INCOMMING" value="27" />
              <value name="REORDER_PUBCOMP" value="28" />
              <value name="UNKNOWN_PAKET_IN_MQTT_IN_OUT" value="29" />
              <value name="PUBLISH_NO_SLOT_FREE" value="30" />
              <value name="OUT_OFF_DYN_MEMORY" value="31" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e92c2094-9817-4ed4-9dc8-48cfc52fdd42</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="INSERT_SPLIT_RETURN">
        <baseType>
          <enum>
            <values>
              <value name="INSERT_NOT_VALID" value="0" />
              <value name="INSERT_DONE" />
              <value name="INSERT_PENDING" />
              <value name="INSERT_ERROR" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>bb4d1531-d91b-43d0-a2e0-94b8e19d747c</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="MESSAGETYPE">
        <baseType>
          <enum>
            <values>
              <value name="CONNECT" value="16#10" />
              <value name="CONNACK" value="16#20" />
              <value name="PUBLISH" value="16#30" />
              <value name="PUBACK" value="16#40" />
              <value name="PUBREC" value="16#50" />
              <value name="PUBREL" value="16#60" />
              <value name="PUBCOMP" value="16#70" />
              <value name="SUBSCRIBE" value="16#80" />
              <value name="SUBACK" value="16#90" />
              <value name="UNSUBSCRIBE" value="16#A0" />
              <value name="UNSUBACK" value="16#B0" />
              <value name="PINGREQ" value="16#C0" />
              <value name="PINGRESP" value="16#D0" />
              <value name="DISCONNECT" value="16#E0" />
            </values>
            <baseType>
              <BYTE />
            </baseType>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f2b44ef8-0bd0-44af-8bb1-57f4cebd4fde</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="PROG_NUM">
        <baseType>
          <enum>
            <values>
              <value name="Publish" />
              <value name="Subscribe" />
              <value name="ParseIncomming" />
              <value name="MoveBuffer" />
              <value name="ParsePublish" />
              <value name="GetBufferFreePos" />
              <value name="GetSplitTopic" />
              <value name="DESTROY_HANDLE_MQTT" />
              <value name="DESTROY_SPLIT_TOPIC" />
              <value name="STATE_MASHINE_IN" />
              <value name="STATE_MASHINE_OUT" />
              <value name="SendOutData" />
              <value name="SendInData" />
              <value name="SendOutDataInsertTopic" />
              <value name="SendOutDataInsertPayload" />
              <value name="DESTROY_SPLIT_TOPIC_DONE" />
              <value name="DESTROY_HANDLE_MQTT_DONE" />
              <value name="DESTROY_CALLBACK_COLLECTOR" />
              <value name="DESTROY_CALLBACK_COLLECTOR_DONE" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c96a8249-695b-4b97-a93f-d9c79b7ceae9</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="PUSHOVER_SOUND">
        <baseType>
          <enum>
            <values>
              <value name="Standart" value="1" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>323c00fa-583c-4685-ad23-5c7dea71be00</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="QoS">
        <baseType>
          <enum>
            <values>
              <value name="AtMostOnce" value="2#0" />
              <value name="AtLeastOnce" value="2#1" />
              <value name="ExactlyOnce" value="2#10" />
              <value name="Fail" value="2#10000000" />
            </values>
            <baseType>
              <BYTE />
            </baseType>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>dc0ab29a-e4c9-4251-b775-e8f4fc8a2ed4</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="RECEIVE_TYPS">
        <baseType>
          <enum>
            <values>
              <value name="FIND_PAYLOAD" value="0" />
              <value name="FIND_TOPIC" value="1" />
              <value name="FIND_LAST_TOPIC" value="2" />
              <value name="FIND_LAST_TOPIC_AND_PAYLOAD" value="3" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>05bcf203-f13b-4816-b393-deb4dfb10f8f</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="RECEIVER_INIT_TYPS">
        <baseType>
          <enum>
            <values>
              <value name="FIND_FULL_TOPIC" value="0" />
              <value name="FIND_LAST_TOPIC" />
              <value name="FIND_PAYLOAD" />
              <value name="JSON_FULL" />
              <value name="JSON_SMALL" />
              <value name="MQTT_STRING" />
              <value name="MQTT_STRING_JSON" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
            <EnumValueDocumentation>
              <EnumValue>
                <Name>FIND_FULL_TOPIC</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">searching for full matching topic</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>FIND_LAST_TOPIC</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">searching for match of last topic</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>FIND_PAYLOAD</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">searching on paylod, from start, spared with delimiter</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>JSON_FULL</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">search full topic and one JSON element</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>JSON_SMALL</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">searching for last topic and one JSON element</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>MQTT_STRING</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">search with MQTT string(including +, #)</xhtml>
                </Documentation>
              </EnumValue>
              <EnumValue>
                <Name>MQTT_STRING_JSON</Name>
                <Documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">search with MQTT string(including +, #), then JSON</xhtml>
                </Documentation>
              </EnumValue>
            </EnumValueDocumentation>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>414e9f82-a8cb-4603-93ee-01cc5691e372</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="STEPS_IN">
        <baseType>
          <enum>
            <values>
              <value name="WAIT_DATA" value="0" />
              <value name="SEND_PUBACK" />
              <value name="SEND_PUBREC" />
              <value name="WAIT_PUBREL" />
              <value name="SEND_PUBCOMP" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>62f118e5-0ccc-4d99-91e8-1c5458854c9a</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="STEPS_OUT">
        <baseType>
          <enum>
            <values>
              <value name="WAIT_DATA" value="0" />
              <value name="SEND_PUBLSIH" />
              <value name="WAIT_PUBREC" />
              <value name="SEND_PUBREL" />
              <value name="WAIT_PUBCOMP" />
              <value name="WAIT_PUBACK" />
              <value name="WAIT_PINGRESP" />
              <value name="SEND_SUBSCRIBE" />
              <value name="WAIT_SUBACK" />
              <value name="SEND_UNSUBSCRIBE" />
              <value name="WAIT_UNSUBACK" />
            </values>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>959ee70e-6c1f-4f46-b4d6-2e47c7bb5ec5</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="TOPIC_MATCH">
        <baseType>
          <enum>
            <values>
              <value name="TOPIC_MATCHES" value="1" />
              <value name="TOPIC_DONT_MATCHES" value="2" />
              <value name="TOPIC_NO_MEMORY" value="3" />
            </values>
            <baseType>
              <BYTE />
            </baseType>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2d2ca9f7-31bc-451a-aac6-7d56f3a3c2f7</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="TOPIC_VALID">
        <baseType>
          <enum>
            <values>
              <value name="TOPIC_UNTESTED" value="0" />
              <value name="TOPIC_VALID" value="2" />
              <value name="TOPIC_NOT_VALID" value="1" />
              <value name="TOPIC_NO_TEST" value="3" />
            </values>
            <baseType>
              <BYTE />
            </baseType>
          </enum>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
              <Attribute Name="strict" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f7ef1884-ffea-471c-909d-3b229bcf4d4a</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="CALLBACK_DATA">
        <baseType>
          <struct>
            <variable name="PayloadString">
              <type>
                <pointer>
                  <baseType>
                    <string length="255" />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">the Payload String,
	be aware, this pointer will only copy 255 bytes. If more needed, use memmove!</xhtml>
              </documentation>
            </variable>
            <variable name="Payload">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">pointer to binary payload</xhtml>
              </documentation>
            </variable>
            <variable name="PayloadSize">
              <type>
                <UDINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">size of binary payload</xhtml>
              </documentation>
            </variable>
            <variable name="TopicOut">
              <type>
                <pointer>
                  <baseType>
                    <string length="255" />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">here you get the compleete received topic string, maybe bigger then 255 byte!</xhtml>
              </documentation>
            </variable>
            <variable name="TopicOutSplit">
              <type>
                <pointer>
                  <baseType>
                    <derived name="SPLIT_TOPIC" />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">split topic....</xhtml>
              </documentation>
            </variable>
            <variable name="PayloadIsString">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Payload is string</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>963855a0-a0d7-4fbc-9ce0-5579e6e76a87</ObjectId>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">this data is passed to a subscription callback</xhtml>
        </documentation>
      </dataType>
      <dataType name="CALLBACK_INSTANCES">
        <baseType>
          <struct>
            <variable name="callback">
              <type>
                <derived name="MQTT_SUBSCRIBE_CALLBACK" />
              </type>
            </variable>
            <variable name="next">
              <type>
                <pointer>
                  <baseType>
                    <derived name="CALLBACK_INSTANCES" />
                  </baseType>
                </pointer>
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="enable_dynamic_creation" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>6adfb87c-f00b-4c51-89ce-56189477a479</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="LIST_ALLVALUES_CALLBACK_DATA">
        <baseType>
          <struct>
            <variable name="VarTYPE">
              <type>
                <derived name="CommonTypesAndFunctions.VAR_TYPES" />
              </type>
            </variable>
            <variable name="Target">
              <type>
                <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION_POINTER" />
              </type>
            </variable>
            <variable name="SubTopic">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">pointer to last subtopic or Payload Data to compare with</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4fbfdae5-c719-45fc-8db1-5715a3d53dc8</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="LIST_STRING_CALLBACK_DATA">
        <baseType>
          <struct>
            <variable name="Target">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">pointer to target string</xhtml>
              </documentation>
            </variable>
            <variable name="SubTopic">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">pointer to last subtopic or Payload Data to compare with</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2be988fc-7d0a-4fb7-85f2-77deb2f228a5</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_SUBSCRIBE_CALLBACKS">
        <baseType>
          <struct>
            <variable name="Callback">
              <type>
                <derived name="MQTT_SUBSCRIBE_CALLBACK" />
              </type>
            </variable>
            <variable name="ExpectingString">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">expecting string</xhtml>
              </documentation>
            </variable>
            <variable name="SplitTopic">
              <type>
                <pointer>
                  <baseType>
                    <derived name="HandleSplitTopic" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="free">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">set to false if slot is aquired by an subscription</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>960c94c7-5314-4b94-96fc-777034edf963</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="COM_CONFIG">
        <baseType>
          <struct>
            <variable name="MaxPayloadSize">
              <type>
                <UDINT />
              </type>
              <initialValue>
                <simpleValue value="2000" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">max payload size</xhtml>
              </documentation>
            </variable>
            <variable name="MaxTopicLevels">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="25" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">max topic levels</xhtml>
              </documentation>
            </variable>
            <variable name="MaxTopicElementSize">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="255" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Max Topic elemt size</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>f023999e-09e0-4a7b-bf94-bca33e8956a1</ObjectId>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">here the maximum sizes of paylod and topics are defined
if dynamic low init of split topic is used, don't care about MaxTopicElementSize</xhtml>
        </documentation>
      </dataType>
      <dataType name="DATA_FROM_BROKER">
        <baseType>
          <struct>
            <variable name="MqttTopic">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">use array in size of network buffer to split message dynamic, maybe not ... best is dynamic mammory....
or use an array of Pointer....
or callbacks
 so lets try to buffer public messages and releas one per cycle to application...
now we try dynamic memmory....
MQTT Topic from Broker</xhtml>
              </documentation>
            </variable>
            <variable name="Topics">
              <type>
                <pointer>
                  <baseType>
                    <derived name="SPLIT_TOPIC" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MqttPayload">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTT Payload for Broker
Payload from broker --&gt; Pointer</xhtml>
              </documentation>
            </variable>
            <variable name="MqttPayloadSize">
              <type>
                <UDINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Payload size</xhtml>
              </documentation>
            </variable>
            <variable name="MessageType">
              <type>
                <derived name="MESSAGETYPE" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTT Message Type</xhtml>
              </documentation>
            </variable>
            <variable name="DataReceived">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Data received</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>32b50b35-fcff-4e03-852b-c3c9dacef9d9</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="DATA_TO_BROKER">
        <baseType>
          <struct>
            <variable name="PaketData">
              <type>
                <derived name="PAKET_DATA" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Data of Paket</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8f262079-4448-4ad4-914c-e723074c16c8</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_COM">
        <baseType>
          <struct>
            <variable name="S_BUF">
              <type>
                <derived name="NETWORK_BUFFER" />
              </type>
            </variable>
            <variable name="R_BUF">
              <type>
                <derived name="NETWORK_BUFFER" />
              </type>
            </variable>
            <variable name="MQTT_CON">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">if falling edge close with disconnect packet</xhtml>
              </documentation>
            </variable>
            <variable name="MQTT_ABORT">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">if using this to disconnect, don't send disconnect paket....</xhtml>
              </documentation>
            </variable>
            <variable name="MQTT_URL">
              <type>
                <string length="OSCAT_BASIC.STRING_LENGTH" />
              </type>
            </variable>
            <variable name="MQTT_PACKET_NO">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="TIMEOUT">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="TLS">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">DNS_IP4 : DWORD;
set to true if you want to use TLS</xhtml>
              </documentation>
            </variable>
            <variable name="TLS_CONFIG">
              <type>
                <pointer>
                  <baseType>
                    <derived name="CommonTypesAndFunctions.TLS_CONFIG" />
                  </baseType>
                </pointer>
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">data to TLS stuff</xhtml>
              </documentation>
            </variable>
            <variable name="MQTT_RCV_STATE">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">
	0= non
	1= received
	2= error</xhtml>
              </documentation>
            </variable>
            <variable name="ERROR_C">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="ERROR_T">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="CLIENT_ID">
              <type>
                <string length="23" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">CONNECT_TO_LOCALHOST:BOOL;</xhtml>
              </documentation>
            </variable>
            <variable name="CLIENT_WILL_TOPIC">
              <type>
                <string length="255" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Topic vof will message after client id</xhtml>
              </documentation>
            </variable>
            <variable name="CLIENT_WILL_MESSAGE_DEAD">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="CLIENT_WILL_RETAIN">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="MQTT_NO_AWNSER">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">pakte wihout request-- return to receive state 1</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5209abac-a19a-4b19-a65e-8a7aaacdb271</ObjectId>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">contro struct between HANDLE_MQTT and MQTT_CONTROL</xhtml>
        </documentation>
      </dataType>
      <dataType name="MQTT_IN_DATA">
        <baseType>
          <struct>
            <variable name="step">
              <type>
                <derived name="STEPS_IN" />
              </type>
            </variable>
            <variable name="PaketID">
              <type>
                <WORD />
              </type>
            </variable>
            <variable name="WaitsForBuffFree">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="TimeOut">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="TimeOutStarted">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PUBLISHOrder">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="PUBCOMPOrder">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="QoS">
              <type>
                <derived name="QoS" />
              </type>
            </variable>
            <variable name="CountPubrecRepeat">
              <type>
                <UINT />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>4c7c1bae-e8c3-425f-ac0b-be3e1bb059c6</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_IN_OUT">
        <baseType>
          <struct>
            <variable name="handleFB">
              <type>
                <pointer>
                  <baseType>
                    <derived name="HANDLE_MQTT" />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">pointer to handle FB</xhtml>
              </documentation>
            </variable>
            <variable name="In">
              <type>
                <pointer>
                  <baseType>
                    <derived name="PAKET_DATA" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="InFree">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">in free, true if free</xhtml>
              </documentation>
            </variable>
            <variable name="TDI">
              <type>
                <derived name="CommonTypesAndFunctions.TIME_DATE_IMPULS_DATA" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">time, date, impulse...</xhtml>
              </documentation>
            </variable>
            <variable name="TLS_CONFIG">
              <type>
                <pointer>
                  <baseType>
                    <derived name="CommonTypesAndFunctions.TLS_CONFIG" />
                  </baseType>
                </pointer>
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">TLS stuff data</xhtml>
              </documentation>
            </variable>
            <variable name="BROKER_CONNECTED">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="COM_CONFIG">
              <type>
                <derived name="COM_CONFIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">config for boot up</xhtml>
              </documentation>
            </variable>
            <variable name="ClientID">
              <type>
                <string length="23" />
              </type>
              <initialValue>
                <simpleValue value="'CODESYS_MQTT'" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">client ID, only chars 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	System never can be anonymos
	</xhtml>
              </documentation>
            </variable>
            <variable name="BuildWillTopicAndMessage">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="WillTopicBase">
              <type>
                <string length="255" />
              </type>
              <initialValue>
                <simpleValue value="'MQTTWill'" />
              </initialValue>
            </variable>
            <variable name="ClientWillTopic">
              <type>
                <string length="255" />
              </type>
              <initialValue>
                <simpleValue value="'DEAD'" />
              </initialValue>
            </variable>
            <variable name="ClientWillMessage">
              <type>
                <string length="30" />
              </type>
              <initialValue>
                <simpleValue value="'DIED'" />
              </initialValue>
            </variable>
            <variable name="dynMemUsage">
              <type>
                <UDINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">usage of dynamic RAM</xhtml>
              </documentation>
            </variable>
            <variable name="disconnectOnBufferOverflow">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">set this to one if you want the client to act like the standardt says
	if set to one and we receve mor publish pakets than we can handle, QoS 0 packets are lost
	and QoS 1 and 2 packets have to be repeaded by he broker</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>55008e55-a327-4545-aaa7-3221c41bb9e1</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_INFO">
        <baseType>
          <struct>
            <variable name="MQTT_CONNECTED">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MQTT_ERROR">
              <type>
                <string length="OSCAT_BASIC.STRING_LENGTH" />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>32a39fb8-f516-444c-be3c-83354e376270</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="MQTT_OUT_DATA">
        <baseType>
          <struct>
            <variable name="InDataFromFb">
              <type>
                <pointer>
                  <baseType>
                    <derived name="PAKET_DATA" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="step">
              <type>
                <derived name="STEPS_OUT" />
              </type>
            </variable>
            <variable name="WaitsForBuffFree">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="PUBRECOrder">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="TimeOut">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="TimeOutStarted">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PUBLISHOrder">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="PUBRELRepeatCounter">
              <type>
                <UINT />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ae326562-56be-495d-a72e-4a01b53e8ece</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="ONE_ERROR">
        <baseType>
          <struct>
            <variable name="error">
              <type>
                <derived name="ERRORS" />
              </type>
            </variable>
            <variable name="when">
              <type>
                <DT />
              </type>
            </variable>
            <variable name="ERROR_C">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="ERROR_T">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="text">
              <type>
                <string length="255" />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>438702c0-b52d-451f-8dd4-20eaa74fc723</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="PAKET_DATA">
        <baseType>
          <struct>
            <variable name="MqttTopic">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTT Topic for Broker</xhtml>
              </documentation>
            </variable>
            <variable name="MqttTopicLength">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Topic length</xhtml>
              </documentation>
            </variable>
            <variable name="MqttPayload">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTT Payload for Broker</xhtml>
              </documentation>
            </variable>
            <variable name="MqttPayloadLength">
              <type>
                <UDINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Payload length</xhtml>
              </documentation>
            </variable>
            <variable name="MessageType">
              <type>
                <derived name="MESSAGETYPE" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTT Message Type</xhtml>
              </documentation>
            </variable>
            <variable name="MessageQoS">
              <type>
                <derived name="QoS" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTT QoS</xhtml>
              </documentation>
            </variable>
            <variable name="SubackQoS">
              <type>
                <derived name="QoS" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">SUCACK QoS Response</xhtml>
              </documentation>
            </variable>
            <variable name="MessageRetain">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTT reatin</xhtml>
              </documentation>
            </variable>
            <variable name="DUP">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Retry of paket</xhtml>
              </documentation>
            </variable>
            <variable name="PaketId">
              <type>
                <WORD />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">PakatID for header</xhtml>
              </documentation>
            </variable>
            <variable name="SendSucsess">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">ID of MQTT FB to store or of request to Broker
FbId:UINT;
Send was succsessfull</xhtml>
              </documentation>
            </variable>
            <variable name="Callback">
              <type>
                <derived name="MQTT_SUBSCRIBE_CALLBACK" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Callback FB for subscription</xhtml>
              </documentation>
            </variable>
            <variable name="SplitTopic">
              <type>
                <pointer>
                  <baseType>
                    <derived name="HandleSplitTopic" />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">split topic for subscribe</xhtml>
              </documentation>
            </variable>
            <variable name="CallbackError">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">errore registering the callback</xhtml>
              </documentation>
            </variable>
            <variable name="ExpectingString">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Expecting String</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>562b289a-9159-4417-8182-cc4e81b366b8</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="PUSHOVER_DATA">
        <baseType>
          <struct>
            <variable name="Trigger">
              <type>
                <pointer>
                  <baseType>
                    <BOOL />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="Topic">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="Payload">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="Prio">
              <type>
                <USINT />
              </type>
            </variable>
            <variable name="Sound">
              <type>
                <derived name="PUSHOVER_SOUND" />
              </type>
            </variable>
            <variable name="IsConfig">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="R_T">
              <type>
                <derived name="R_TRIG" />
              </type>
            </variable>
            <variable name="NeedToPush">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Negate">
              <type>
                <BOOL />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c93db81f-bcea-4deb-b019-5f8f7b88cd10</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="RECEIVE_PAKET">
        <baseType>
          <struct>
            <variable name="MqttTopic">
              <type>
                <string length="2000" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTT Topic</xhtml>
              </documentation>
            </variable>
            <variable name="MqttPayload">
              <type>
                <string length="2000" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTT Payload</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>5ccc79d7-9560-4034-9035-9d8c8e8be5c7</ObjectId>
          </data>
        </addData>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">used for test cases...</xhtml>
        </documentation>
      </dataType>
      <dataType name="REMAINING_LENGTH_RETURN">
        <baseType>
          <struct>
            <variable name="RemainingLength">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="IndexAfterRemainingLength">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="Error">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="BuffToSmall">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">not all bytes of remaining length in buffer...</xhtml>
              </documentation>
            </variable>
            <variable name="SizeRemainingLength">
              <type>
                <USINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">size of remaining length</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>94c78556-e4a3-4405-aebc-1e66657239c5</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="SEND_INFOS">
        <baseType>
          <struct>
            <variable name="SubscribeIndex">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">this index is to be subscribed</xhtml>
              </documentation>
            </variable>
            <variable name="SubscribeNeeded">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="SubscribeBlocking">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="UnsubscribeIndex">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">this index is to be subscribed</xhtml>
              </documentation>
            </variable>
            <variable name="UnsubscribeNeeded">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="UnsubscribeBlocking">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PublishBlocking">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">this index is to be published</xhtml>
              </documentation>
            </variable>
            <variable name="PublishBlockingIndex">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="PingIndex">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">this index is to be published</xhtml>
              </documentation>
            </variable>
            <variable name="PingNeeded">
              <type>
                <BOOL />
              </type>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2bc87a2f-4743-4048-b61f-7cca24bbfb38</ObjectId>
          </data>
        </addData>
      </dataType>
      <dataType name="SPLIT_TOPIC">
        <baseType>
          <struct>
            <variable name="Topics">
              <type>
                <pointer>
                  <baseType>
                    <pointer>
                      <baseType>
                        <string />
                      </baseType>
                    </pointer>
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">this is going to be a pointer to a array of pointer to stings  </xhtml>
              </documentation>
            </variable>
            <variable name="ValidFields">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">count of vailid fields in the array</xhtml>
              </documentation>
            </variable>
          </struct>
        </baseType>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>093130aa-4b04-4d26-9869-e5698edc6583</ObjectId>
          </data>
        </addData>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="Doku" pouType="program">
        <interface />
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">(*

Hello There,

with this library you are able to send and recvice MQTT paket on all QoS levels 0-2.

Use Pubish to publish data(Strings and binary),

Use subscribe to receive MQTT data. On Subscribe you can tell the FB if you are expecting an String as data, so you will get one on the pointer output.

How to use you can see in the example and testCase FB. This is my Test Case an it does up to 100 send and receives per second on an raspberry PI 1+ connectet to an mosquitto broker on an 
windows 10 maschine.

If you find errors, or anny instability, tell me, i will have a look.

TLS works fine without certificates.

This Projekt i using some parts of the grat OSCAT libs, so take a look at oscat.de

Greatings 

*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>19d5ffa0-ed0e-45b0-9ceb-9920b74e90c1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestOutOfTheBoxNoTLS" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="client">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'test.mosquitto.org:1883'" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">test.mosquitto.org</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <localVars>
            <variable name="MQTTClient">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
            <variable name="MQTT_IN_OUT">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
            <variable name="publish">
              <type>
                <derived name="MQTTPublish" />
              </type>
            </variable>
            <variable name="subscribe">
              <type>
                <derived name="MQTTSubscribe" />
              </type>
            </variable>
            <variable name="ReceiveSubscribeTopic">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="ReceiveSubscribePayloadTick">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="ReceiveSubscribePayloadState">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="State">
              <type>
                <derived name="MQTTState" />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="varSend">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="timerSend">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="t1">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="t2">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="Payload">
              <type>
                <string />
              </type>
            </variable>
            <variable name="StringCallback">
              <type>
                <derived name="ListStringCallback" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">the method PublishReceved() is call when an publsih packet form the broker is received.</xhtml>
              </documentation>
            </variable>
            <variable name="CallBackTargets">
              <type>
                <array>
                  <dimension lower="0" upper="1" />
                  <baseType>
                    <derived name="LIST_STRING_CALLBACK_DATA" />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <structValue>
                      <value member="Target">
                        <simpleValue value="ADR(ReceiveSubscribePayloadState)" />
                      </value>
                      <value member="SubTopic">
                        <simpleValue value="ADR('State')" />
                      </value>
                    </structValue>
                  </value>
                  <value>
                    <structValue>
                      <value member="Target">
                        <simpleValue value="ADR(ReceiveSubscribePayloadTick)" />
                      </value>
                      <value member="SubTopic">
                        <simpleValue value="ADR('Tick')" />
                      </value>
                    </structValue>
                  </value>
                </arrayValue>
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">the array contains the targets and sub topics for receive</xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">//here init is done
IF NOT init THEN
	init := TRUE;
	MQTT_IN_OUT.ClientID := CONCAT('CodesysMqtt',TO_STRING(TICKS.GetTick(xDummy:= TRUE)));
	publish.SetMqttInOut(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	subscribe.SetMqttInOut(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	//init state FB, so you only have to call state();without parameters... 
	State.Init(
	State:= ADR(t1.Q), 
	Topic:= ADR('CODESYS-MQTT-BY-SD/State'), 
	StateName:= ADR(''), 
	StateValueOn:= ADR('On'), 
	StateValueOff:= ADR('Off'), 
	QoS:= QoS.ExactlyOnce, 
	RetainMqtt:= TRUE,
	MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	StringCallback.InitAsSplitTopic(ListData := ADR(CallBackTargets), LengthOfData:= 2);

END_IF
//timer for repeating packets
timerSend(in := NOT varSend, PT := T#2S);
varSend := timerSend.Q; 
t1(IN:= NOT t2.Q, PT:= T#1S, );
t2(IN:= t1.Q, PT:= T#1S, );
//call of MQTT client
MQTTClient( 
	MQTT_IN_OUT:= MQTT_IN_OUT, 
	ENABLE:= TRUE, 
	URL:= client, 
	TIMEOUT:= T#5S, 
	TLS:= FALSE);
//build payload
IF varSend THEN
	Payload:= TO_STRING(TICKS.GetTick(xDummy:= TRUE));
END_IF
//Publish Payload
publish(
	Topic:= ADR('CODESYS-MQTT-BY-SD/Tick'), 
	PayloadString:= ADR(Payload), 
	PublishAsString:= TRUE, 
	QoSIn:= QoS.ExactlyOnce, 
	MRetain:= TRUE, 
	send:= varSend);
//Subscribe to topic
subscribe(
	Subscribe:= TRUE, 
	Topic:= ADR('CODESYS-MQTT-BY-SD/#'), 
	QoSSubscribe:= QoS.ExactlyOnce, 
	ExpectingString:= TRUE,
	Callback:= StringCallback);


//call of state FB
State();</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7710ce00-c1ae-47be-931d-77aa31d80969</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestOutOfTheBoxTLS" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="client">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'test.mosquitto.org:8883'" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">test.mosquitto.org</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <localVars>
            <variable name="MQTTClient">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
            <variable name="MQTT_IN_OUT">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
            <variable name="publish">
              <type>
                <derived name="MQTTPublish" />
              </type>
            </variable>
            <variable name="subscribe">
              <type>
                <derived name="MQTTSubscribe" />
              </type>
            </variable>
            <variable name="ReceiveSubscribeTopic">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="ReceiveSubscribePayloadTick">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="ReceiveSubscribePayloadState">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="State">
              <type>
                <derived name="MQTTState" />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="varSend">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="timerSend">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="t1">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="t2">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="Payload">
              <type>
                <string />
              </type>
            </variable>
            <variable name="StringCallback">
              <type>
                <derived name="ListStringCallback" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">the method PublishReceved() is call when an publsih packet form the broker is received.</xhtml>
              </documentation>
            </variable>
            <variable name="CallBackTargets">
              <type>
                <array>
                  <dimension lower="0" upper="1" />
                  <baseType>
                    <derived name="LIST_STRING_CALLBACK_DATA" />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <structValue>
                      <value member="Target">
                        <simpleValue value="ADR(ReceiveSubscribePayloadState)" />
                      </value>
                      <value member="SubTopic">
                        <simpleValue value="ADR('State')" />
                      </value>
                    </structValue>
                  </value>
                  <value>
                    <structValue>
                      <value member="Target">
                        <simpleValue value="ADR(ReceiveSubscribePayloadTick)" />
                      </value>
                      <value member="SubTopic">
                        <simpleValue value="ADR('Tick')" />
                      </value>
                    </structValue>
                  </value>
                </arrayValue>
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">the array contains the targets and sub topics for receive</xhtml>
              </documentation>
            </variable>
            <variable name="TLS_CONFIG">
              <type>
                <derived name="CommonTypesAndFunctions.TLS_CONFIG" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">//here init is done
IF NOT init THEN
	init := TRUE;
	MQTT_IN_OUT.ClientID := CONCAT('CodesysMqtt',TO_STRING(TICKS.GetTick(xDummy:= TRUE)));
	publish.SetMqttInOut(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	subscribe.SetMqttInOut(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	//init state FB, so you only have to call state();without parameters... 
	State.Init(
	State:= ADR(t1.Q), 
	Topic:= ADR('CODESYS-MQTT-BY-SD/State'), 
	StateName:= ADR(''), 
	StateValueOn:= ADR('On'), 
	StateValueOff:= ADR('Off'), 
	QoS:= QoS.ExactlyOnce, 
	RetainMqtt:= TRUE,
	MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	StringCallback.InitAsSplitTopic(ListData := ADR(CallBackTargets), LengthOfData:= 2);
	MQTT_IN_OUT.TLS_CONFIG := ADR(TLS_CONFIG);
END_IF
//timer for repeating packets
timerSend(in := NOT varSend, PT := T#2S);
varSend := timerSend.Q; 
t1(IN:= NOT t2.Q, PT:= T#1S, );
t2(IN:= t1.Q, PT:= T#1S, );
//call of MQTT client
MQTTClient( 
	MQTT_IN_OUT:= MQTT_IN_OUT, 
	ENABLE:= TRUE, 
	URL:= client, 
	TIMEOUT:= T#5S, 
	TLS:= TRUE);
//build payload
IF varSend THEN
	Payload:= TO_STRING(TICKS.GetTick(xDummy:= TRUE));
END_IF
//Publish Payload
publish(
	Topic:= ADR('CODESYS-MQTT-BY-SD/Tick'), 
	PayloadString:= ADR(Payload), 
	PublishAsString:= TRUE, 
	QoSIn:= QoS.ExactlyOnce, 
	MRetain:= TRUE, 
	send:= varSend);
//Subscribe to topic	
subscribe(
	Subscribe:= TRUE, 
	Topic:= ADR('CODESYS-MQTT-BY-SD/#'), 
	QoSSubscribe:= QoS.ExactlyOnce, 
	ExpectingString:= TRUE,
	Callback:= StringCallback);


//call of state FB
State();</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2f0f42d5-f5e7-4150-9177-534c70b72865</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CheckTopicLevel" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="s1">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">String from Broker</xhtml>
              </documentation>
            </variable>
            <variable name="s2">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Subscribe String</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <localVars>
            <variable name="LenS1">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">true if levels the same</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">CheckTopicLevel := FALSE;
//test Wildcard
IF (s2^[0] = CommonTypesAndFunctions.GetChar(in:= '+')) THEN //(s2[0] = GetChar(in:= '#')) OR  don't check # here
	CheckTopicLevel := TRUE;
	RETURN;	
END_IF
LenS1 := CommonTypesAndFunctions.len(STR:= s1); 
IF (LenS1 &lt;&gt; CommonTypesAndFunctions.len(STR:= s2)) THEN 
	RETURN;
END_IF//if len not eval then return
IF (CommonTypesAndFunctions.find(STR1:= s1, STR2:= s2) &gt;= 0) OR (LenS1 = 0)THEN
	CheckTopicLevel := TRUE;
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>655f312f-4e19-41ff-9a48-b9cd257567fd</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DoRemainingLength" pouType="function">
        <interface>
          <returnType>
            <USINT />
          </returnType>
          <inputVars>
            <variable name="buffer">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="RemainingLength">
              <type>
                <UINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="LocalLength">
              <type>
                <LINT />
              </type>
            </variable>
            <variable name="LocalBuffer">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="BufferIndex">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="TmpByte">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">//check if we have to move data for inserting remaining length
//borders are given in the mqtt doku
//
IF RemainingLength &lt;= 128 THEN
	buffer[1] := UINT_TO_BYTE(RemainingLength);
	DoRemainingLength := 0;
ELSE
	LocalLength := RemainingLength;
	REPEAT
		TmpByte := LINT_TO_BYTE(LocalLength MOD 128);
		LocalLength := LocalLength / 128;
		IF LocalLength &gt; 0 THEN
			TmpByte := TmpByte OR 128;
		END_IF
		LocalBuffer[BufferIndex] := TmpByte; 
		BufferIndex := BufferIndex +1;
	UNTIL 
		LocalLength &lt;= 0 
	END_REPEAT
	//now move mem	
	//buffer index points to NEXT field, so sub 1
	MEM.MemMove(pSource:= buffer+2, pDestination:= buffer + 2 + BufferIndex - 1 , uiNumberOfBytes:= RemainingLength);
	CASE BufferIndex OF
		2: 	buffer[1]:= LocalBuffer[0];
			buffer[2]:= LocalBuffer[1];
			DoRemainingLength := 1;
		3:	buffer[1]:= LocalBuffer[0];
			buffer[2]:= LocalBuffer[1];
			buffer[3]:= LocalBuffer[2];
			DoRemainingLength := 2;
		4:	buffer[1]:= LocalBuffer[0];
			buffer[2]:= LocalBuffer[1];
			buffer[3]:= LocalBuffer[2];
			buffer[4]:= LocalBuffer[3];
			DoRemainingLength := 3;
		
	END_CASE
	
END_IF
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e2e73127-c450-4db7-8e16-8119af21d884</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="DoRemainingLengthBevor" pouType="function">
        <interface>
          <returnType>
            <USINT />
          </returnType>
          <inputVars>
            <variable name="buffer">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">points to start of buffer, not to start of remainig length!</xhtml>
              </documentation>
            </variable>
            <variable name="SizeTopic">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="SizePayload">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="InQoS">
              <type>
                <derived name="QoS" />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="RemainingLength">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="LocalLength">
              <type>
                <LINT />
              </type>
            </variable>
            <variable name="LocalBuffer">
              <type>
                <array>
                  <dimension lower="0" upper="3" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="BufferIndex">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="TmpByte">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">here no move of data, call remainig length bevor moving topic and paylod, use this for 
borders are given in the mqtt doku
use this for publish pakets</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
	
RemainingLength := SizeTopic + SizePayload;
	
RemainingLength := RemainingLength + 2;//add topic size encoding space
IF NOT (InQoS = QoS.AtMostOnce) THEN
	RemainingLength := RemainingLength + 2;//add space for paket identifier
END_IF

IF RemainingLength &lt;= 128 THEN
	buffer[1] := UDINT_TO_BYTE(RemainingLength);
	DoRemainingLengthBevor := 0;
ELSE
	LocalLength := RemainingLength;
	REPEAT
		TmpByte := LINT_TO_BYTE(LocalLength MOD 128);
		LocalLength := LocalLength / 128;
		IF LocalLength &gt; 0 THEN
			TmpByte := TmpByte OR 128;
		END_IF
		LocalBuffer[BufferIndex] := TmpByte; 
		BufferIndex := BufferIndex +1;
	UNTIL 
		LocalLength &lt;= 0 
	END_REPEAT
	CASE BufferIndex OF
		2: 	buffer[1]:= LocalBuffer[0];
			buffer[2]:= LocalBuffer[1];
			DoRemainingLengthBevor := 1;
		3:	buffer[1]:= LocalBuffer[0];
			buffer[2]:= LocalBuffer[1];
			buffer[3]:= LocalBuffer[2];
			DoRemainingLengthBevor := 2;
		4:	buffer[1]:= LocalBuffer[0];
			buffer[2]:= LocalBuffer[1];
			buffer[3]:= LocalBuffer[2];
			buffer[4]:= LocalBuffer[3];
			DoRemainingLengthBevor := 3;
		
	END_CASE
	
END_IF
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7a7085eb-fade-40fb-a106-1b3f7da54eb0</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="GetRemainingLength" pouType="function">
        <interface>
          <returnType>
            <derived name="REMAINING_LENGTH_RETURN" />
          </returnType>
          <inputVars>
            <variable name="Buff">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Pointer to Buffer</xhtml>
              </documentation>
            </variable>
            <variable name="pos">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Start of data in Buffer</xhtml>
              </documentation>
            </variable>
            <variable name="BuffSize">
              <type>
                <UDINT />
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="BufferIndex">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="Multipler">
              <type>
                <UDINT />
              </type>
              <initialValue>
                <simpleValue value="1" />
              </initialValue>
            </variable>
            <variable name="TmpByte">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">GetRemainingLength.Error := FALSE;
GetRemainingLength.SizeRemainingLength:= 0;

GetRemainingLength.BuffToSmall := FALSE;
BufferIndex := pos + 1;
REPEAT
	IF BufferIndex &gt; (BuffSize - 1) THEN
		GetRemainingLength.BuffToSmall := TRUE;
	ELSE
		TmpByte := Buff[BufferIndex];
		BufferIndex := BufferIndex + 1;
		GetRemainingLength.RemainingLength := GetRemainingLength.RemainingLength + (TmpByte AND 127) * Multipler;
		Multipler := Multipler *128;
		IF Multipler &gt; 128*128*128 THEN
			GetRemainingLength.RemainingLength := 0;//lengt 0 if broken
			GetRemainingLength.Error := TRUE;
		END_IF
	END_IF
	GetRemainingLength.SizeRemainingLength := GetRemainingLength.SizeRemainingLength + 1;
UNTIL
	TmpByte.7 = FALSE OR GetRemainingLength.BuffToSmall
	//TmpByte.7 = FALSE  OR GetRemainingLength.RemainingLength = 0 OR GetRemainingLength.BuffToSmall
END_REPEAT
GetRemainingLength.IndexAfterRemainingLength := BufferIndex;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>168ed935-d7fd-4c44-93c7-2a8614b8ecf9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="InitMQTTValue" pouType="function">
        <interface>
          <returnType>
            <BOOL />
          </returnType>
          <inputVars>
            <variable name="DataArray">
              <type>
                <pointer>
                  <baseType>
                    <derived name="CommonTypesAndFunctions.PWConfigs" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="CountOfArray">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="ValueToMQTTArray">
              <type>
                <pointer>
                  <baseType>
                    <derived name="MQTTValue" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MQTT_IN_OUT">
              <type>
                <pointer>
                  <baseType>
                    <derived name="MQTT_IN_OUT" />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">FOR i := 0 TO CountOfArray - 1 DO
	IF DataArray[i].NeedsMQTT THEN
		ValueToMQTTArray[i].Init(
			Topic:= DataArray[i].MQTTTopic, 
			ValueName:= DataArray[i].MQTTName, 
			ValuePointer:= DataArray[i].PointerTo, 
			ValueType:= DataArray[i].ValueType, 
			ValueDiff:= DataArray[i].MQTTDiff, 
			DecimalPlace:= DataArray[i].MQTTDezimal, 
			QoS:= DataArray[i].MQTTQoS, 
			RetainMqtt:= DataArray[i].MQTTRetain, 
			MinTime:= DataArray[i].MQTTTime,
			MQTT_IN_OUT:= MQTT_IN_OUT);
	END_IF
END_FOR</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>70f8d7c7-9e63-4b4a-8ece-1a8da2fb05e1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="InsertStringToBufferAndLength" pouType="function">
        <interface>
          <returnType>
            <UINT />
          </returnType>
          <inputVars>
            <variable name="Str">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="buff">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">address to buffer</xhtml>
              </documentation>
            </variable>
            <variable name="pos">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Start to insert</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <localVars>
            <variable name="length">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">returnds new pos in buff</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">length := CommonTypesAndFunctions.LEN(Str);
buff[pos]:= OSCAT_BASIC.BYTE_OF_DWORD(in:= length, N:= 1);
buff[pos+1]:= OSCAT_BASIC.BYTE_OF_DWORD(in:= length, N:= 0);

MEM.MemMove(pSource:= str, pDestination:= ADR(buff[pos+2]), uiNumberOfBytes:= length);
InsertStringToBufferAndLength := pos + length + 2;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ed441082-1d3e-463c-bc84-a704e7534de7</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="CallbackCollector" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="first">
              <type>
                <pointer>
                  <baseType>
                    <derived name="CALLBACK_INSTANCES" />
                  </baseType>
                </pointer>
              </type>
              <initialValue>
                <simpleValue value="0" />
              </initialValue>
            </variable>
            <variable name="items">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="size">
              <type>
                <UDINT />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">this FB collects instances of FB with the MQTT_SUBSCRIBE_CALLBACK interface.
then you can pass a instance of this FB to a subscription FB to call all of your FBs to a specific subscription topic,
in this call you can check if the packet was for your instance. If your instance methode call return true, the the FB exits the
loop an so you may save cycle time.
MEmory for instance references are created dynamic, so no restriction by library</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="put" ObjectId="6f3a77df-e47f-497e-83b0-884bd2a6ad09">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="instance">
                    <type>
                      <derived name="MQTT_SUBSCRIBE_CALLBACK" />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="aktElement">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="CALLBACK_INSTANCES" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">true if all ok, else false</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">aktElement := first;

IF aktElement = 0 THEN
	//first hit...
	{info 'semaphore'}
	first := __NEW(CALLBACK_INSTANCES);
	IF first = 0 THEN
		put := FALSE;
		RETURN;
	END_IF
	aktElement := first;
ELSE
	//search last
	WHILE aktElement^.next  &lt;&gt; 0 DO 
		aktElement := aktElement^.next; 
	END_WHILE
	{info 'semaphore'}
	aktElement^.next := __NEW(CALLBACK_INSTANCES);
	IF aktElement^.next = 0 THEN
		put := FALSE;
		RETURN;
	END_IF
	aktElement := aktElement^.next;
END_IF

aktElement^.callback := instance;
put := TRUE;
items := items + 1;
size := size + SIZEOF(CALLBACK_INSTANCES);</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived" ObjectId="fdb48a87-3183-43d6-b109-1174e4291775">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of received Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="element">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="CALLBACK_INSTANCES" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="loop">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">

IF first = 0 THEN
	//no callback avalable
	RETURN;
END_IF
element := first;


WHILE loop DO
	IF element^.callback.PublishReceived(Data := Data) THEN
		PublishReceived := TRUE;
		RETURN;
	END_IF
	IF element^.next = 0 THEN
		loop := FALSE;
	ELSE
		element := element^.next;
	END_IF
END_WHILE
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="destroy" ObjectId="80a0328b-46e3-417c-8576-fbd361f44c56">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <localVars>
                  <variable name="aktElement">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="CALLBACK_INSTANCES" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="nextElement">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="CALLBACK_INSTANCES" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">destroy all dynamic content</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">GVL_MQTT.ProgNum := PROG_NUM.DESTROY_CALLBACK_COLLECTOR;
IF first = 0 THEN
	RETURN;
END_IF

aktElement := first;

REPEAT
	nextElement := aktElement^.next;
	__DELETE(aktElement);
	aktElement := nextElement;
	items := items - 1;
	size := size - SIZEOF(CALLBACK_INSTANCES);
UNTIL aktElement = 0
END_REPEAT
first := 0;
GVL_MQTT.ProgNum := PROG_NUM.DESTROY_CALLBACK_COLLECTOR_DONE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="FB_Exit" ObjectId="5fdc8552-ab1f-4d80-a6dd-b946a8ffbea6">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="bInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> TRUE: the exit method is called in order to leave the instance which will be copied afterwards (online change). </xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">destroy();</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>51a2a9c5-9a9b-49de-af5a-7d0f559e2242</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ReceiverBase" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="MatchTyp">
              <type>
                <derived name="RECEIVER_INIT_TYPS" />
              </type>
            </variable>
            <variable name="Target">
              <type>
                <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION_POINTER" />
              </type>
            </variable>
            <variable name="TargetType">
              <type>
                <derived name="CommonTypesAndFunctions.VAR_TYPES" />
              </type>
            </variable>
            <variable name="PayloadCompare">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="TopicCompare">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="delimiter">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="delimiterString">
              <type>
                <string length="3" />
              </type>
            </variable>
            <variable name="SplitTopic">
              <type>
                <derived name="HandleSplitTopic" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="init" ObjectId="a0ab10da-ed41-410c-ade4-441967294689">
              <interface>
                <inputVars>
                  <variable name="MQTT_IN_OUT">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT_IN_OUT" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="MatchTyp">
                    <type>
                      <derived name="RECEIVER_INIT_TYPS" />
                    </type>
                  </variable>
                  <variable name="Target">
                    <type>
                      <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION_POINTER" />
                    </type>
                  </variable>
                  <variable name="TargetType">
                    <type>
                      <derived name="CommonTypesAndFunctions.VAR_TYPES" />
                    </type>
                  </variable>
                  <variable name="PayloadCompare">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="TopicCompare">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="delimiter">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MatchTyp := MatchTyp;
Target := Target;
TargetType := TargetType;
PayloadCompare := PayloadCompare;
TopicCompare := TopicCompare;
delimiter := delimiter;
delimiterString[0] := delimiter;
delimiterString[1] := 0;

IF MatchTyp = RECEIVER_INIT_TYPS.MQTT_STRING or MatchTyp = RECEIVER_INIT_TYPS.MQTT_STRING_JSON THEN
	SplitTopic.LowInit(TopicsLevelInit:= MQTT_IN_OUT^.COM_CONFIG.MaxTopicLevels,
			 SplitElementSizeInit:= MQTT_IN_OUT^.COM_CONFIG.MaxTopicElementSize, dynMemUsageInit:= ADR(MQTT_IN_OUT^.dynMemUsage));
	SplitTopic.NewTopic(in:= TopicCompare, test:= TRUE, SizeOfString:= CommonTypesAndFunctions.len(str:= TopicCompare));
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CheckMatch" ObjectId="633ebb81-2cad-499a-8a5e-4a734d8d13b7">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of received Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="foundPos">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">CheckMatch := FALSE;
CASE MatchTyp OF
	RECEIVER_INIT_TYPS.FIND_FULL_TOPIC:
		IF CommonTypesAndFunctions.StrEquals(str1:= Data.TopicOut , str2:= PayloadCompare) THEN
			CheckMatch := TRUE;
			GetValue(fromWhere:= Data.PayloadString);
			RETURN;
		END_IF 
	RECEIVER_INIT_TYPS.FIND_LAST_TOPIC:
		IF CommonTypesAndFunctions.StrEquals(str1:= Data.TopicOutSplit^.Topics[Data.TopicOutSplit^.ValidFields - 1], str2:= PayloadCompare) THEN
			CheckMatch := TRUE;
			GetValue(fromWhere:= Data.PayloadString);
			RETURN;
		END_IF
	RECEIVER_INIT_TYPS.FIND_PAYLOAD:
		IF CommonTypesAndFunctions.StrEqualsAtStartWithDelimiter(str1:= PayloadCompare, str2:= Data.PayloadString , delimiter:= delimiter) THEN
			CheckMatch := TRUE;
			GetValue(fromWhere:= Data.PayloadString + TO_UINT(CommonTypesAndFunctions.find(str1:= Data.PayloadString, str2:= ADR(delimiterString)))+1);
			RETURN;	
		END_IF
	RECEIVER_INIT_TYPS.JSON_FULL:
		IF CommonTypesAndFunctions.StrEquals(str1:= Data.TopicOut , str2:= PayloadCompare) THEN
			foundPos := CommonTypesAndFunctions.find(str1:= Data.PayloadString, str2:= TopicCompare); 
			IF foundPos &gt;= 0 THEN
				CheckMatch := TRUE;
				RETURN;	
			END_IF
		END_IF
	RECEIVER_INIT_TYPS.JSON_SMALL:
		IF CommonTypesAndFunctions.StrEquals(str1:= Data.TopicOutSplit^.Topics[Data.TopicOutSplit^.ValidFields - 1], str2:= PayloadCompare) THEN
			IF CommonTypesAndFunctions.find(str1:= Data.PayloadString, str2:= TopicCompare) &gt;= 0 THEN
				CheckMatch := TRUE;
				RETURN;	
			END_IF
		END_IF
	RECEIVER_INIT_TYPS.MQTT_STRING:
		IF SplitTopic.CheckTopicMatchToMe(with:= Data.TopicOutSplit) = TOPIC_MATCH.TOPIC_MATCHES THEN
			CheckMatch := TRUE;
			RETURN;
		END_IF
	RECEIVER_INIT_TYPS.MQTT_STRING_JSON:
		IF SplitTopic.CheckTopicMatchToMe(with:= Data.TopicOutSplit) = TOPIC_MATCH.TOPIC_MATCHES THEN
			IF CommonTypesAndFunctions.find(str1:= Data.PayloadString, str2:= TopicCompare) &gt;= 0 THEN
				CheckMatch := TRUE;
				RETURN;	
			END_IF
		END_IF
	
END_CASE</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetValue" ObjectId="14cbd1ea-3487-4189-8a94-6fb11210d4c8">
              <interface>
                <inputVars>
                  <variable name="fromWhere">
                    <type>
                      <pointer>
                        <baseType>
                          <string length="65000" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE TargetType OF
	CommonTypesAndFunctions.VAR_TYPES.BOOL_T,
	CommonTypesAndFunctions.VAR_TYPES.BYTE_T,
	CommonTypesAndFunctions.VAR_TYPES.DATE_T,
	CommonTypesAndFunctions.VAR_TYPES.DINT_T,
	CommonTypesAndFunctions.VAR_TYPES.DT_T,
	CommonTypesAndFunctions.VAR_TYPES.DWORD_T,
	CommonTypesAndFunctions.VAR_TYPES.INT_T,
	CommonTypesAndFunctions.VAR_TYPES.LINT_T,
	CommonTypesAndFunctions.VAR_TYPES.LREAL_T,
	CommonTypesAndFunctions.VAR_TYPES.LWORD_T,
	CommonTypesAndFunctions.VAR_TYPES.REAL_T,
	CommonTypesAndFunctions.VAR_TYPES.SINT_T,
	CommonTypesAndFunctions.VAR_TYPES.TIME_T,
	CommonTypesAndFunctions.VAR_TYPES.TOD_T,
	CommonTypesAndFunctions.VAR_TYPES.TOD2_T,
	CommonTypesAndFunctions.VAR_TYPES.UDINT_T,
	CommonTypesAndFunctions.VAR_TYPES.UINT_T,
	CommonTypesAndFunctions.VAR_TYPES.ULINT_T,
	CommonTypesAndFunctions.VAR_TYPES.USINT_T,
	CommonTypesAndFunctions.VAR_TYPES.WORD_T:
	CommonTypesAndFunctions.GetValueFromStringPt
				(TypeOfValue:= TargetType, Target:= Target, str:= fromWhere);
END_CASE</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d88c92f3-0988-4c5a-8475-ed12edb68e38</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ReceiveString" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="MQTTReceived">
              <type>
                <string length="255" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">your desired payload...</xhtml>
              </documentation>
            </variable>
          </outputVars>
          <localVars>
            <variable name="splitTopic">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">if set to true we search the instance name in the lowest topic</xhtml>
              </documentation>
            </variable>
            <variable name="splitPayload">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">if set to true we search the instance name in Payload separatet by the split char </xhtml>
              </documentation>
            </variable>
            <variable name="SplitPayloadChar">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">an this is the split char...</xhtml>
              </documentation>
            </variable>
            <variable name="MyCompString">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">compare with this...</xhtml>
              </documentation>
            </variable>
            <variable name="MyReturnHit">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">if set to true and hit we will return true, else false...</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived" ObjectId="8f6a5d94-9a77-4546-aa4e-4be60b6f742a">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of received Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="StrPt">
                    <type>
                      <pointer>
                        <baseType>
                          <string length="255" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">// no we can check if the topic/payload matches to my compare string 

//now search the right topic 
IF splitTopic THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.TopicOut, str2:= MyCompString) THEN
		StrPt := Data.PayloadString;
		MQTTReceived := StrPt^;
		PublishReceived := MyReturnHit;
	END_IF

END_IF

//now look into the payload
IF splitPayload THEN
	
	IF CommonTypesAndFunctions.StrEqualsAtStartWithDelimiter(str1:= MyCompString, str2:= Data.PayloadString, delimiter:= SplitPayloadChar) THEN
		//now search split char
		StrPt := Data.PayloadString;
		StrPt := StrPt + TO_DWORD(CommonTypesAndFunctions.find(str1 := StrPt, str2:= ADR(SplitPayloadChar))) + 1;
		MQTTReceived := StrPt^;
		PublishReceived := MyReturnHit;
	END_IF
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initAsFindTopic" ObjectId="1c97c33a-bc98-4772-8829-5c0d0b69bcf5">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="compString">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">this i'm searching</xhtml>
                    </documentation>
                  </variable>
                  <variable name="returnHit">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">if set to true and hit we will return true, else false...</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
splitPayload := FALSE;
splitTopic := TRUE;
MyCompString := compString;
MyReturnHit := returnHit;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initAsFindPayload" ObjectId="f219fd6a-098e-4674-b852-aa0881a3dcc1">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="splitChar">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">only first char is selected</xhtml>
                    </documentation>
                  </variable>
                  <variable name="compString">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">this i'm searching</xhtml>
                    </documentation>
                  </variable>
                  <variable name="returnHit">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">if set to true and hit we will return true, else false...</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
splitPayload := TRUE;
splitTopic := FALSE;

SplitPayloadChar := CommonTypesAndFunctions.GetChar(in:= splitChar);
MyCompString := compString;
MyReturnHit := returnHit;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>1969c053-827c-4deb-a980-a43c9464a8f0</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ReceiveValue" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="MQTTReceived">
              <type>
                <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">your desired payload...</xhtml>
              </documentation>
            </variable>
          </outputVars>
          <localVars>
            <variable name="TargetPointer">
              <type>
                <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION_POINTER" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">pointer to target</xhtml>
              </documentation>
            </variable>
            <variable name="MyValueTyp">
              <type>
                <derived name="CommonTypesAndFunctions.VAR_TYPES" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Target var type</xhtml>
              </documentation>
            </variable>
            <variable name="SplitPayloadChar">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">an this is the split char...</xhtml>
              </documentation>
            </variable>
            <variable name="MyCompString">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">compare with this...</xhtml>
              </documentation>
            </variable>
            <variable name="MyCompStringPayload">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">and this for Payload</xhtml>
              </documentation>
            </variable>
            <variable name="MyReturnHit">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">if set to true and hit we will return true, else false...</xhtml>
              </documentation>
            </variable>
            <variable name="ReceiveType">
              <type>
                <derived name="RECEIVE_TYPS" />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
Receives one value from a MQTT publish packet.
It can check diffrent sources to determinate if the data is for this Value....

</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived" ObjectId="5dac2322-5ac7-4538-93c4-0b74db522b57">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of received Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="StrPt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE ReceiveType OF
	RECEIVE_TYPS.FIND_LAST_TOPIC:	
		//now search the right topic 
		IF CommonTypesAndFunctions.StrEquals(str1:= Data.TopicOutSplit^.Topics[Data.TopicOutSplit^.ValidFields - 1], str2:= MyCompString) THEN
			CommonTypesAndFunctions.GetValueFromStringPt(TypeOfValue:= MyValueTyp ,Target:= TargetPointer, str:= DATA.PayloadString);
			PublishReceived := MyReturnHit;
		END_IF
	RECEIVE_TYPS.FIND_PAYLOAD:
		IF CommonTypesAndFunctions.StrEqualsAtStartWithDelimiter(str1:= MyCompString, str2:= Data.PayloadString, delimiter:= SplitPayloadChar) THEN
			//now search split char
			StrPt := Data.PayloadString;
			StrPt := StrPt + TO_DWORD(CommonTypesAndFunctions.find(str1 := StrPt, str2:= ADR(SplitPayloadChar))) + 1;
			CommonTypesAndFunctions.GetValueFromStringPt(TypeOfValue:= MyValueTyp ,Target:= TargetPointer, str:= StrPt);
			PublishReceived := MyReturnHit;
		END_IF
	RECEIVE_TYPS.FIND_LAST_TOPIC_AND_PAYLOAD:
		//now search the right topic and payload
		IF CommonTypesAndFunctions.StrEquals(str1:= Data.TopicOut, str2:= MyCompString) THEN
			IF CommonTypesAndFunctions.StrEqualsAtStartWithDelimiter(str1:= MyCompStringPayload, str2:= Data.PayloadString, delimiter:= SplitPayloadChar) THEN
				StrPt := Data.PayloadString;
				StrPt := StrPt + TO_DWORD(CommonTypesAndFunctions.find(str1 := StrPt, str2:= ADR(SplitPayloadChar))) + 1;
				CommonTypesAndFunctions.GetValueFromStringPt(TypeOfValue:= MyValueTyp ,Target:= TargetPointer, str:= StrPt);
				PublishReceived := MyReturnHit;
			END_IF
		END_IF
	RECEIVE_TYPS.FIND_TOPIC:
		//now search the right topic 
		IF CommonTypesAndFunctions.StrEquals(str1:= Data.TopicOut, str2:= MyCompString) THEN
			CommonTypesAndFunctions.GetValueFromStringPt(TypeOfValue:= MyValueTyp ,Target:= TargetPointer, str:= DATA.PayloadString);
			PublishReceived := MyReturnHit;
		END_IF
END_CASE

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initAsFindPayload" ObjectId="e6ddf348-ea05-4bcf-81e6-0069705572a2">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="splitChar">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">only first char is selected</xhtml>
                    </documentation>
                  </variable>
                  <variable name="compString">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">this i'm searching</xhtml>
                    </documentation>
                  </variable>
                  <variable name="ValueTyp">
                    <type>
                      <derived name="CommonTypesAndFunctions.VAR_TYPES" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">this typ is my received string</xhtml>
                    </documentation>
                  </variable>
                  <variable name="returnHit">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">if set to true and hit we will return true, else false...</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">ReceiveType := RECEIVE_TYPS.FIND_PAYLOAD;

SplitPayloadChar := CommonTypesAndFunctions.GetChar(in:= splitChar);
MyCompString := compString;
MyValueTyp := ValueTyp;
makePointer();
MyReturnHit := returnHit;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initAsFindTopic" ObjectId="6c7387cb-4893-4974-b840-7e19d60c9699">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="compString">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">this i'm searching</xhtml>
                    </documentation>
                  </variable>
                  <variable name="ValueTyp">
                    <type>
                      <derived name="CommonTypesAndFunctions.VAR_TYPES" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">this typ is my received string</xhtml>
                    </documentation>
                  </variable>
                  <variable name="returnHit">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">if set to true and hit we will return true, else false...</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">this will only check the lowest topic level</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">ReceiveType := RECEIVE_TYPS.FIND_TOPIC;
MyCompString := compString;
MyValueTyp := ValueTyp;
makePointer();
MyReturnHit := returnHit;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="makePointer" ObjectId="473b6f42-69a5-47ab-854c-26478a68a4fc">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">TargetPointer := CommonTypesAndFunctions.MakeAllTypesPointer(fromWho:= adr(MQTTReceived), myType:= MyValueTyp);</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initAsFindTopicAndPayload" ObjectId="eea491e6-688d-4c83-b797-32128c1e8652">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="splitChar">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">only first char is selected</xhtml>
                    </documentation>
                  </variable>
                  <variable name="compStringTopic">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">this topic i'm searching</xhtml>
                    </documentation>
                  </variable>
                  <variable name="compStringPayload">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">this payload i'm searching</xhtml>
                    </documentation>
                  </variable>
                  <variable name="ValueTyp">
                    <type>
                      <derived name="CommonTypesAndFunctions.VAR_TYPES" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">this typ is my received string</xhtml>
                    </documentation>
                  </variable>
                  <variable name="returnHit">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">if set to true and hit we will return true, else false...</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">this will check the whole topic!</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">ReceiveType := RECEIVE_TYPS.FIND_LAST_TOPIC_AND_PAYLOAD;
SplitPayloadChar := CommonTypesAndFunctions.GetChar(in:= splitChar);
MyCompString := compStringTopic;
MyCompStringPayload := compStringPayload;
MyValueTyp := ValueTyp;
makePointer();
MyReturnHit := returnHit;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetOutput" ObjectId="3d28e94b-7d99-4f05-aabe-eef9ba1e98a4">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="value">
                    <type>
                      <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTTReceived := value;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initAsFindLastTopic" ObjectId="b80a74e9-4694-4459-b362-513bb6d2c6b2">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="compString">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">this i'm searching</xhtml>
                    </documentation>
                  </variable>
                  <variable name="ValueTyp">
                    <type>
                      <derived name="CommonTypesAndFunctions.VAR_TYPES" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">this typ is my received string</xhtml>
                    </documentation>
                  </variable>
                  <variable name="returnHit">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">if set to true and hit we will return true, else false...</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">ReceiveType := RECEIVE_TYPS.FIND_LAST_TOPIC;
MyCompString := compString;
MyValueTyp := ValueTyp;
makePointer();
MyReturnHit := returnHit;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e79e061e-307d-4296-993d-9a352fb8e8d6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ReceiveValueWithStrucur" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="InstanceName">
              <type>
                <derived name="CommonTypesAndFunctions.GetInstanceName" />
              </type>
            </variable>
            <variable name="localCompString">
              <type>
                <string length="255" />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>ReceiveValue</Extends>
              </Inheritance>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitReceiveStructur" ObjectId="f50c2837-88e0-4865-9cda-a8a2f7f1dd91">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="TopicLevel">
                    <type>
                      <USINT />
                    </type>
                  </variable>
                  <variable name="ValueTyp">
                    <type>
                      <derived name="CommonTypesAndFunctions.VAR_TYPES" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">this typ is my received string</xhtml>
                    </documentation>
                  </variable>
                  <variable name="returnHit">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">if set to true and hit we will return true, else false...</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="tString">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="cmpByte">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                  <variable name="bytePointer">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="StringPointer">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="i">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
tString:= InstanceName.GetInstanceTopic();

cmpByte:= CommonTypesAndFunctions.GetChar('/');

bytePointer := ADR(tString) + CommonTypesAndFunctions.len(ADR(tString));

i := 0;

WHILE bytePointer &gt;= ADR(tString) DO
	IF bytePointer^ = cmpByte THEN
		i := i + 1; 
	END_IF
	
	IF i = TopicLevel THEN
		
		StringPointer := bytePointer + 1;
		//ReceiveTopic := GVL_ZIGBEE.TextZigbeeTopic;
		//ReceiveTopic := CONCAT(STR1:= ReceiveTopic, STR2:= StringPointer^); 
		localCompString := StringPointer^;
		initAsFindTopic(compString:= ADR(localCompString), ValueTyp:= ValueTyp, returnHit:= returnHit);
		RETURN;
	END_IF
	bytePointer := bytePointer - 1;
END_WHILE
localCompString := tString;
initAsFindTopic(compString:= ADR(localCompString), ValueTyp:= ValueTyp, returnHit:= returnHit);</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/buildproperties" handleUnknown="implementation">
            <BuildProperties>
              <ExcludeFromBuild>true</ExcludeFromBuild>
            </BuildProperties>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>99ceed21-5186-417f-a187-d8491765488e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ListAllValuesCallback" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="MyListData">
              <type>
                <pointer>
                  <baseType>
                    <derived name="LIST_ALLVALUES_CALLBACK_DATA" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MyLengthOfData">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="ListSplitTopic">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ListSplitPayload">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SplitCharPayload">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
this FB expects all values as a string, binary receive is not suported...
Payload content is only value, no description, no special characters...
</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived" ObjectId="4b13837b-0910-4d97-83b1-7e6b12575041">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of received Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="i">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="StrPt">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF ListSplitTopic THEN
	//now search the right topic 
	FOR i := 0 TO MyLengthOfData - 1 DO
		IF CommonTypesAndFunctions.StrEquals(str1:= Data.TopicOutSplit^.Topics[Data.TopicOutSplit^.ValidFields - 1], str2:= MyListData[i].SubTopic) THEN
			CommonTypesAndFunctions.GetValueFromStringPt(TypeOfValue:= MyListData[i].VarTYPE ,Target:= MyListData[i].Target, str:= DATA.PayloadString);
		END_IF
	END_FOR
END_IF
IF ListSplitPayload THEN
	FOR i := 0 TO MyLengthOfData - 1 DO
		IF CommonTypesAndFunctions.StrEqualsAtStartWithDelimiter(str1:= MyListData[i].SubTopic, str2:= Data.PayloadString, delimiter:= SplitCharPayload) THEN
			//now search split char
			StrPt := Data.PayloadString;
			StrPt := StrPt + TO_DWORD(CommonTypesAndFunctions.find(str1 := StrPt, str2:= ADR(SplitCharPayload))) + 1;
			
			CommonTypesAndFunctions.GetValueFromStringPt(TypeOfValue:= MyListData[i].VarTYPE ,Target:= MyListData[i].Target, str:= StrPt);
		END_IF
	END_FOR
	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitAsSplitTopic" ObjectId="ec841e67-d08f-4bb1-ac80-2e5d19cfcde9">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="LIST_ALLVALUES_CALLBACK_DATA" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="LengthOfData">
                    <type>
                      <ULINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Count of List Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MyListData := Data;
MyLengthOfData := LengthOfData;
ListSplitTopic := TRUE;
ListSplitPayload := FALSE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitAsSplitPayload" ObjectId="7333d65b-e3b6-4bf9-9f1c-f201407da786">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="LIST_ALLVALUES_CALLBACK_DATA" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="LengthOfData">
                    <type>
                      <ULINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Count of List Data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="SplitChar">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">spliting character</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">inits FB, callback methoth then checks if the payload ist the same in the first characters as in the template
make sure to receive a string payload!
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MyListData :=Data;
MyLengthOfData := LengthOfData;
ListSplitTopic := FALSE;
ListSplitPayload := TRUE;
SplitCharPayload := SplitChar;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>84025d8c-083e-4de9-a0cc-21ea2e4ce371</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="ListStringCallback" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="MyListData">
              <type>
                <pointer>
                  <baseType>
                    <derived name="LIST_STRING_CALLBACK_DATA" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MyLengthOfData">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="ListSplitTopic">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ListSplitPayload">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SplitCharPayload">
              <type>
                <BYTE />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived" ObjectId="300d94f1-6aa0-4736-9113-e9dcac12f765">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of received Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="i">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="StrPt">
                    <type>
                      <pointer>
                        <baseType>
                          <string length="255" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="SplitPos">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//now search the right topic 
IF ListSplitTopic THEN
	FOR i := 0 TO MyLengthOfData - 1 DO
		IF CommonTypesAndFunctions.StrEquals(str1:= Data.TopicOutSplit^.Topics[Data.TopicOutSplit^.ValidFields - 1], str2:= MyListData[i].SubTopic) THEN
			//MyListData[i].Target^ := Data.PayloadString^;
			MEM.MemMove(pSource:= Data.PayloadString, pDestination:= MyListData[i].Target, uiNumberOfBytes:= TO_UINT(data.PayloadSize + 1));
			PublishReceived := TRUE;
		END_IF
	END_FOR
END_IF

IF ListSplitPayload THEN
	FOR i := 0 TO MyLengthOfData - 1 DO
		IF CommonTypesAndFunctions.StrEqualsAtStartWithDelimiter(str1:= MyListData[i].SubTopic, str2:= Data.PayloadString, delimiter:= SplitCharPayload) THEN
			//now search split char
			StrPt := Data.PayloadString;
			SplitPos := CommonTypesAndFunctions.find(str1 := StrPt, str2:= ADR(SplitCharPayload));
			StrPt := StrPt + TO_DWORD(SplitPos) + 1;
			//MyListData[i].Target^ := StrPt^;
			MEM.MemMove(pSource:= Data.PayloadString, pDestination:= MyListData[i].Target, uiNumberOfBytes:= TO_UINT(data.PayloadSize + 1 - TO_UDINT(SplitPos)) );
			PublishReceived := TRUE;
		END_IF
	END_FOR
	
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitAsSplitTopic" ObjectId="b9376d50-1013-4c93-b633-4561784d46db">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="ListData">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="LIST_STRING_CALLBACK_DATA" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="LengthOfData">
                    <type>
                      <ULINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Count of List Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">ints FB to split packets at lowest payload level</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MyListData :=ListData;
MyLengthOfData := LengthOfData;
ListSplitTopic := TRUE;
ListSplitPayload := FALSE;
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="InitAsSplitPayload" ObjectId="a744126e-37a2-4e09-a308-1dc43301a511">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="ListData">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="LIST_STRING_CALLBACK_DATA" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="LengthOfData">
                    <type>
                      <ULINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Count of List Data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="SplitChar">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">spliting character</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">inits FB, callback methoth then checks if the payload ist the same in the first characters as in the template
make sure to receive a string payload!
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MyListData :=ListData;
MyLengthOfData := LengthOfData;
ListSplitTopic := FALSE;
ListSplitPayload := TRUE;
SplitCharPayload := SplitChar;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>332de4d0-cc8a-469a-bec9-dd445ce42a98</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="AllValuesCallback" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="received">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">data was received, you have to reset this bit after checking!</xhtml>
              </documentation>
            </variable>
          </outputVars>
          <localVars>
            <variable name="VarType">
              <type>
                <derived name="CommonTypesAndFunctions.VAR_TYPES" />
              </type>
            </variable>
            <variable name="MyTarget">
              <type>
                <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION_POINTER" />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
this FB expects all values as a string, binary receive is not suported...
Payload content is only value, no description, no special characters...
</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived" ObjectId="2f430b41-f79b-4620-a1d7-437ad308f9f0">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of received Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">CommonTypesAndFunctions.GetValueFromStringPt(TypeOfValue:= VarType,Target:= MyTarget, str:= DATA.PayloadString);

received := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Init" ObjectId="38707088-83ca-4b74-8afc-12273cd2b412">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="SetType">
                    <type>
                      <derived name="CommonTypesAndFunctions.VAR_TYPES" />
                    </type>
                  </variable>
                  <variable name="Target">
                    <type>
                      <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION_POINTER" />
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">VarType := SetType;
MyTarget := Target;
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetReceived" ObjectId="d7a3321e-332f-47ba-93d8-27fc9741fd3c">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">received := FALSE;
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>c91c0058-ed3d-408b-a92c-8647174c1ede</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="SingelStringCallback" pouType="functionBlock">
        <interface>
          <outputVars>
            <variable name="received">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">data was received, you have to reset this bit after checking!</xhtml>
              </documentation>
            </variable>
          </outputVars>
          <localVars>
            <variable name="MyPayload">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MyTopic">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived" ObjectId="53ab1c96-daf3-4024-886c-6c34b29b131b">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of received Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MEM.MemMove(pSource:= Data.PayloadString, pDestination:= MyPayload, uiNumberOfBytes:= TO_UINT(data.PayloadSize + 1));
MEM.MemMove(pSource:= Data.TopicOut, pDestination:= MyTopic, uiNumberOfBytes:= CommonTypesAndFunctions.len(Data.TopicOut) + 1);

received := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Init" ObjectId="b4b0937c-ab6a-4856-949b-021a2f0bb119">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="payload">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="topic">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MyTopic := topic;
MyPayload := payload;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetReceived" ObjectId="fccdeeed-1425-41ac-ace9-47ad69c149a4">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">received := FALSE;
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>0c518722-7423-4fb1-8412-7ed77d1701cb</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HANDLE_MQTT" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="MQTT_IN_OUT">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
          </inOutVars>
          <inputVars>
            <variable name="ENABLE">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="URL">
              <type>
                <string length="OSCAT_BASIC.STRING_LENGTH" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">use format: user:password@domain:port</xhtml>
              </documentation>
            </variable>
            <variable name="TIMEOUT">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="TLS">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="ERROR_C">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="ERROR_T">
              <type>
                <BYTE />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="MQTT_INFO">
              <type>
                <derived name="MQTT_INFO" />
              </type>
            </variable>
            <variable name="DT_MQTT">
              <type>
                <derived name="CommonTypesAndFunctions.TIME_DATE_IMPULS" />
              </type>
            </variable>
            <variable name="MQTT_CONTROL">
              <type>
                <derived name="MQTT_CONTROL" />
              </type>
            </variable>
            <variable name="step">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="i1">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="PingSlot">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="COM">
              <type>
                <derived name="MQTT_COM" />
              </type>
            </variable>
            <variable name="connected">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TimeoutConnection">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="MqttsDoneIo">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="CycleTime">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="LastCycleTime">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="NextPingTime">
              <type>
                <derived name="CAA.TICK" />
              </type>
            </variable>
            <variable name="PingTime">
              <type>
                <derived name="CAA.TICK" />
              </type>
              <initialValue>
                <simpleValue value="((MyConstants.KEEP_ALIVE_TIME * 1000) - 6000)" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">next ping after 6 seconds </xhtml>
              </documentation>
            </variable>
            <variable name="PingRequestet">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> Ping was sendet</xhtml>
              </documentation>
            </variable>
            <variable name="PingData">
              <type>
                <derived name="DATA_TO_BROKER" />
              </type>
            </variable>
            <variable name="myFbNo">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="PubrelOrderIndexCounter">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="PubcompOrderIndexCounter">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="LogFile">
              <type>
                <derived name="CAA.HANDLE" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">log file</xhtml>
              </documentation>
            </variable>
            <variable name="open">
              <type>
                <derived name="FILE.Open" />
              </type>
            </variable>
            <variable name="write">
              <type>
                <derived name="FILE.Write" />
              </type>
            </variable>
            <variable name="LogString">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="DebugFile">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="OutData">
              <type>
                <array>
                  <dimension lower="0" upper="MyConstants.QoS_BUFFER_SIZE" />
                  <baseType>
                    <derived name="MQTT_OUT_DATA" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="InData">
              <type>
                <array>
                  <dimension lower="0" upper="MyConstants.QoS_BUFFER_SIZE" />
                  <baseType>
                    <derived name="MQTT_IN_DATA" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="PublishSendListCount">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="PublishSendList">
              <type>
                <array>
                  <dimension lower="0" upper="MyConstants.QoS_BUFFER_SIZE" />
                  <baseType>
                    <UINT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="PubrelSendListCount">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="PubrelSendList">
              <type>
                <array>
                  <dimension lower="0" upper="MyConstants.QoS_BUFFER_SIZE" />
                  <baseType>
                    <UINT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="PubackSendListCount">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="PubackSendList">
              <type>
                <array>
                  <dimension lower="0" upper="MyConstants.QoS_BUFFER_SIZE" />
                  <baseType>
                    <UINT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="PubrecSendListCount">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="PubrecSendList">
              <type>
                <array>
                  <dimension lower="0" upper="MyConstants.QoS_BUFFER_SIZE" />
                  <baseType>
                    <UINT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="PubcompSendListCount">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="PubcompSendList">
              <type>
                <array>
                  <dimension lower="0" upper="MyConstants.QoS_BUFFER_SIZE" />
                  <baseType>
                    <UINT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="RepeatedPublish">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Repeted Publishs</xhtml>
              </documentation>
            </variable>
            <variable name="RepeatedPublishsAfterPubrel">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Repeatet publishs afert ot much repeat of pubrel</xhtml>
              </documentation>
            </variable>
            <variable name="RepeatedPubrel">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Repeted pubrel</xhtml>
              </documentation>
            </variable>
            <variable name="CountRepeatedPing">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Repeted Ping</xhtml>
              </documentation>
            </variable>
            <variable name="CountRepeatedPingDisconnect">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Repeated pings untill disconnect</xhtml>
              </documentation>
            </variable>
            <variable name="PublishsUnacknowledged">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">count of Publishs unacknowledged</xhtml>
              </documentation>
            </variable>
            <variable name="LastToBigTopic">
              <type>
                <string length="255" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">last part of 255 chars of to big paket topic</xhtml>
              </documentation>
            </variable>
            <variable name="CountToBigTopics">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">count of to big topics</xhtml>
              </documentation>
            </variable>
            <variable name="CountLengthErrors">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Cont of ength Error Pakets</xhtml>
              </documentation>
            </variable>
            <variable name="CountRepeatPublishReceive">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Count of repeatet publishs</xhtml>
              </documentation>
            </variable>
            <variable name="CountReceivedPublishs">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Count Received Publishs</xhtml>
              </documentation>
            </variable>
            <variable name="CountSendedPublishs">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">count sended publishs</xhtml>
              </documentation>
            </variable>
            <variable name="CountRepeatSubscribe">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Count of repeated subscribs</xhtml>
              </documentation>
            </variable>
            <variable name="CountRepeatUnsubscribe">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Count of repeated unsubscribs</xhtml>
              </documentation>
            </variable>
            <variable name="CountRepeatetPubrec">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Count of repeatet pubrec</xhtml>
              </documentation>
            </variable>
            <variable name="CountOutputPublishCalled">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Count of OutputPublish calls</xhtml>
              </documentation>
            </variable>
            <variable name="PUBREC_ERROR_ID_BUFFER">
              <type>
                <array>
                  <dimension lower="0" upper="(PUBREC_ERROR_ID_BUFFER_SIZE - 1)" />
                  <baseType>
                    <UINT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="PUBREC_ERROR_INDEX">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="OutgoingPublishOrderIndexCounter">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">send Publish order Index</xhtml>
              </documentation>
            </variable>
            <variable name="IncomingPublishOrderIndexCounter">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">receive Publish order Index</xhtml>
              </documentation>
            </variable>
            <variable name="CountReceivePubrelUnknown">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Received Pubrel, Paket not found</xhtml>
              </documentation>
            </variable>
            <variable name="CountReceiveUnsubackUnknown">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Received Unsuback, Paket not found</xhtml>
              </documentation>
            </variable>
            <variable name="CountReceiveSubackUnknown">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Received Suback, Paket not found</xhtml>
              </documentation>
            </variable>
            <variable name="CountReceivePubackUnknown">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Received Puback, Paket not found</xhtml>
              </documentation>
            </variable>
            <variable name="CountReceivePubrecUnknown">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Received Pubrec, Paket not found</xhtml>
              </documentation>
            </variable>
            <variable name="CountReceivePubcompUnknown">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Received Pubcomp, Paket not found</xhtml>
              </documentation>
            </variable>
            <variable name="SendInfos">
              <type>
                <derived name="SEND_INFOS" />
              </type>
            </variable>
            <variable name="CountOutSendNotFree">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="CountInSendNotFree">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="CountCantSendPublishBufferToFull">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="CounterPublishSendForMonitor">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="PublishsSendPerSeconde">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="CounterPublishReceivedForMonitor">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="PublishsReceivedPerSeconde">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="NotKnownPaket">
              <type>
                <derived name="MESSAGETYPE" />
              </type>
            </variable>
            <variable name="CountUnkownPaket">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="LastPaktetForUnkownPaket">
              <type>
                <derived name="MESSAGETYPE" />
              </type>
            </variable>
            <variable name="HelperLastPaktetForUnkownPaket">
              <type>
                <derived name="MESSAGETYPE" />
              </type>
            </variable>
            <variable name="CountBufferMoves">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="CountNothingSend">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="CountConnectAttempt">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="CountSplitTopicSizeExceeded">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">count of topic size exceeded</xhtml>
              </documentation>
            </variable>
            <variable name="CountWaitForRestOfPaket">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="CountResetBufferIn">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="InBufferMoved">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="SendFree">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MySplitTopic">
              <type>
                <derived name="HandleSplitTopic" />
              </type>
            </variable>
            <variable name="InsertSplitTopic">
              <type>
                <derived name="InsertSplitTopic" />
              </type>
            </variable>
            <variable name="InsertSplitPayload">
              <type>
                <derived name="InsertSplitPayload" />
              </type>
            </variable>
            <variable name="StepBuildPublish">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="StepBuildSubscribe">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="StepBuildUnsubscribe">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="SplitPublishBuffer">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">use this buffer for received publish packets whos size exceded network buffer Size</xhtml>
              </documentation>
            </variable>
            <variable name="SplitPublishBufferSize">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="SplitPublishLength">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="MaxPublishPacketSize">
              <type>
                <UDINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">output from buffer Don't write new data!
SplitPublishLock:BOOL;</xhtml>
              </documentation>
            </variable>
            <variable name="PayloadMemorySize">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="SubscribeCallbacks">
              <type>
                <array>
                  <dimension lower="0" upper="(CALLBACKS_BUFFER_SIZE - 1)" />
                  <baseType>
                    <derived name="MQTT_SUBSCRIBE_CALLBACKS" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="TopicMemorySize">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="COM_CONFIG">
              <type>
                <derived name="COM_CONFIG" />
              </type>
            </variable>
            <variable name="PublishSplited">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">publish paket broken, waiting for more data</xhtml>
              </documentation>
            </variable>
            <variable name="DoDisconnect">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SendetBytes">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="ReceivedBytes">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="InSlotsWorking">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="OutSlotsWorking">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="SplitPublishBufferAllocationSize">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="DynMemUsagePointer">
              <type>
                <pointer>
                  <baseType>
                    <UDINT />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="CallbacksFull">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">callbacks array full</xhtml>
              </documentation>
            </variable>
            <variable name="ErrorHistory">
              <type>
                <array>
                  <dimension lower="0" upper="COUNT_ERROR_HISTORY" />
                  <baseType>
                    <derived name="ONE_ERROR" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="localTdi">
              <type>
                <derived name="CommonTypesAndFunctions.TIME_DATE_IMPULS_DATA" />
              </type>
            </variable>
            <variable name="StepInitDone">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Step 10 Init is done:</xhtml>
              </documentation>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="CALLBACKS_BUFFER_SIZE">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="200" />
              </initialValue>
            </variable>
            <variable name="RECEIVE_PUBLISH_BUFFER_SIZE">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="(NETWORK_BUFFER_LONG_SIZE * 2)" />
              </initialValue>
            </variable>
            <variable name="TRANSMIT_BUFFER_SIZE">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="NETWORK_BUFFER_LONG_SIZE" />
              </initialValue>
            </variable>
            <variable name="SIZE_PUBREL">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="4" />
              </initialValue>
            </variable>
            <variable name="SIZE_UNSUBACK">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="4" />
              </initialValue>
            </variable>
            <variable name="SIZE_PINGRESP">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="2" />
              </initialValue>
            </variable>
            <variable name="SIZE_PINGREQ">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="2" />
              </initialValue>
            </variable>
            <variable name="SIZE_SUBACK">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="5" />
              </initialValue>
            </variable>
            <variable name="SIZE_PUBACK">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="4" />
              </initialValue>
            </variable>
            <variable name="SIZE_PUBREC">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="4" />
              </initialValue>
            </variable>
            <variable name="SIZE_PUBCOMP">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="4" />
              </initialValue>
            </variable>
            <variable name="SIZE_PAKET_BUFFER_HEADER">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="4" />
              </initialValue>
            </variable>
            <variable name="PUBREC_ERROR_ID_BUFFER_SIZE">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="100" />
              </initialValue>
            </variable>
            <variable name="MAX_PING_REPEATS">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="10" />
              </initialValue>
            </variable>
            <variable name="SPLIT_PUBLISH_BUFFER_ADDITIONAL_RAM">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="17" />
              </initialValue>
            </variable>
            <variable name="COUNT_MAX_PUBREC_REPEAT_TO_DISCHARGE">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="20" />
              </initialValue>
            </variable>
            <variable name="COUNT_ERROR_HISTORY">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="1000" />
              </initialValue>
            </variable>
          </localVars>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
var/log/mosquitto/mosquitto.log
Messsages are not beeing repeatet, if timout for an answer then connection is canceled, new established and the publisher have to start new
Start the command line subscriber:
mosquitto_sub -v -t 'test/topic'
mosquitto_sub -v -h test.mosquitto.org -t 'test/topic'


sudo apt-get install tshark 

tshark -i 1 -a duration:60 -w /tmp/wlan.pcap

debug / logging :
mosquitto_sub -v -t '$SYS/#'
sudo nano /etc/mosquitto/mosquitto.conf  --&gt; 'log_type all'
Publish test message with the command line publisher:
mosquitto_pub -t 'test/topic' -m 'helloWorld'
change check free to InFbNo

kopieren
sudo cp /var/log/mosquitto/mosquitto.log /tmp/
zugriff
sudo chmod -v a=r /tmp/mosquitto.log


TODO: Take care of clean session, is enabled, do it paramable?
	
</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF MQTT_INFO.MQTT_CONNECTED THEN
	SendFree := COM.S_BUF.SIZE = 0;	
END_IF

CycleTime := OSCAT_BASIC.T_PLC_MS() - LastCycleTime;
LastCycleTime := OSCAT_BASIC.T_PLC_MS();
//get system time and so one
DT_MQTT(
	TDI_Data:= MQTT_IN_OUT.TDI);
localTdi:= MQTT_IN_OUT.TDI ; 
TimeoutConnection(IN:= step = 10, PT:= T#5S);

IF DebugFile THEN
		//open log file
		open(
	xExecute:= TRUE, 
	sFileName:= '/tmp/mqtt.log', 
	eFileMode:= 0, 
	xExclusive:= TRUE, 
	hFile=&gt; LogFile);
END_IF

CASE step OF

	00:	MQTT_IN_OUT.BROKER_CONNECTED := FALSE;
		IF ENABLE THEN
			MQTT_IN_OUT.handleFB := THIS;
			PingRequestet := FALSE;
			PublishsUnacknowledged := 0;
			PUBREC_ERROR_INDEX := 0;
			CountRepeatedPingDisconnect := 0;
			SendetBytes := 0;
			ReceivedBytes := 0;		
			PublishSplited := FALSE;
			DoDisconnect := FALSE;
			SendInfos.PingNeeded := FALSE;
			SendInfos.SubscribeNeeded := FALSE;
			SendInfos.UnsubscribeNeeded := FALSE;
			StepBuildPublish := 0;
			StepBuildSubscribe := 0;
			StepBuildUnsubscribe := 0;
			InsertSplitTopic.reset();
			InsertSplitPayload.reset();
			CountConnectAttempt := CountConnectAttempt + 1;
			DynMemUsagePointer := ADR(MQTT_IN_OUT.dynMemUsage);
			COM.MQTT_URL := URL;
			COM.TIMEOUT := TIMEOUT;
			COM.CLIENT_ID := MQTT_IN_OUT.ClientID;
			COM.TLS := TLS;
			COM.TLS_CONFIG := MQTT_IN_OUT.TLS_CONFIG;
			ResetPingTime();
			//build will topic
			IF MQTT_IN_OUT.BuildWillTopicAndMessage THEN
				COM.CLIENT_WILL_TOPIC := MQTT_IN_OUT.WillTopicBase;
				COM.CLIENT_WILL_TOPIC := Standard.CONCAT(STR1:= COM.CLIENT_WILL_TOPIC, '/');
				COM.CLIENT_WILL_TOPIC := Standard.CONCAT(STR1:= COM.CLIENT_WILL_TOPIC, STR2:= COM.CLIENT_ID);
				COM.CLIENT_WILL_TOPIC := Standard.CONCAT(STR1:= COM.CLIENT_WILL_TOPIC, '/');
				COM.CLIENT_WILL_TOPIC := Standard.CONCAT(STR1:= COM.CLIENT_WILL_TOPIC, MQTT_IN_OUT.ClientWillTopic);
				COM.CLIENT_WILL_TOPIC := Standard.CONCAT(STR1:= '/', COM.CLIENT_WILL_TOPIC);
				COM.CLIENT_WILL_TOPIC := Standard.CONCAT(STR1:= COM.CLIENT_ID, COM.CLIENT_WILL_TOPIC);
			ELSE
				COM.CLIENT_WILL_TOPIC := MQTT_IN_OUT.ClientWillTopic;
			END_IF
			COM.CLIENT_WILL_MESSAGE_DEAD := MQTT_IN_OUT.ClientWillMessage;
			COM_CONFIG := MQTT_IN_OUT.COM_CONFIG;
			FOR i1 := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
				//reset in slots
				InData[i1].step := STEPS_IN.WAIT_DATA;
				OutData[i1].step := STEPS_OUT.WAIT_DATA;
				//reset Timeouts...
				InData[i1].TimeOutStarted := FALSE;
				OutData[i1].TimeOutStarted := FALSE;
				InData[i1].TimeOut(IN:= InData[i1].TimeOutStarted, PT:= MyConstants.REPEAT_TIMEOUT);
				OutData[i1].TimeOut(IN:= OutData[i1].TimeOutStarted, PT:= MyConstants.REPEAT_TIMEOUT);
			END_FOR
			//reset callbacks
			FOR i1 := 0 TO CALLBACKS_BUFFER_SIZE - 1 DO
				SubscribeCallbacks[i1].free := TRUE; 
			END_FOR
			IF  MySplitTopic.FullInit(TopicsLevelInit:= COM_CONFIG.MaxTopicLevels, SplitElementSizeInit:= COM_CONFIG.MaxTopicElementSize, dynMemUsageInit:= ADR(MQTT_IN_OUT.dynMemUsage)) THEN
				
				PayloadMemorySize := COM_CONFIG.MaxPayloadSize;
				{warning disable C0033}
				TopicMemorySize := COM_CONFIG.MaxTopicElementSize * COM_CONFIG.MaxTopicLevels;
				MaxPublishPacketSize := (COM_CONFIG.MaxTopicElementSize * COM_CONFIG.MaxTopicLevels) + PayloadMemorySize;
				SplitPublishBufferAllocationSize := MaxPublishPacketSize + SPLIT_PUBLISH_BUFFER_ADDITIONAL_RAM;
				{info 'semaphore'}
				SplitPublishBuffer  := __NEW(BYTE, SplitPublishBufferAllocationSize);//some additional bytes for paket overhead and termination
				IF SplitPublishBuffer = 0 THEN
					PushError(newError:= ERRORS.OUT_OFF_DYN_MEMORY, text:='No Dyn Memory in Step 00 in Handle' );
					step := 60;
				ELSE
					MQTT_IN_OUT.dynMemUsage := MQTT_IN_OUT.dynMemUsage + SplitPublishBufferAllocationSize;
					{warning restore C0033}
		
					step := 10;
					COM.MQTT_CON := TRUE;
					StepInitDone := TRUE;
					
				END_IF
			ELSE
				PushError(newError:= ERRORS.OUT_OFF_DYN_MEMORY, text:='No Dyn Memory in Step 00 in Handle on create SplitTopic' );
				step := 60;
			END_IF
		END_IF	
	10:	IF MQTT_INFO.MQTT_CONNECTED THEN
			step := 40;
			MQTT_IN_OUT.BROKER_CONNECTED := TRUE;
			PushError(newError:= ERRORS.CONNECTION_ESTABLISHED, text:='');
		END_IF
		IF TimeoutConnection.Q THEN
			PushError(newError:= ERRORS.TIMEOUT_CONNECTION, text:='' );
			step := 0;//reset steps
			destroy();
			
		END_IF
	40:	
		IF PublishSplited THEN
			MergeSplitedPublish(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
		END_IF	
		ParseIncoming(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
		PublishSendListCount := 0;
		PubrelSendListCount := 0;
		PubackSendListCount := 0;
		PubrecSendListCount := 0;
		PubcompSendListCount := 0;
		StateMashineIn(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
		StateMashineOut( MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
		
		SendOutData(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
		SendInData(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	
		IF MQTT_IN_OUT.TDI.IMP THEN
			PublishsSendPerSeconde := CounterPublishSendForMonitor;
			CounterPublishSendForMonitor := 0;
			PublishsReceivedPerSeconde := CounterPublishReceivedForMonitor;
			CounterPublishReceivedForMonitor := 0;
		END_IF
		IF COM.S_BUF.SIZE = 0 THEN
			CountNothingSend := CountNothingSend + 1;
		END_IF
		IF NOT ENABLE THEN 	(* beenden? *)
			step := 50;
			
		END_IF;
		IF DoDisconnect THEN
			DoDisconnect := FALSE;
			//here hard disconnect
			PushError(newError:= ERRORS.HARD_DISCONNECT , text:='');
			COM.MQTT_CON := FALSE; (* MQTT Verbindung beenden *)
			COM.MQTT_ABORT := TRUE;
			MQTT_IN_OUT.BROKER_CONNECTED := FALSE;
			step := 60;
		END_IF

(* ~~~~~~~~~~~~~~~~~~~~~~ *)

50: 
	COM.MQTT_CON := FALSE; (* MQTT Verbindung beenden *)
	MQTT_IN_OUT.BROKER_CONNECTED := FALSE;
	step := 60;//wait for disconnect
60:
	IF MQTT_INFO.MQTT_CONNECTED = FALSE THEN
		destroy();
		step := 0;
		MQTT_IN_OUT.BROKER_CONNECTED := FALSE;
	END_IF
END_CASE;



(* ########################## *)

IF CountRepeatedPingDisconnect &gt; MAX_PING_REPEATS THEN
	DoDisconnect := TRUE;
	IF step = 40 THEN
		PushError(newError:= ERRORS.MAX_PING_REPEATS, text:='');
	END_IF
END_IF


SendetBytes := SendetBytes + COM.S_BUF.SIZE;
MQTT_CONTROL(COM:= COM, INFO:=MQTT_INFO);
ReceivedBytes := ReceivedBytes + COM.R_BUF.SIZE;
ERROR_C := COM.ERROR_C;
ERROR_T := COM.ERROR_T;
//handl ping telegram
IF NextPingTime &lt; TICKS.GetTick(xDummy:= TRUE) AND NOT PingRequestet AND connected THEN
	
	MakePingPaket(MQTT_IN_OUT := MQTT_IN_OUT);
	
END_IF

IF COM.ERROR_T &gt; BYTE#0 THEN  (* FEHLER *)
	DoDisconnect := TRUE;
	MQTT_IN_OUT.BROKER_CONNECTED := FALSE;
	PushError(newError:= ERRORS.CONNECTION_REFUSED, text:='');
END_IF;
//put status to local clients
 

connected := MQTT_IN_OUT.BROKER_CONNECTED;
(* ########################## *)

(* revision history


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ResetPingTime" ObjectId="6b44b8d0-7adf-48d8-b75c-dd2acfbff3a1">
              <interface />
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">NextPingTime := PingTime + TICKS.GetTick(xDummy:= TRUE);
CountRepeatedPingDisconnect := 0;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="MakePingPaket" ObjectId="f2386f31-8fa4-46c4-b65c-985254494317">
              <interface>
                <inOutVars>
                  <variable name="MQTT_IN_OUT">
                    <type>
                      <derived name="MQTT_IN_OUT" />
                    </type>
                  </variable>
                </inOutVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF MQTT_IN_OUT.InFree THEN 
	MQTT_IN_OUT.IN := ADR(PingData); //set request
	PingData.PaketData.MessageType := MESSAGETYPE.PINGREQ;
	MQTT_IN_OUT.InFree := FALSE;
	PingRequestet := TRUE;
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StateMashineOut" ObjectId="76450c13-0057-4d67-9911-3a23329af831">
              <interface>
                <inputVars>
                  <variable name="MQTT_IN_OUT">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT_IN_OUT" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">StepData:POINTER TO MQTT_OUT_DATA;</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="i">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="j">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="tmpLowest">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="minIndex">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="UnsubscribeLastHighest">
                    <type>
                      <UINT />
                    </type>
                    <initialValue>
                      <simpleValue value="16#FFFF" />
                    </initialValue>
                  </variable>
                  <variable name="SubscribeLastHighest">
                    <type>
                      <UINT />
                    </type>
                    <initialValue>
                      <simpleValue value="16#FFFF" />
                    </initialValue>
                  </variable>
                  <variable name="ReceivePaketID">
                    <type>
                      <WORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">	PublishLastHighest : UINT := 16#FFFF;
	PubrelLastHighest : UINT := 16#FFFF;</xhtml>
                    </documentation>
                  </variable>
                  <variable name="ReceivePakteType">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                  <variable name="TempSlotsWorking">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*need a token for coordinate send of pakets....
prio for Awnser and repeat pakets bevor new publish
dont use token, just send paket with next publish index*)
//get paket id
ReceivePaketID := DWORD_TO_WORD(OSCAT_BASIC.DWORD_OF_BYTE(B3:= 0, B2:= 0, B1:= COM.R_BUF.BUFFER[2], B0:= COM.R_BUF.BUFFER[3]));
ReceivePakteType := COM.R_BUF.BUFFER[0] AND 16#F0; 

GVL_MQTT.ProgNum := PROG_NUM.STATE_MASHINE_OUT;
PublishSendListCount := 0;
PubrelSendListCount := 0;

TempSlotsWorking := 0;
FOR i := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
	//do Timers...
	OutData[i].TimeOut(IN:= OutData[i].TimeOutStarted, PT:= MyConstants.REPEAT_TIMEOUT);
	CASE OutData[i].step OF
		
		STEPS_OUT.WAIT_DATA:
			OutData[i].TimeOutStarted := FALSE;
			IF NOT MQTT_IN_OUT^.InFree THEN//new Data from FBs
				MQTT_IN_OUT^.InFree := TRUE;
				OutData[i].InDataFromFb := MQTT_IN_OUT^.In;//set Data
				//Pakte id = slot + 1....
				OutData[i].InDataFromFb^.PaketId := i + 1;
				CASE OutData[i].InDataFromFb^.MessageType OF
					MESSAGETYPE.PINGREQ:
						OutData[i].step := STEPS_OUT.WAIT_PINGRESP;
						SendInfos.PingNeeded := TRUE;
						SendInfos.PingIndex := i;
						PingSlot := i;
					//we only sending one subscription per subscribe paket....
					MESSAGETYPE.SUBSCRIBE:
						//check if we have a slot free for subscription
						FOR j := 0 TO CALLBACKS_BUFFER_SIZE - 1 DO
							IF SubscribeCallbacks[j].free THEN
								OutData[i].step := STEPS_OUT.SEND_SUBSCRIBE;
								CallbacksFull := FALSE;
								EXIT;
							END_IF
						END_FOR
						IF j = CALLBACKS_BUFFER_SIZE THEN
							//no free slot
							MQTT_IN_OUT^.In^.CallbackError := TRUE;
							CallbacksFull := TRUE;
						END_IF
					MESSAGETYPE.UNSUBSCRIBE:
						OutData[i].step := STEPS_OUT.SEND_UNSUBSCRIBE;
					ELSE
						PushError(newError:= ERRORS.UNKNOWN_PAKET_IN_MQTT_IN_OUT , text:= CONCAT(STR1:= 'Type:', STR2:= TO_STRING(OutData[i].InDataFromFb^.MessageType)));
				END_CASE
				
			END_IF
		
		STEPS_OUT.WAIT_PINGRESP:
			IF OutData[i].TimeOutStarted AND OutData[i].TimeOut.Q AND NOT SendInfos.PingNeeded THEN
				//timeout, need repead
				SendInfos.PingNeeded := TRUE;
				SendInfos.PingIndex := i;
				CountRepeatedPing := CountRepeatedPing + 1; 
				CountRepeatedPingDisconnect := CountRepeatedPingDisconnect + 1;
				OutData[i].TimeOutStarted := FALSE;
			END_IF
		STEPS_OUT.SEND_UNSUBSCRIBE:
			//check if my paket ID is the lowest to send it
			IF OutData[i].InDataFromFb^.PaketId &lt; UnsubscribeLastHighest AND NOT SendInfos.UnsubscribeNeeded THEN
				SendInfos.UnsubscribeIndex := i;
				SendInfos.UnsubscribeNeeded := TRUE;
				UnsubscribeLastHighest := OutData[i].InDataFromFb^.PaketId;
			END_IF	
		STEPS_OUT.WAIT_UNSUBACK:
			IF OutData[i].TimeOutStarted AND OutData[i].TimeOut.Q THEN
				//timeout, need repead
				OutData[i].step := STEPS_OUT.SEND_UNSUBSCRIBE;//repeat subscribe
				CountRepeatUnsubscribe := CountRepeatUnsubscribe + 1;
				OutData[i].TimeOutStarted := FALSE;
			END_IF
		STEPS_OUT.SEND_SUBSCRIBE:
			//check if my paket ID is the lowest to send it
			IF OutData[i].InDataFromFb^.PaketId &lt; SubscribeLastHighest AND NOT SendInfos.SubscribeNeeded THEN
				SendInfos.SubscribeIndex := i;
				SendInfos.SubscribeNeeded := TRUE;
				SubscribeLastHighest := OutData[i].InDataFromFb^.PaketId;
			END_IF	
		STEPS_OUT.WAIT_SUBACK:
			IF OutData[i].TimeOutStarted AND OutData[i].TimeOut.Q THEN
				//timeout, need repead
				OutData[i].step := STEPS_OUT.SEND_SUBSCRIBE;//repeat subscribe
				CountRepeatSubscribe := CountRepeatSubscribe + 1;
				OutData[i].TimeOutStarted := FALSE;
			END_IF
			
		STEPS_OUT.SEND_PUBLSIH:
			PublishSendList[PublishSendListCount] := i;
			PublishSendListCount := PublishSendListCount + 1;
			
		STEPS_OUT.WAIT_PUBACK:
			IF OutData[i].TimeOutStarted AND OutData[i].TimeOut.Q THEN
				PushError(newError:= ERRORS.REPEAT_PUBLISH_PUBACK, text:= CONCAT(STR1 := CONCAT(STR1:= 'Slot:', STR2:= TO_STRING(i)),
							 STR2:= CONCAT(STR1:=', PAKET:', STR2:=TO_STRING(OutData[i].InDataFromFb^.PaketId ))));
				//timeout, need repead
				OutData[i].InDataFromFb^.DUP := TRUE;
				OutData[i].step := STEPS_OUT.SEND_PUBLSIH;//repeat publish
				RepeatedPublish := RepeatedPublish + 1;
				OutData[i].TimeOutStarted := FALSE;
			END_IF
			
		STEPS_OUT.WAIT_PUBREC:
			IF OutData[i].TimeOutStarted AND OutData[i].TimeOut.Q THEN
				PushError(newError:= ERRORS.REPEAT_PUBLISH_PUBREC, text:= CONCAT(STR1 := CONCAT(STR1:= 'Slot:', STR2:= TO_STRING(i)),
							 STR2:= CONCAT(STR1:=', PAKET:', STR2:=TO_STRING(OutData[i].InDataFromFb^.PaketId ))));
				//timeout, need repead
				OutData[i].InDataFromFb^.DUP := TRUE;
				OutData[i].step := STEPS_OUT.SEND_PUBLSIH;//repeat publish
				RepeatedPublish := RepeatedPublish + 1;
				OutData[i].TimeOutStarted := FALSE;
			END_IF
			
		STEPS_OUT.SEND_PUBREL:
			PubrelSendList[PubrelSendListCount] := i;
			PubrelSendListCount := PubrelSendListCount + 1;
			
		STEPS_OUT.WAIT_PUBCOMP:
			IF OutData[i].TimeOutStarted AND OutData[i].TimeOut.Q THEN
				//timeout, need repead
				OutData[i].step := STEPS_OUT.SEND_PUBREL;//repeat pubrel
				RepeatedPubrel := RepeatedPubrel + 1;
				OutData[i].TimeOutStarted := FALSE;
				OutData[i].PUBRELRepeatCounter := OutData[i].PUBRELRepeatCounter + 1;
				IF OutData[i].PUBRELRepeatCounter &gt;= MyConstants.MAX_PUBREL_REPEATS THEN
					OutData[i].PUBRELRepeatCounter := 0;
					//resend publish
					OutData[i].step := STEPS_OUT.SEND_PUBLSIH;
					OutData[i].InDataFromFb^.DUP := TRUE;
					RepeatedPublishsAfterPubrel := RepeatedPublishsAfterPubrel + 1;
					PushError(newError:= ERRORS.REPEAT_PUBLISH_PUBCOMP, text:= CONCAT(STR1 := CONCAT(STR1:= 'Slot:', STR2:= TO_STRING(i)),
							 STR2:= CONCAT(STR1:=', PAKET:', STR2:=TO_STRING(OutData[i].InDataFromFb^.PaketId ))));
				ELSE
					PushError(newError:= ERRORS.REPEAT_PUBREL, text:= CONCAT(STR1 := CONCAT(STR1:= 'Slot:', STR2:= TO_STRING(i)),
							 STR2:= CONCAT(STR1:=', PAKET:', STR2:=TO_STRING(OutData[i].InDataFromFb^.PaketId ))));
				END_IF
			END_IF
		IF NOT (OutData[i].step = STEPS_OUT.WAIT_DATA) THEN
			TempSlotsWorking := TempSlotsWorking + 1;
		END_IF
	END_CASE
	//make sure timer is set to 0 if timeout resetet
	OutData[i].TimeOut(IN:= OutData[i].TimeOutStarted, PT:= MyConstants.REPEAT_TIMEOUT);
END_FOR

//now sort the arrays...
IF PublishSendListCount &gt; 1 THEN
	FOR i := 0 TO PublishSendListCount - 1 DO
		tmpLowest := 16#FFFF;
		minIndex := i;
		FOR j := i TO PublishSendListCount - 1 DO
			IF OutData[PublishSendList[j]].PUBLISHOrder &lt; tmpLowest THEN
				minIndex := j;
				tmpLowest := OutData[PublishSendList[j]].PUBLISHOrder;
			END_IF
		END_FOR
		IF minIndex &lt;&gt; i THEN
			//hier tauschen
			j := PublishSendList[minIndex];
			PublishSendList[minIndex] := PublishSendList[i];
			PublishSendList[i] := j;
		END_IF
	END_FOR
END_IF

IF PubrelSendListCount &gt; 1 THEN
	FOR i := 0 TO PubrelSendListCount - 1 DO
		tmpLowest := 16#FFFF;
		minIndex := i;
		FOR j := i TO PubrelSendListCount - 1 DO
			IF OutData[PubrelSendList[j]].PUBRECOrder &lt; tmpLowest THEN
				minIndex := j;
				tmpLowest := OutData[PubrelSendList[j]].PUBRECOrder;
			END_IF
		END_FOR
		IF minIndex &lt;&gt; i THEN
			//hier tauschen
			j := PubrelSendList[minIndex];
			PubrelSendList[minIndex] := PubrelSendList[i];
			PubrelSendList[i] := j;
		END_IF
	END_FOR
END_IF

//Hamdel PubrelOrderIndexCounter
IF PubrelOrderIndexCounter &gt; MyConstants.REORDER_VALUE THEN 
	PushError(newError:= ERRORS.REORDER_PUBREC , text:= '');
	//do it brute force, just sub 20000 to every value...
	FOR i := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
		OutData[i].PUBRECOrder := OutData[i].PUBRECOrder - MyConstants.SUBSTRACTION_VALUE;
	END_FOR
	PubrelOrderIndexCounter := MyConstants.REORDER_VALUE - MyConstants.SUBSTRACTION_VALUE + 1;
END_IF
//Hamdel PublishOrderIndexCounter
IF OutgoingPublishOrderIndexCounter &gt; MyConstants.REORDER_VALUE THEN 
	PushError(newError:= ERRORS.REORDER_PUBLISH_OUTGOING, text:= '');
	//do it brute force, just sub 20000 to every value...
	FOR i := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
		OutData[i].PUBLISHOrder := OutData[i].PUBLISHOrder - MyConstants.SUBSTRACTION_VALUE;
	END_FOR
	OutgoingPublishOrderIndexCounter := MyConstants.REORDER_VALUE - MyConstants.SUBSTRACTION_VALUE + 1;
END_IF

OutSlotsWorking := TempSlotsWorking;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="StateMashineIn" ObjectId="d87fe352-763e-4ff2-8fe2-b22ed364192e">
              <interface>
                <inputVars>
                  <variable name="MQTT_IN_OUT">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT_IN_OUT" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="i">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="j">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="TempSlotsWorking">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="tmpLowest">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="minIndex">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
GVL_MQTT.ProgNum := PROG_NUM.STATE_MASHINE_IN;
//Handle State Mashines
PubackSendListCount := 0;
PubrecSendListCount := 0;
PubcompSendListCount := 0;
TempSlotsWorking := 0;
FOR i := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
	//do Timers...
	InData[i].TimeOut(IN:= InData[i].TimeOutStarted, PT:= MyConstants.REPEAT_TIMEOUT);
	IF NOT (InData[i].step = STEPS_IN.WAIT_DATA) THEN
		TempSlotsWorking := TempSlotsWorking + 1;
	END_IF  
	CASE InData[i].step OF
		STEPS_IN.WAIT_DATA:;
		STEPS_IN.WAIT_PUBREL:
		IF InData[i].TimeOut.Q THEN
			InData[i].step := STEPS_IN.SEND_PUBREC;
			InData[i].TimeOutStarted := FALSE;
			CountRepeatetPubrec := CountRepeatetPubrec + 1;
			PUBREC_ERROR_ID_BUFFER[PUBREC_ERROR_INDEX] := InData[i].PaketID; 
			PUBREC_ERROR_INDEX := PUBREC_ERROR_INDEX + 1;
			InData[i].CountPubrecRepeat := InData[i].CountPubrecRepeat + 1;
				
			IF InData[i].CountPubrecRepeat &gt; COUNT_MAX_PUBREC_REPEAT_TO_DISCHARGE THEN
				InData[i].CountPubrecRepeat := 0;
				InData[i].step := STEPS_IN.WAIT_DATA;
				PushError(newError:= ERRORS.PUBEC_DISCHARGE, text:= CONCAT(STR1 := CONCAT(STR1:= 'Slot:', STR2:= TO_STRING(i)),
							 STR2:= CONCAT(STR1:=', PAKET:', STR2:=TO_STRING(InData[i].PaketID))));
			
			ELSE
				PushError(newError:= ERRORS.REORDER_PUBREC, text:= CONCAT(STR1 := CONCAT(STR1:= 'Slot:', STR2:= TO_STRING(i)),
							 STR2:= CONCAT(STR1:=', PAKET:', STR2:=TO_STRING(InData[i].PaketID))));
			
			END_IF
			IF PUBREC_ERROR_INDEX &gt;= PUBREC_ERROR_ID_BUFFER_SIZE THEN
				PUBREC_ERROR_INDEX := 0;
			END_IF
		END_IF
		STEPS_IN.SEND_PUBACK:
			PubackSendList[PubackSendListCount] := i;
			PubackSendListCount := PubackSendListCount + 1;
			
		STEPS_IN.SEND_PUBREC:
			PubrecSendList[PubrecSendListCount] := i;
			PubrecSendListCount := PubrecSendListCount + 1;
		
		STEPS_IN.SEND_PUBCOMP:
			PubcompSendList[PubcompSendListCount] := i;
			PubcompSendListCount := PubcompSendListCount + 1;
		
	END_CASE
	//make sure timer is set to 0 if timeout resetet
	InData[i].TimeOut(IN:= InData[i].TimeOutStarted, PT:= MyConstants.REPEAT_TIMEOUT);
END_FOR


//now sort the arrays...
IF PubackSendListCount &gt; 1 THEN
	FOR i := 0 TO PubackSendListCount - 1 DO
		tmpLowest := 16#FFFF;
		minIndex := i;
		FOR j := i TO PubackSendListCount - 1 DO
			IF InData[PubackSendList[j]].PUBLISHOrder &lt; tmpLowest THEN
				minIndex := j;
				tmpLowest := InData[PubackSendList[j]].PUBLISHOrder;
			END_IF
		END_FOR
		IF minIndex &lt;&gt; i THEN
			//hier tauschen
			j := PubackSendList[minIndex];
			PubackSendList[minIndex] := PubackSendList[i];
			PubackSendList[i] := j;
		END_IF
	END_FOR
END_IF

IF PubrecSendListCount &gt; 1 THEN
	FOR i := 0 TO PubrecSendListCount - 1 DO
		tmpLowest := 16#FFFF;
		minIndex := i;
		FOR j := i TO PubrecSendListCount - 1 DO
			IF InData[PubrecSendList[j]].PUBLISHOrder &lt; tmpLowest THEN
				minIndex := j;
				tmpLowest := InData[PubrecSendList[j]].PUBLISHOrder;
			END_IF
		END_FOR
		IF minIndex &lt;&gt; i THEN
			//hier tauschen
			j := PubrecSendList[minIndex];
			PubrecSendList[minIndex] := PubrecSendList[i];
			PubrecSendList[i] := j;
		END_IF
	END_FOR
END_IF


IF PubcompSendListCount &gt; 1 THEN
	FOR i := 0 TO PubcompSendListCount - 1 DO
		tmpLowest := 16#FFFF;
		minIndex := i;
		FOR j := i TO PubcompSendListCount - 1 DO
			IF InData[PubcompSendList[j]].PUBCOMPOrder &lt; tmpLowest THEN
				minIndex := j;
				tmpLowest := InData[PubcompSendList[j]].PUBCOMPOrder;
			END_IF
		END_FOR
		IF minIndex &lt;&gt; i THEN
			//hier tauschen
			j := PubcompSendList[minIndex];
			PubcompSendList[minIndex] := PubcompSendList[i];
			PubcompSendList[i] := j;
		END_IF
	END_FOR
END_IF
//Hamdel PublishOrderIndexCounter
IF IncomingPublishOrderIndexCounter &gt; MyConstants.REORDER_VALUE THEN 
	PushError(newError:= ERRORS.REODER_PUBLISH_INCOMMING , text:= '');
			
	//do it brute force, just sub 20000 to every value...
	FOR i := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
		InData[i].PUBLISHOrder := InData[i].PUBLISHOrder - MyConstants.SUBSTRACTION_VALUE;
	END_FOR
	IncomingPublishOrderIndexCounter := MyConstants.REORDER_VALUE - MyConstants.SUBSTRACTION_VALUE + 1;
END_IF

//Hamdel PublishOrderIndexCounter
IF PubcompOrderIndexCounter &gt; MyConstants.REORDER_VALUE THEN 
	PushError(newError:= ERRORS.REORDER_PUBCOMP, text:= '');
	
	//do it brute force, just sub 20000 to every value...
	FOR i := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
		InData[i].PUBCOMPOrder := InData[i].PUBCOMPOrder - MyConstants.SUBSTRACTION_VALUE;
	END_FOR
	PubcompOrderIndexCounter := MyConstants.REORDER_VALUE - MyConstants.SUBSTRACTION_VALUE + 1;
END_IF

InSlotsWorking := TempSlotsWorking;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="BuildPublishPaket" ObjectId="b579d915-d9ab-4cac-94a6-062255c7cdcc">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="PaketData">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="PAKET_DATA" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="idx">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*now change to realy big topics and payloads, do that to big topics and payloads transmitted splitted*)

BuildPublishPaket := FALSE;
IF StepBuildPublish = 0 THEN
	StepBuildPublish := 10; 
END_IF

idx := COM.S_BUF.SIZE;
//check if buffer is big enought for control, remainig length, topic size....
IF StepBuildPublish = 10 THEN

	IF (6 + COM.S_BUF.SIZE)
		 &gt; TRANSMIT_BUFFER_SIZE THEN//only check if header fits into buffer...
		 CountCantSendPublishBufferToFull := CountCantSendPublishBufferToFull + 1;
		RETURN;	
	END_IF
	COM.S_BUF.BUFFER[idx] := MESSAGETYPE.PUBLISH;//set type
	IF PaketData^.DUP THEN//insert DUP bit
		COM.S_BUF.BUFFER[idx] := COM.S_BUF.BUFFER[idx] OR 2#1000;
	END_IF 
	COM.S_BUF.BUFFER[idx] := COM.S_BUF.BUFFER[idx] OR SHL(PaketData^.MessageQoS,1);
	IF PaketData^.MessageRetain THEN
		COM.S_BUF.BUFFER[idx] := COM.S_BUF.BUFFER[idx] OR 2#1;
	END_IF
	//do remainig lenght... 

	idx := idx + 2 + DoRemainingLengthBevor(buffer:= ADR(COM.S_BUF.BUFFER[idx]), SizeTopic:= PaketData^.MqttTopicLength, SizePayload:= PaketData^.MqttPayloadLength, InQoS:= PaketData^.MessageQoS);

	StepBuildPublish := 20;
END_IF

IF StepBuildPublish = 20 THEN
	GVL_MQTT.ProgNum := PROG_NUM.SendOutDataInsertTopic;
	//insert topic
	InsertSplitTopic(
		topic:= PaketData^.MqttTopic, 
		len:= PaketData^.MqttTopicLength, 
		buff:= ADR(COM.S_BUF.BUFFER), 
		pos:= idx, 
		size:= NETWORK_BUFFER_LONG_SIZE);
	CASE InsertSplitTopic.state OF
		INSERT_SPLIT_RETURN.INSERT_DONE:
			StepBuildPublish := 30;
		INSERT_SPLIT_RETURN.INSERT_ERROR:
			StepBuildPublish := 0;
			InsertSplitTopic.reset();
			RETURN;
		INSERT_SPLIT_RETURN.INSERT_PENDING:
			//here do nothing, just wait
		ELSE
			InsertSplitTopic.reset();
			StepBuildPublish := 0;
			RETURN;
	END_CASE
	idx := InsertSplitTopic.new_pos;
END_IF
IF StepBuildPublish = 30 THEN
	IF PaketData^.MessageQoS &gt; 0 THEN//QoS is more then 0
		IF (2 + idx)//insert paket identifier
		 &lt; TRANSMIT_BUFFER_SIZE THEN//enough space for identifier?
			COM.S_BUF.BUFFER[idx] := OSCAT_BASIC.BYTE_OF_DWORD(in:= PaketData^.PaketId, N:= 1);
			idx := idx + 1;
			COM.S_BUF.BUFFER[idx] := OSCAT_BASIC.BYTE_OF_DWORD(in:= PaketData^.PaketId, N:= 0);
			idx := idx + 1;
			StepBuildPublish := 40;
		END_IF
	ELSE
		StepBuildPublish := 40;
	END_IF
END_IF

IF StepBuildPublish = 40 THEN
	GVL_MQTT.ProgNum := PROG_NUM.SendOutDataInsertPayload;
	//now insert payload
	IF PaketData^.MqttPayloadLength &gt; 0 THEN
		//insert payload
		InsertSplitPayload(
			payload:= PaketData^.MqttPayload, 
			len:= PaketData^.MqttPayloadLength, 
			buff:= ADR(COM.S_BUF.BUFFER), 
			pos:= idx, 
			size:= NETWORK_BUFFER_LONG_SIZE);
		CASE InsertSplitPayload.state OF
			INSERT_SPLIT_RETURN.INSERT_DONE:
				StepBuildPublish := 0;
				BuildPublishPaket := TRUE;
			INSERT_SPLIT_RETURN.INSERT_ERROR:
				StepBuildPublish := 0;
				InsertSplitPayload.reset();
				RETURN;
			INSERT_SPLIT_RETURN.INSERT_PENDING:
				//here do nothing, just wait
				//or handle timeout....
			ELSE
				InsertSplitPayload.reset();
				StepBuildPublish := 0;
				RETURN;
		END_CASE
		idx := InsertSplitPayload.new_pos;
	ELSE
		StepBuildPublish := 0;
		BuildPublishPaket := TRUE;
	END_IF
END_IF
COM.S_BUF.SIZE := idx;
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="MoveBufferForSplitPaket" ObjectId="329db169-e7d1-4ba4-8fa9-f8151db084da">
              <interface>
                <inputVars>
                  <variable name="idx">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="BytesToMove">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">GVL_MQTT.ProgNum := PROG_NUM.MoveBuffer;
BytesToMove := COM.R_BUF.SIZE - idx;
CountBufferMoves := CountBufferMoves + 1;
MEM.MemMove(pSource:= ADR(com.R_BUF.BUFFER[idx]), pDestination:= ADR(com.R_BUF.BUFFER), uiNumberOfBytes:= BytesToMove);
COM.R_BUF.SIZE := BytesToMove;//manipulate size....
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="BuildSubscribePaket" ObjectId="cda195a3-d851-43ea-b874-50b26c5632c5">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="PaketData">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="PAKET_DATA" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="idx">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">BuildSubscribePaket := FALSE;
IF  StepBuildSubscribe = 0 THEN
	StepBuildSubscribe := 10;
END_IF

idx := COM.S_BUF.SIZE;
IF StepBuildSubscribe = 10 THEN
	IF (6 + COM.S_BUF.SIZE)
	 &gt; TRANSMIT_BUFFER_SIZE THEN//only check if header fits into buffer...
		 RETURN;
	END_IF
	idx := COM.S_BUF.SIZE;
	COM.S_BUF.BUFFER[idx] := MESSAGETYPE.SUBSCRIBE OR 2#10;//set type, for 2#10 see subscribe doku
	idx := idx + 2 + DoRemainingLengthBevor(buffer:= ADR(COM.S_BUF.BUFFER[idx]), SizeTopic:= PaketData^.MqttTopicLength, SizePayload:= 1, InQoS:= QoS.AtLeastOnce);
	COM.S_BUF.BUFFER[idx] := OSCAT_BASIC.BYTE_OF_DWORD(in:= PaketData^.PaketId, N:= 1);
	idx := idx + 1;
	COM.S_BUF.BUFFER[idx] := OSCAT_BASIC.BYTE_OF_DWORD(in:= PaketData^.PaketId, N:= 0);
	idx := idx + 1;
	StepBuildSubscribe := 20;
END_IF


IF StepBuildSubscribe = 20 THEN
	//insert topic
	InsertSplitTopic(
		topic:= PaketData^.MqttTopic, 
		len:= PaketData^.MqttTopicLength, 
		buff:= ADR(COM.S_BUF.BUFFER), 
		pos:= idx, 
		size:= NETWORK_BUFFER_LONG_SIZE);
	CASE InsertSplitTopic.state OF
		INSERT_SPLIT_RETURN.INSERT_DONE:
			StepBuildSubscribe := 30;
		INSERT_SPLIT_RETURN.INSERT_ERROR:
			StepBuildSubscribe := 0;
			InsertSplitTopic.reset();
			RETURN;
		INSERT_SPLIT_RETURN.INSERT_PENDING:
			//here do nothing, just wait
		ELSE
			InsertSplitTopic.reset();
			StepBuildSubscribe := 0;
			RETURN;
	END_CASE
	idx := InsertSplitTopic.new_pos;
END_IF

IF StepBuildSubscribe = 30 THEN

	IF (1 + idx)
	 &gt; TRANSMIT_BUFFER_SIZE THEN//only check if qos fits into buffer...
		 RETURN;
	 END_IF
	//insert QoS
	COM.S_BUF.BUFFER[idx] := PaketData^.MessageQoS;
	idx := idx + 1;
	StepBuildSubscribe := 0;
	BuildSubscribePaket := TRUE;
END_IF

COM.S_BUF.SIZE := idx;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="BuildUnsubscribePaket" ObjectId="688a96f0-99e0-4a03-95f7-16628eca43f4">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="PaketData">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="PAKET_DATA" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="idx">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">BuildUnsubscribePaket := FALSE;

IF  StepBuildUnsubscribe = 0 THEN
	StepBuildUnsubscribe := 10;
END_IF

idx := COM.S_BUF.SIZE;
IF StepBuildUnsubscribe = 10 THEN
	IF (6 + COM.S_BUF.SIZE)
	 &gt; TRANSMIT_BUFFER_SIZE THEN//only check if header fits into buffer...
		 RETURN;
	END_IF
	idx := COM.S_BUF.SIZE;
	COM.S_BUF.BUFFER[idx] := MESSAGETYPE.UNSUBSCRIBE OR 2#10;//set type, for 2#10 see subscribe doku
	idx := idx + 2 + DoRemainingLengthBevor(buffer:= ADR(COM.S_BUF.BUFFER[idx]), SizeTopic:= PaketData^.MqttTopicLength, SizePayload:= 0, InQoS:= QoS.AtLeastOnce);
	COM.S_BUF.BUFFER[idx] := OSCAT_BASIC.BYTE_OF_DWORD(in:= PaketData^.PaketId, N:= 1);
	idx := idx + 1;
	COM.S_BUF.BUFFER[idx] := OSCAT_BASIC.BYTE_OF_DWORD(in:= PaketData^.PaketId, N:= 0);
	idx := idx + 1;
	StepBuildUnsubscribe := 20;
END_IF


IF StepBuildUnsubscribe = 20 THEN
	//insert topic
	InsertSplitTopic(
		topic:= PaketData^.MqttTopic, 
		len:= PaketData^.MqttTopicLength, 
		buff:= ADR(COM.S_BUF.BUFFER), 
		pos:= idx, 
		size:= NETWORK_BUFFER_LONG_SIZE);
	CASE InsertSplitTopic.state OF
		INSERT_SPLIT_RETURN.INSERT_DONE:
			StepBuildUnsubscribe := 0;
			BuildUnsubscribePaket := TRUE;
		INSERT_SPLIT_RETURN.INSERT_ERROR:
			StepBuildUnsubscribe := 0;
			InsertSplitTopic.reset();
			RETURN;
		INSERT_SPLIT_RETURN.INSERT_PENDING:
			//here do nothing, just wait
		ELSE
			InsertSplitTopic.reset();
			StepBuildUnsubscribe := 0;
			RETURN;
	END_CASE
	idx := InsertSplitTopic.new_pos;
END_IF

COM.S_BUF.SIZE := idx;
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SendOutData" ObjectId="eaf44d39-53ab-4f9b-83b9-193ac4c883af">
              <interface>
                <inputVars>
                  <variable name="MQTT_IN_OUT">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT_IN_OUT" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">StepData:POINTER TO MQTT_OUT_DATA;</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="SomethingIsBlocking">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="i">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT SendFree THEN RETURN; END_IF
GVL_MQTT.ProgNum := PROG_NUM.SendOutData;

SomethingIsBlocking := SendInfos.PublishBlocking OR SendInfos.SubscribeBlocking OR SendInfos.UnsubscribeBlocking;

//Prio for Timeout Paket
IF  NOT (COM.S_BUF.SIZE + SIZE_PINGREQ &gt; TRANSMIT_BUFFER_SIZE) AND SendInfos.PingNeeded AND NOT SomethingIsBlocking THEN
	SendInfos.PingNeeded := FALSE;
	COM.S_BUF.BUFFER[COM.S_BUF.SIZE] := MESSAGETYPE.PINGREQ;
	COM.S_BUF.BUFFER[COM.S_BUF.SIZE + 1] := 0;//no more length 	
	COM.S_BUF.SIZE := COM.S_BUF.SIZE + SIZE_PINGREQ;//small ping paket
	OutData[SendInfos.PingIndex].TimeOutStarted := TRUE;//start Timeout
END_IF
IF NOT COM.S_BUF.SIZE = 0 THEN 
	CountOutSendNotFree := CountOutSendNotFree + 1;
END_IF
//next Prio send Pubrel 
IF PubrelSendListCount &gt; 0 AND NOT SomethingIsBlocking THEN
	FOR i := 0 TO PubrelSendListCount - 1 DO
		IF NOT (COM.S_BUF.SIZE + SIZE_PUBREL &gt; TRANSMIT_BUFFER_SIZE) THEN
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE] := MESSAGETYPE.PUBREL OR 2#10;//set type and Reserved bits
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE + 1] := 2;
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE + 2] := OSCAT_BASIC.BYTE_OF_DWORD(in:= OutData[PubrelSendList[i]].InDataFromFb^.PaketId, N:= 1);
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE + 3] := OSCAT_BASIC.BYTE_OF_DWORD(in:= OutData[PubrelSendList[i]].InDataFromFb^.PaketId, N:= 0);
			COM.S_BUF.SIZE := COM.S_BUF.SIZE + SIZE_PUBREL;
			OutData[PubrelSendList[i]].step := STEPS_OUT.WAIT_PUBCOMP;
			OutData[PubrelSendList[i]].TimeOutStarted := TRUE;//start Timeout			
		ELSE
			EXIT;
		END_IF 
	END_FOR
END_IF

//send Unsubscribe
IF SendInfos.UnsubscribeNeeded AND (NOT SomethingIsBlocking OR SendInfos.UnsubscribeBlocking) THEN
	IF NOT BuildUnsubscribePaket(PaketData:= OutData[SendInfos.UnsubscribeIndex].InDataFromFb) THEN
		SendInfos.UnsubscribeBlocking := TRUE;
	ELSE
		SendInfos.UnsubscribeBlocking := FALSE;
		SendInfos.UnsubscribeNeeded := FALSE;
		OutData[SendInfos.UnsubscribeIndex].TimeOutStarted := TRUE;
		OutData[SendInfos.UnsubscribeIndex].step := STEPS_OUT.WAIT_UNSUBACK;
	END_IF
END_IF

//send Subscribe
IF SendInfos.SubscribeNeeded AND (NOT SomethingIsBlocking OR SendInfos.SubscribeBlocking) THEN
	IF NOT BuildSubscribePaket(PaketData:= OutData[SendInfos.SubscribeIndex].InDataFromFb) THEN
		SendInfos.SubscribeBlocking := TRUE;
	ELSE
		SendInfos.SubscribeBlocking := FALSE;
		SendInfos.SubscribeNeeded := FALSE;
		OutData[SendInfos.SubscribeIndex].TimeOutStarted := TRUE;
		OutData[SendInfos.SubscribeIndex].step := STEPS_OUT.WAIT_SUBACK;
	END_IF
END_IF
//send pending Publish 
IF SendInfos.PublishBlocking THEN
	IF BuildPublishPaket(PaketData:= OutData[SendInfos.PublishBlockingIndex].InDataFromFb) THEN
		SendInfos.PublishBlocking := FALSE;
		PublishSendDone(slot:=ADR(OutData[SendInfos.PublishBlockingIndex]));
	END_IF
END_IF

IF (PublishSendListCount &gt; 0 AND NOT SomethingIsBlocking) THEN
	//handle pendig publisah packet
	//handle new publish packet
	FOR i := 0 TO PublishSendListCount - 1 DO
		IF NOT BuildPublishPaket(PaketData:= OutData[PublishSendList[i]].InDataFromFb) THEN
			SendInfos.PublishBlocking := TRUE;
			SendInfos.PublishBlockingIndex := PublishSendList[i];
			EXIT;
		ELSE 
			SendInfos.PublishBlocking := FALSE;
			PublishSendDone(slot:=ADR(OutData[PublishSendList[i]]));
		END_IF
	END_FOR
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SendInData" ObjectId="a7ea802c-6124-4ca3-9c46-9debb67a877b">
              <interface>
                <inputVars>
                  <variable name="MQTT_IN_OUT">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT_IN_OUT" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="i">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT SendFree THEN RETURN; END_IF

GVL_MQTT.ProgNum := PROG_NUM.SendInData;

IF NOT COM.S_BUF.SIZE = 0 THEN 
	CountInSendNotFree := CountInSendNotFree + 1;
END_IF

IF PubackSendListCount &gt; 0 THEN
	FOR i := 0 TO PubackSendListCount - 1 DO
		IF NOT (COM.S_BUF.SIZE + SIZE_PUBACK &gt; TRANSMIT_BUFFER_SIZE)  THEN
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE] := MESSAGETYPE.PUBACK;
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE + 1] := 2;//length of 2
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE + 2] := OSCAT_BASIC.BYTE_OF_DWORD(in:= InData[PubackSendList[i]].PaketID, N:= 1);
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE + 3] := OSCAT_BASIC.BYTE_OF_DWORD(in:= InData[PubackSendList[i]].PaketID, N:= 0);
			COM.S_BUF.SIZE := COM.S_BUF.SIZE + SIZE_PUBACK;//Paket size allways 4!
			InData[PubackSendList[i]].step := STEPS_IN.WAIT_DATA;
			MqttsDoneIo := MqttsDoneIo + 1;	
		ELSE
			EXIT;
		END_IF
	END_FOR
	
END_IF

IF PubcompSendListCount &gt; 0 THEN
	FOR i := 0 TO PubcompSendListCount - 1 DO
		IF NOT (COM.S_BUF.SIZE + SIZE_PUBCOMP &gt; TRANSMIT_BUFFER_SIZE) THEN	
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE] := MESSAGETYPE.PUBCOMP;
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE + 1] := 2;//length of 2
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE + 2] := OSCAT_BASIC.BYTE_OF_DWORD(in:= InData[PubcompSendList[i]].PaketID, N:= 1);
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE + 3] := OSCAT_BASIC.BYTE_OF_DWORD(in:= InData[PubcompSendList[i]].PaketID, N:= 0);
			COM.S_BUF.SIZE := COM.S_BUF.SIZE + SIZE_PUBCOMP;//Paket size allways 4!
			InData[PubcompSendList[i]].step := STEPS_IN.WAIT_DATA;
			MqttsDoneIo := MqttsDoneIo + 1;
		ELSE
			EXIT;
		END_IF
	END_FOR
END_IF

IF PubrecSendListCount &gt; 0 THEN
	FOR i := 0 TO PubrecSendListCount - 1 DO
		IF NOT (COM.S_BUF.SIZE + SIZE_PUBREC &gt; TRANSMIT_BUFFER_SIZE) THEN
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE] := MESSAGETYPE.PUBREC;
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE + 1] := 2;//length of 2
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE + 2] := OSCAT_BASIC.BYTE_OF_DWORD(in:= InData[PubrecSendList[i]].PaketID, N:= 1);
			COM.S_BUF.BUFFER[COM.S_BUF.SIZE + 3] := OSCAT_BASIC.BYTE_OF_DWORD(in:= InData[PubrecSendList[i]].PaketID, N:= 0);
			COM.S_BUF.SIZE := COM.S_BUF.SIZE + SIZE_PUBREC;//Paket size allways 4!
			InData[PubrecSendList[i]].step := STEPS_IN.WAIT_PUBREL;
			InData[PubrecSendList[i]].TimeOutStarted := TRUE;
		ELSE
			EXIT;
		END_IF
	END_FOR
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ParseIncoming" ObjectId="a0195934-de34-4282-bca7-4efe8c4c5b8c">
              <interface>
                <inputVars>
                  <variable name="MQTT_IN_OUT">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT_IN_OUT" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="I">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="j">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="idx">
                    <type>
                      <UINT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="ReceivePakteType">
                    <type>
                      <derived name="MESSAGETYPE" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">idxFromParsePublish:UINT := 0;</xhtml>
                    </documentation>
                  </variable>
                  <variable name="ReceivePaketID">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                  <variable name="BufferMoveDone">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="PaketFound">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">GVL_MQTT.ProgNum := PROG_NUM.ParseIncomming;
IF COM.R_BUF.SIZE &gt; 0 THEN
	REPEAT
		
		PaketFound := FALSE;
		HelperLastPaktetForUnkownPaket := ReceivePakteType;
		ReceivePakteType := COM.R_BUF.BUFFER[idx] AND 16#F0;
		 
		CASE ReceivePakteType OF
			MESSAGETYPE.PUBLISH:
			//new way, move every publish to receive buffer, and then pars it.
			//outgoing payload pointer is then set to start of payload in the buffer....
				BufferMoveDone := CheckLenghtBuffer(IdxIn:= idx);
				IF NOT BufferMoveDone THEN
					
					idx := ParseIncomingPublish(MQTT_IN_OUT:= MQTT_IN_OUT, idx:= idx,
											BufferIn:= ADR(COM.R_BUF.BUFFER), BufferSize:= COM.R_BUF.SIZE,
											NetworkBuffer:= TRUE);

				END_IF
			MESSAGETYPE.PUBREL:
				BufferMoveDone := CheckLenghtBuffer(IdxIn:= idx);
				IF NOT BufferMoveDone THEN
					//get Paket ID
					ReceivePaketID := DWORD_TO_WORD(OSCAT_BASIC.DWORD_OF_BYTE(B3:= 0, B2:= 0, 
						B1:= COM.R_BUF.BUFFER[idx + 2],
						B0:= COM.R_BUF.BUFFER[idx + 3]));
					//find Paket
					FOR i := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
						IF InData[i].PaketID = ReceivePaketID THEN
							InData[i].step := STEPS_IN.SEND_PUBCOMP;
							InData[i].TimeOutStarted := FALSE;
							PubcompOrderIndexCounter := PubcompOrderIndexCounter;
							InData[i].PUBCOMPOrder := PubcompOrderIndexCounter;
							PaketFound := TRUE;
							EXIT;
						END_IF
						//
					END_FOR
					IF NOT PaketFound THEN
						CountReceivePubrelUnknown := CountReceivePubrelUnknown + 1;
					END_IF
					idx := idx + SIZE_PUBREL;
				END_IF
			MESSAGETYPE.PINGRESP:
				ResetPingTime();
				PingRequestet := FALSE;
				OutData[PingSlot].step := STEPS_OUT.WAIT_DATA;//can get new data
				OutData[PingSlot].TimeOutStarted := FALSE;
				idx := idx + SIZE_PINGRESP;
			MESSAGETYPE.UNSUBACK:
				BufferMoveDone := CheckLenghtBuffer(IdxIn:= idx);
				IF NOT BufferMoveDone THEN
					//get Paket ID
					ReceivePaketID := DWORD_TO_WORD(OSCAT_BASIC.DWORD_OF_BYTE(B3:= 0, B2:= 0, 
						B1:= COM.R_BUF.BUFFER[idx + 2],
						B0:= COM.R_BUF.BUFFER[idx + 3]));
					//find Paket
					FOR i := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
						IF OutData[i].step = STEPS_OUT.WAIT_UNSUBACK THEN //make sure pointer is vailid
							IF OutData[i].InDataFromFb^.PaketId = ReceivePaketID THEN
								OutData[i].InDataFromFb^.SendSucsess := TRUE;
								OutData[i].step := STEPS_OUT.WAIT_DATA;//can get new data
								OutData[i].TimeOutStarted := FALSE;
								MqttsDoneIo := MqttsDoneIo + 1;
								PaketFound := TRUE;
								//now kick of Callback
								FOR j := 0 TO CALLBACKS_BUFFER_SIZE - 1 DO
									IF SubscribeCallbacks[j].Callback = OutData[i].InDataFromFb^.Callback  THEN
										//callback found, now kill it...
										SubscribeCallbacks[j].free := TRUE;
										SubscribeCallbacks[j].Callback := 0;
										EXIT;
									END_IF
								END_FOR
								EXIT;
							END_IF
						END_IF
						//
					END_FOR
					IF NOT PaketFound THEN
						CountReceiveUnsubackUnknown := CountReceiveUnsubackUnknown + 1;
					END_IF
					idx := idx + SIZE_UNSUBACK;	
				END_IF
				
			MESSAGETYPE.SUBACK:
				BufferMoveDone := CheckLenghtBuffer(IdxIn:= idx);
				IF NOT BufferMoveDone THEN
					//get Paket ID
					ReceivePaketID := DWORD_TO_WORD(OSCAT_BASIC.DWORD_OF_BYTE(B3:= 0, B2:= 0, 
						B1:= COM.R_BUF.BUFFER[idx + 2],
						B0:= COM.R_BUF.BUFFER[idx + 3]));
					//find Paket
					FOR i := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
						IF OutData[i].step = STEPS_OUT.WAIT_SUBACK THEN //make sure pointer is vailid
							IF OutData[i].InDataFromFb^.PaketId = ReceivePaketID THEN
								OutData[i].InDataFromFb^.SendSucsess := TRUE;
								OutData[i].InDataFromFb^.SubackQoS := COM.R_BUF.BUFFER[idx + 4];
								OutData[i].step := STEPS_OUT.WAIT_DATA;//can get new data
								OutData[i].TimeOutStarted := FALSE;
								MqttsDoneIo := MqttsDoneIo + 1;
								PaketFound := TRUE;
								//now register callback:
								FOR j := 0 TO CALLBACKS_BUFFER_SIZE - 1 DO
									IF SubscribeCallbacks[j].free THEN
										SubscribeCallbacks[j].free := FALSE;
										SubscribeCallbacks[j].Callback := OutData[i].InDataFromFb^.Callback;
 										SubscribeCallbacks[j].SplitTopic := OutData[i].InDataFromFb^.SplitTopic;
										SubscribeCallbacks[j].ExpectingString := OutData[i].InDataFromFb^.ExpectingString;
										EXIT;
									END_IF
								END_FOR
								IF j = CALLBACKS_BUFFER_SIZE THEN
									//no callback slot free
									OutData[i].InDataFromFb^.CallbackError := TRUE;
								END_IF
								EXIT;
							END_IF
						END_IF
						//
					END_FOR
					IF NOT PaketFound THEN
						CountReceiveSubackUnknown := CountReceiveSubackUnknown + 1;
					END_IF
					idx := idx + SIZE_SUBACK;//only one QoS response expected
				END_IF
			MESSAGETYPE.PUBACK:
				BufferMoveDone := CheckLenghtBuffer(IdxIn:= idx);
				IF NOT BufferMoveDone THEN
					//get Paket ID
					ReceivePaketID := DWORD_TO_WORD(OSCAT_BASIC.DWORD_OF_BYTE(B3:= 0, B2:= 0, 
						B1:= COM.R_BUF.BUFFER[idx + 2],
						B0:= COM.R_BUF.BUFFER[idx + 3]));
					//find Paket
					FOR i := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
						IF OutData[i].step = STEPS_OUT.WAIT_PUBACK THEN //make sure pointer is vailid
							IF OutData[i].InDataFromFb^.PaketId = ReceivePaketID THEN
								OutData[i].InDataFromFb^.SendSucsess := TRUE;
								OutData[i].step := STEPS_OUT.WAIT_DATA;//can get new data
								OutData[i].TimeOutStarted := FALSE;
								MqttsDoneIo := MqttsDoneIo + 1;
								Publishsunacknowledged := Publishsunacknowledged - 1;
								PaketFound := TRUE; 
								EXIT;
							END_IF
						END_IF
						//
					END_FOR
					IF NOT PaketFound THEN
						CountReceivePubackUnknown := CountReceivePubackUnknown + 1;
					END_IF
					idx := idx + SIZE_PUBACK;
				END_IF
			MESSAGETYPE.PUBREC:
				BufferMoveDone := CheckLenghtBuffer(IdxIn:= idx);
				IF NOT BufferMoveDone THEN
					//get Paket ID
					ReceivePaketID := DWORD_TO_WORD(OSCAT_BASIC.DWORD_OF_BYTE(B3:= 0, B2:= 0, 
						B1:= COM.R_BUF.BUFFER[idx + 2],
						B0:= COM.R_BUF.BUFFER[idx + 3]));
					//find Paket
					FOR i := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
						IF OutData[i].step = STEPS_OUT.WAIT_PUBREC THEN //make sure pointer is vailid
							IF OutData[i].InDataFromFb^.PaketId = ReceivePaketID THEN
								IF NOT OutData[i].InDataFromFb^.DUP THEN
									//increase only at first handle 
									PubrelOrderIndexCounter := PubrelOrderIndexCounter + 1;
									OutData[i].PUBRECOrder := PubrelOrderIndexCounter;
								END_IF
								OutData[i].step := STEPS_OUT.SEND_PUBREL;
								OutData[i].TimeOutStarted := FALSE;
								PaketFound := TRUE; 
								EXIT;
							END_IF
						END_IF
						//
					END_FOR
					IF NOT PaketFound THEN
						CountReceivePubrecUnknown := CountReceivePubrecUnknown + 1;
					END_IF
					idx := idx + SIZE_PUBREC;
				END_IF
			MESSAGETYPE.PUBCOMP:
				BufferMoveDone := CheckLenghtBuffer(IdxIn:= idx);
				IF NOT BufferMoveDone THEN
					//get Paket ID
					ReceivePaketID := DWORD_TO_WORD(OSCAT_BASIC.DWORD_OF_BYTE(B3:= 0, B2:= 0, 
						B1:= COM.R_BUF.BUFFER[idx + 2],
						B0:= COM.R_BUF.BUFFER[idx + 3]));
					//find Paket
					FOR i := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
						IF OutData[i].step = STEPS_OUT.WAIT_PUBCOMP THEN //make sure pointer is vailid
							IF OutData[i].InDataFromFb^.PaketId = ReceivePaketID THEN
								OutData[i].InDataFromFb^.SendSucsess := TRUE;
								OutData[i].step := STEPS_OUT.WAIT_DATA;//can get new data
								OutData[i].TimeOutStarted := FALSE;
								MqttsDoneIo := MqttsDoneIo + 1;
								Publishsunacknowledged := Publishsunacknowledged - 1;
								PaketFound := TRUE;
								EXIT;
							END_IF
						END_IF
						//
					END_FOR
					IF NOT PaketFound THEN
						CountReceivePubcompUnknown := CountReceivePubcompUnknown + 1;
					END_IF
					idx := idx + SIZE_PUBCOMP;			
				END_IF
			ELSE
				//unknown paket, reset buffer....
				//standard wants to disconnect....
				{info 'unkown packet, disconnect'}
				LastPaktetForUnkownPaket := HelperLastPaktetForUnkownPaket;
				COM.R_BUF.SIZE := 0;	
				//unknown paket received
				NotKnownPaket := COM.R_BUF.BUFFER[0] AND 16#F0;
				PushError(newError:= ERRORS.UNKNOWN_PAKET_RECEIVED , text:='');
				//alway reset receive!
				COM.MQTT_RCV_STATE := BYTE#0;//receive zurücksetzten
				COM.R_BUF.SIZE := 0;
				CountUnkownPaket := CountUnkownPaket + 1;	
		END_CASE
	UNTIL
		idx &gt;= COM.R_BUF.SIZE OR BufferMoveDone
	END_REPEAT
	IF NOT BufferMoveDone THEN
		COM.R_BUF.SIZE := 0;
	END_IF
	COM.MQTT_RCV_STATE := BYTE#0;//receive zurücksetzten
	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="ParseIncomingPublish" ObjectId="e0043f8f-3a31-4d50-8659-2ad99197624b">
              <interface>
                <returnType>
                  <UINT />
                </returnType>
                <inputVars>
                  <variable name="MQTT_IN_OUT">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT_IN_OUT" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="idx">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">pos of paket in buffer</xhtml>
                    </documentation>
                  </variable>
                  <variable name="BufferIn">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">give here the buffer were the full packet is...</xhtml>
                    </documentation>
                  </variable>
                  <variable name="NetworkBuffer">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">works on network buffer --&gt; need memmove in Output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="BufferSize">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">size of buffer, bytes occupied</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="i">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="PaketFound">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="PaketIndex">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="FreeSlot">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="FreeSlotFound">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="ReceivePaketID">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                  <variable name="ReceiveQoSLevel">
                    <type>
                      <derived name="QoS" />
                    </type>
                  </variable>
                  <variable name="TopicSize">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="OutData">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Output the Data, Tru if Data can be outputted</xhtml>
                    </documentation>
                  </variable>
                  <variable name="RemainingLength">
                    <type>
                      <derived name="REMAINING_LENGTH_RETURN" />
                    </type>
                  </variable>
                  <variable name="PayloadPosStart">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="TopicPosStart">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="PayloadSize">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="FollowingDataBuffer">
                    <type>
                      <array>
                        <dimension lower="0" upper="1" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="PayloadMoved">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">ParseIncomingPublish := 0;//if return is zero, buffer move has been done,
CounterPublishReceivedForMonitor := CounterPublishReceivedForMonitor + 1;
GVL_MQTT.ProgNum := PROG_NUM.ParsePublish;
//get remaining length
RemainingLength := GetRemainingLength(BufferIn, pos := idx,BuffSize := BufferSize);
TopicPosStart := RemainingLength.IndexAfterRemainingLength + 2;
ReceiveQoSLevel := SHR(BufferIn[idx] AND 2#110,1);

TopicSize := DWORD_TO_WORD(OSCAT_BASIC.DWORD_OF_BYTE(B3:= 0, B2:= 0,
						 B1:= BufferIn[RemainingLength.IndexAfterRemainingLength],
						 B0:= BufferIn[RemainingLength.IndexAfterRemainingLength+1]));
IF RemainingLength.Error THEN
	//throw away paket on length error
	COM.MQTT_RCV_STATE := BYTE#0;//receive zurücksetzten
	//need to set size to zero, so no further parsing...
	COM.R_BUF.SIZE := 0;
	CountLengthErrors := CountLengthErrors;
	//on standard i MUST diconnect!!!
	DoDisconnect := TRUE;
	PushError(newError:= ERRORS.RECEIVED_PUBLISH_REMAINING_LENGTH_ERROR, text:='');
	
	RETURN;
END_IF
//publish received, size is handleable
IF ReceiveQoSLevel = QoS.AtMostOnce THEN
	//Nothing to do, just output the Payload and Topic
	OutData := TRUE;
	PayloadSize := RemainingLength.RemainingLength - TopicSize - 2;//2 for Size Encoding
	PayloadPosStart := RemainingLength.IndexAfterRemainingLength + TopicSize + 2;//2 for Size Encoding
	CountReceivedPublishs := CountReceivedPublishs + 1;
ELSE
	//get Paket ID
	ReceivePaketID := DWORD_TO_WORD(OSCAT_BASIC.DWORD_OF_BYTE(B3:= 0, B2:= 0, 
		B1:= BufferIn[RemainingLength.IndexAfterRemainingLength + TopicSize + 2],//+ 2 for Topic Length
		B0:= BufferIn[RemainingLength.IndexAfterRemainingLength + TopicSize + 3]));
	//2 for size of Paket identifier
	PayloadSize := RemainingLength.RemainingLength - TopicSize - 4;//2 for size of topic  and 2 for message id
	PayloadPosStart := RemainingLength.IndexAfterRemainingLength + TopicSize + 4;//2 for size of topic and 2 for message id
	
	//QoS stuff
	FOR i := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
		IF InData[i].PaketID = ReceivePaketID AND InData[i].step &lt;&gt; STEPS_IN.WAIT_DATA THEN
			PaketIndex := i;
			PaketFound := TRUE;
			
		END_IF
		IF InData[i].step = STEPS_IN.WAIT_DATA AND NOT FreeSlotFound THEN
			FreeSlot := i;
			FreeSlotFound := TRUE;
		END_IF
		IF FreeSlotFound AND PaketFound THEN
			EXIT;//exit if slot and paket found
		END_IF
	END_FOR
	IF NOT PaketFound THEN
		IF FreeSlotFound THEN
			//Paket ist not to be awnserd --&gt; first occurence
			InData[FreeSlot].CountPubrecRepeat := 0;
			InData[FreeSlot].QoS := ReceiveQoSLevel;
			InData[FreeSlot].PaketID := ReceivePaketID;
			IncomingPublishOrderIndexCounter := IncomingPublishOrderIndexCounter + 1;
			InData[FreeSlot].PUBLISHOrder := IncomingPublishOrderIndexCounter;
			OutData := TRUE;
			CountReceivedPublishs := CountReceivedPublishs + 1;
		ELSE
			//no more slots free
			{info 'no more slots free, what shall we do???'}
			//at all this is fine....
			DoDisconnect := TRUE;
			PushError(newError:= ERRORS.NO_MORE_RECEIVE_SLOTS_FREE , text:='');
			
		END_IF
	ELSE
		CountRepeatPublishReceive := CountRepeatPublishReceive + 1;
	END_IF
	CASE InData[FreeSlot].QoS OF
		QoS.AtLeastOnce:
			InData[FreeSlot].step := STEPS_IN.SEND_PUBACK;
		QoS.ExactlyOnce:
			InData[FreeSlot].step := STEPS_IN.SEND_PUBREC;
	END_CASE
END_IF

IF RemainingLength.RemainingLength &gt; (COM_CONFIG.MaxTopicElementSize * COM_CONFIG.MaxTopicLevels + COM_CONFIG.MaxPayloadSize) OR 
	TopicSize &gt; (COM_CONFIG.MaxTopicElementSize * COM_CONFIG.MaxTopicLevels) OR
	PayloadSize &gt; COM_CONFIG.MaxPayloadSize THEN
	{info 'check here if to disconnect'}
	//paket to big for my Strings, but do QoS stuff!!!! no standard, standard wants disconnect!
	PushError(newError:= ERRORS.TO_BIG_PAKET , text:='');
	CountToBigTopics := CountToBigTopics  + 1;
	{info 'check if last to big topic is to saved, or just take memmove'}
	(*LastToBigTopic := OSCAT_BASIC.BUFFER_TO_STRING(PT:= ADR(BufferIn[idx]), SIZE:= BufferSize,
						START:= RemainingLength.IndexAfterRemainingLength + 2,
						STOP:= RemainingLength.IndexAfterRemainingLength + TopicSize);*)
	OutData := FALSE;//reset out Data....
END_IF


//now set idx to next packet
ParseIncomingPublish := UDINT_TO_UINT(PayloadPosStart + PayloadSize);

IF OutData THEN
		
		//new approach: in buffer for big packets we can move as we want. in network buffer, we can move topic
		//without trobble down, length information isn't needed anymore. if we move in network buffer we store 
		//the following two bytes of payload, making the output and there after we restore them.
		//this we do in buffer for big packets too, because it isn't expensive
		//but we have to be aware if the payload is near the buffer end, then we have to move it down...

		//we need to check if  
		
		//IF NOT NetworkBuffer THEN //in network buffer, we have to set an termination
		PayloadMoved := FALSE;	
		//first check if payload needs to be moved, because it is at the buffer end
		IF NetworkBuffer THEN
			IF ReceiveQoSLevel = QoS.AtMostOnce THEN//if QoS zero, we need to move, because space for packet ID is missing...
				//check which is smaller, this is to be moved....
				IF TopicSize &lt; PayloadSize THEN
					//move Topic down
					MEM.MemMove(pSource:= ADR(BufferIn[TopicPosStart]), pDestination:= ADR(BufferIn[TopicPosStart - 1]), uiNumberOfBytes:= TopicSize);
					TopicPosStart := TopicPosStart - 1;//now topic resits one deeper
					IF GVL_MQTT.LOG_BUFFER_MOVES THEN
						PushError(newError:= ERRORS.TOPIC_MOVED_DOWN , text:='');
					END_IF
				ELSE
					IF idx + PayloadPosStart + PayloadSize &gt; MyConstants.NETWORK_BUFFER_LONG_SIZE THEN
						//need to move payload and topic, I'm at the top border of network buffer
						//should be very rare....
						SysMem.SysMemMove(pDest:= ADR(BufferIn[TopicPosStart - 2]), pSrc:= ADR(BufferIn[TopicPosStart]), udiCount:= TO_UDINT(TopicSize));
						SysMem.SysMemMove(pDest:= ADR(BufferIn[PayloadPosStart - 1]), pSrc:= ADR(BufferIn[PayloadPosStart]), udiCount:= TO_UDINT(PayloadSize));
						//change Topic Pointer...
						TopicPosStart := TopicPosStart - 2;
						//change Payload Pointer
						PayloadPosStart := PayloadPosStart - 1;
						IF GVL_MQTT.LOG_BUFFER_MOVES THEN
							PushError(newError:= ERRORS.TOPIC_AND_PAYLOAD_MOVED, text:='');
						END_IF
					ELSE
						//first, save following data
						//move Payload up
						PayloadMoved := TRUE;
						FollowingDataBuffer[0] := BufferIn[PayloadPosStart + PayloadSize];
						SysMem.SysMemMove(pDest:= ADR(BufferIn[PayloadPosStart + 1]), pSrc:= ADR(BufferIn[PayloadPosStart]), udiCount:= TO_UDINT(PayloadSize));
						PayloadPosStart := PayloadPosStart + 1;//payload now resits one higher
						IF GVL_MQTT.LOG_BUFFER_MOVES THEN
							PushError(newError:= ERRORS.PAYLOAD_MOVED_UP, text:='');
						END_IF
					END_IF
				END_IF
			END_IF
			
			//alway set termination for payload because it could be a string
			FollowingDataBuffer[1] := BufferIn[PayloadPosStart + PayloadSize]; 
			BufferIn[PayloadPosStart + PayloadSize] := 0;	
			//now set termination, if not QoS zero, overwrite PacketID
			BufferIn[TopicPosStart + TopicSize] := 0;
			//END_IF
			OutputPublish(
				PayloadSize:= PayloadSize, 
				PayloadPos:= ADR(BufferIn[PayloadPosStart]), 
				TopicSize:= TopicSize, 
				TopicPos:= ADR(BufferIn[TopicPosStart]), 
				MQTT_IN_OUT:= MQTT_IN_OUT);
			//restore data after payload
			BufferIn[PayloadPosStart + PayloadSize] := FollowingDataBuffer[1];
			//END_IF

		ELSE
			
		//here we are not in the network buffer, borders don't care and following bytes doesn't matter.
			IF ReceiveQoSLevel = QoS.AtMostOnce THEN//if QoS zero, we need to move, because space for packet ID is missing...
				//check which is smaller, this is to be moved....
				IF TopicSize &lt; PayloadSize THEN
					//move Topic down
					MEM.MemMove(pSource:= ADR(BufferIn[TopicPosStart]), pDestination:= ADR(BufferIn[TopicPosStart - 1]), uiNumberOfBytes:= TopicSize);
					TopicPosStart := TopicPosStart - 1;//now topic resits one deeper
					IF GVL_MQTT.LOG_BUFFER_MOVES THEN
						PushError(newError:= ERRORS.TOPIC_MOVED_DOWN_NETWORK, text:='');
					END_IF
				ELSE
					//move Payload up
					SysMem.SysMemMove(pDest:= ADR(BufferIn[PayloadPosStart + 1]), pSrc:= ADR(BufferIn[PayloadPosStart]), udiCount:= TO_UDINT(PayloadSize));
					PayloadPosStart := PayloadPosStart + 1;//payload now resits one higher
					IF GVL_MQTT.LOG_BUFFER_MOVES THEN
						PushError(newError:= ERRORS.PAYLOAD_MOVED_UP_NETWORK, text:='');
					END_IF
				END_IF
			END_IF
			//alway set termination for payload because it could be a string
			BufferIn[PayloadPosStart + PayloadSize] := 0;	
			//now set termination, if not QoS zero, overwrite PacketID
			BufferIn[TopicPosStart + TopicSize] := 0;
			//END_IF
			OutputPublish(
				PayloadSize:= PayloadSize, 
				PayloadPos:= ADR(BufferIn[PayloadPosStart]), 
				TopicSize:= TopicSize, 
				TopicPos:= ADR(BufferIn[TopicPosStart]), 
				MQTT_IN_OUT:= MQTT_IN_OUT);
			
		END_IF
END_IF

IF PayloadMoved THEN 
	//if payload was moved, then content have to be rebuild
	BufferIn[PayloadPosStart + PayloadSize - 1] := FollowingDataBuffer[0];
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CheckLenghtBuffer" ObjectId="d2d33c09-9dff-4eb5-b512-251000170b1a">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="IdxIn">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="ReceivePakteType">
                    <type>
                      <derived name="MESSAGETYPE" />
                    </type>
                  </variable>
                  <variable name="RemainingLength">
                    <type>
                      <derived name="REMAINING_LENGTH_RETURN" />
                    </type>
                  </variable>
                  <variable name="NeedBufferMove">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">ReceivePakteType := COM.R_BUF.BUFFER[IdxIn] AND 16#F0;

NeedBufferMove := FALSE;

CASE ReceivePakteType OF

	MESSAGETYPE.PUBLISH:
		IF IdxIn + 1 &gt; COM.R_BUF.SIZE THEN//1 for min size of remaining length
			NeedBufferMove := TRUE;//maybe we at the end of the buffer, so move...
		ELSE
			//size big enough to test remaining lengt, inside testing of bytes....
			RemainingLength := GetRemainingLength(ADR(COM.R_BUF.BUFFER), pos := IdxIn, BuffSize:= COM.R_BUF.SIZE);
			//if paket to small for buffer, disconnect, remaining length is smaller then whole packet size
			IF ((TO_LINT(RemainingLength.RemainingLength) - 8 &gt; MaxPublishPacketSize) OR RemainingLength.RemainingLength = 0) AND NOT RemainingLength.BuffToSmall THEN
				{info 'make this to a parameter to chose disconnect or discharge'}
				DoDisconnect := TRUE;
				PushError(newError:= ERRORS.RECEIVED_PUBISH_TO_BIG_FOR_BUFFER, text:='');
				CheckLenghtBuffer := TRUE;
			ELSE 
				IF RemainingLength.BuffToSmall THEN
					NeedBufferMove := TRUE;
				ELSE
					IF RemainingLength.RemainingLength &lt; TRANSMIT_BUFFER_SIZE THEN 
						//here the packet fits into the network buffer
						IF (RemainingLength.IndexAfterRemainingLength + RemainingLength.RemainingLength) &gt; COM.R_BUF.SIZE THEN
							NeedBufferMove := TRUE;
						END_IF
					END_IF	
					IF RemainingLength.RemainingLength &gt; TRANSMIT_BUFFER_SIZE THEN
						//packet needs to be moved into big receive buffer
						SplitPublishLength := RemainingLength.RemainingLength + RemainingLength.SizeRemainingLength + 1;//one byte for fixed packed header
						SplitPublishBufferSize := COM.R_BUF.SIZE - IdxIn;//new splited publish
						MEM.MemMove(pSource:= ADR(COM.R_BUF.BUFFER[IdxIn]), pDestination:= SplitPublishBuffer, uiNumberOfBytes:= UDINT_TO_UINT(SplitPublishBufferSize));
						//clear in Buffer
						COM.R_BUF.SIZE := 0;
						COM.MQTT_RCV_STATE := BYTE#0;//receive zurücksetzten	
						PublishSplited := TRUE;
						CheckLenghtBuffer := TRUE; 	
						PushError(newError:= ERRORS.MOVED_TO_BIG_RECEIVE_BUFFER , text:='');
					END_IF
				END_IF
			END_IF
		END_IF
	MESSAGETYPE.PUBREL:
		IF IdxIn + SIZE_PUBREL &gt; COM.R_BUF.SIZE THEN
			NeedBufferMove := TRUE;
		END_IF
	MESSAGETYPE.UNSUBACK:
		IF IdxIn + SIZE_UNSUBACK &gt; COM.R_BUF.SIZE THEN
			NeedBufferMove := TRUE;
		END_IF
	MESSAGETYPE.SUBACK:
		IF IdxIn + SIZE_SUBACK &gt; COM.R_BUF.SIZE THEN
			NeedBufferMove := TRUE;
		END_IF
	MESSAGETYPE.PUBACK:
		IF IdxIn + SIZE_PUBACK &gt; COM.R_BUF.SIZE THEN
			NeedBufferMove := TRUE;
		END_IF
	MESSAGETYPE.PUBREC:
		IF IdxIn + SIZE_PUBREC &gt; COM.R_BUF.SIZE THEN
			NeedBufferMove := TRUE;
		END_IF
	MESSAGETYPE.PUBCOMP:
		IF IdxIn + SIZE_PUBCOMP &gt; COM.R_BUF.SIZE THEN
			NeedBufferMove := TRUE;
		END_IF

END_CASE

IF NeedBufferMove AND NOT ( IdxIn = 0)THEN
	PushError(newError:= ERRORS.NEED_BUFFER_MOV, text:='');
	MoveBufferForSplitPaket(idx:= IdxIn);
	InBufferMoved := 1;
	
ELSE
	InBufferMoved := 0;
	CountWaitForRestOfPaket := 0;
END_IF

CheckLenghtBuffer := NeedBufferMove;

IF InBufferMoved = 1 THEN
	CountWaitForRestOfPaket := CountWaitForRestOfPaket + 1;
END_IF

IF CountWaitForRestOfPaket &gt; 1000 THEN
	//waited long for rest of paket, so reset...	
	//unknown paket, reset buffer....
	//standard wants to disconnect....
	{info 'TODO:check to make disconnect as parameter'}
	DoDisconnect := TRUE;
	PushError(newError:= ERRORS.FULL_PACKET_NOT_RECEIVED, text:='');
	COM.R_BUF.SIZE := 0;	
	//unknown paket received
	NotKnownPaket := COM.R_BUF.BUFFER[0] AND 16#F0;
	//allway reset receive!
	COM.MQTT_RCV_STATE := BYTE#0;//receive zurücksetzten
	COM.R_BUF.SIZE := 0;
	CountWaitForRestOfPaket := 0;
	CountResetBufferIn := CountResetBufferIn + 1;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="FB_Exit" ObjectId="b9c05d0c-ef6e-4249-9bbd-be68de915780">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="bInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> TRUE: the exit method is called in order to leave the instance which will be copied afterwards (online change). </xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">destroy();
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="destroy" ObjectId="4ec73c21-a461-466b-8611-c64366e7705a">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <localVars>
                  <variable name="iu">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">MySplitTopic.destroy();
GVL_MQTT.ProgNum := PROG_NUM.DESTROY_HANDLE_MQTT;
{info 'semaphore'}
IF NOT StepInitDone THEN RETURN;END_IF
//THIS^.DynMemUsagePointer^ := THIS^.DynMemUsagePointer^ - SplitPublishBufferAllocationSize;
DynMemUsagePointer^ := DynMemUsagePointer^ - SplitPublishBufferAllocationSize;
{warning disable C0033}
__DELETE(SplitPublishBuffer);
{warning restore C0033}
StepInitDone := FALSE;
GVL_MQTT.ProgNum := PROG_NUM.DESTROY_HANDLE_MQTT_DONE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="OutputPublish" ObjectId="41ef459f-dc94-4b40-9ac4-ceeadc73dff2">
              <interface>
                <inputVars>
                  <variable name="PayloadSize">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="PayloadPos">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">be aware, don't use network buffer, IP_CONTROL may change content</xhtml>
                    </documentation>
                  </variable>
                  <variable name="TopicSize">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="TopicPos">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">be aware, don't use network buffer, IP_CONTROL may change content, must be zero terminated!</xhtml>
                    </documentation>
                  </variable>
                  <variable name="MQTT_IN_OUT">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT_IN_OUT" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="i">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="match">
                    <type>
                      <derived name="TOPIC_MATCH" />
                    </type>
                  </variable>
                  <variable name="PointerToSplit">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="SPLIT_TOPIC" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="DataForCallback">
                    <type>
                      <derived name="CALLBACK_DATA" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//here make everything to give out publish, and test if topic fits to my borders...
CountOutputPublishCalled := CountOutputPublishCalled + 1;
IF MySplitTopic.NewTopic(in:= TopicPos, test := FALSE, SizeOfString:= UDINT_TO_UINT(TopicSize)) = TOPIC_VALID.TOPIC_NOT_VALID THEN
	//topic is not in my borders so throw away data...
	{info 'configure to disconnect?'}
	{ info 'make count var...'}
	CountSplitTopicSizeExceeded := CountSplitTopicSizeExceeded + 1;
	RETURN;
END_IF
//now search the right callback and call it...
PointerToSplit := MySplitTopic.GetSplitTopic();
DataForCallback.Payload := PayloadPos;
DataForCallback.PayloadSize := PayloadSize;
DataForCallback.PayloadString :=PayloadPos;
DataForCallback.TopicOut := TopicPos;
DataForCallback.TopicOutSplit := PointerToSplit;
DataForCallback.PayloadIsString := SubscribeCallbacks[i].ExpectingString;

FOR i := 0 TO CALLBACKS_BUFFER_SIZE - 1 DO
	IF NOT SubscribeCallbacks[i].free THEN
		match := SubscribeCallbacks[i].SplitTopic^.CheckTopicMatchToMe(with:=PointerToSplit);
		IF match = TOPIC_MATCH.TOPIC_MATCHES THEN
			SubscribeCallbacks[i].Callback.PublishReceived(Data:=DataForCallback);
		END_IF
	END_IF
END_FOR

</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="MergeSplitedPublish" ObjectId="9d396c27-f37d-4dd3-95cd-3c260fb5beb7">
              <interface>
                <inputVars>
                  <variable name="MQTT_IN_OUT">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT_IN_OUT" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="BytesToMove">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//move every new data to publish receive buffer untill all data is received
BytesToMove := TO_UINT(MIN(com.R_BUF.SIZE, SplitPublishLength - SplitPublishBufferSize));
MEM.MemMove(pSource:= ADR(COM.R_BUF.BUFFER), pDestination:= ADR(SplitPublishBuffer[SplitPublishBufferSize]), uiNumberOfBytes:= BytesToMove);
SplitPublishBufferSize := SplitPublishBufferSize + BytesToMove;
IF SplitPublishBufferSize &gt;= SplitPublishLength THEN
	//SplitPublishLock := TRUE;
	PublishSplited := FALSE;
	//ParsePublish will insert string termination if no network buffer
	ParseIncomingPublish(
	MQTT_IN_OUT:= MQTT_IN_OUT, 
	idx:= 0, 
	BufferIn:= SplitPublishBuffer, 
	BufferSize:= SplitPublishBufferSize,
	NetworkBuffer := FALSE);
END_IF
//check if there is more data in buffer --&gt; new packet
IF BytesToMove &lt; COM.R_BUF.SIZE THEN
	//move buffer and set new size...
	MEM.MemMove(pSource:= ADR(COM.R_BUF.BUFFER[BytesToMove]), pDestination:= ADR(COM.R_BUF.BUFFER),
				uiNumberOfBytes:= COM.R_BUF.SIZE - BytesToMove);
	COM.R_BUF.SIZE := COM.R_BUF.SIZE - BytesToMove;
ELSE
	//clear buffer
	COM.R_BUF.SIZE := 0;
	COM.MQTT_RCV_STATE := BYTE#0;//receive zurücksetzten	
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Publish" ObjectId="69dd8b32-66a3-4c6d-a9c4-38a21807fc8e">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="data">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="DATA_TO_BROKER" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="i">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">Publish := FALSE;
if not connected then return; end_if
FOR i := 0 TO MyConstants.QoS_BUFFER_SIZE - 1 DO
	IF OutData[i].step = STEPS_OUT.WAIT_DATA THEN
		OutData[i].InDataFromFb := data;//set Data
		//Pakte id = slot + 1....
		OutData[i].InDataFromFb^.PaketId := i + 1;
		OutgoingPublishOrderIndexCounter := OutgoingPublishOrderIndexCounter + 1;
		OutData[i].PUBLISHOrder :=  OutgoingPublishOrderIndexCounter;
		OutData[i].step := STEPS_OUT.SEND_PUBLSIH;
		CountSendedPublishs := CountSendedPublishs + 1;
		CounterPublishSendForMonitor := CounterPublishSendForMonitor + 1;
		OutData[i].PUBRELRepeatCounter := 0;
		Publish := TRUE;
		EXIT;
	END_IF
END_FOR

IF NOT Publish THEN
	PushError(newError:= ERRORS.PUBLISH_NO_SLOT_FREE, text:='');
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishSendDone" ObjectId="e9258dd2-b3b8-4973-b15f-4cab2caff9e9">
              <interface>
                <inputVars>
                  <variable name="slot">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT_OUT_DATA" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">slot^.TimeOutStarted := TRUE;//start Timeout
CASE slot^.InDataFromFb^.MessageQoS OF
	QoS.AtMostOnce:
	//paket gone and bye bye, on QoS 0 
	slot^.InDataFromFb^.SendSucsess := TRUE;
	slot^.step := STEPS_OUT.WAIT_DATA;//can get new data
	QoS.AtLeastOnce:
		slot^.step := STEPS_OUT.WAIT_PUBACK;//wait for ACK
		IF NOT slot^.InDataFromFb^.DUP THEN
			Publishsunacknowledged := Publishsunacknowledged + 1;
		END_IF
	QoS.ExactlyOnce:
		slot^.step := STEPS_OUT.WAIT_PUBREC;//wait for REC
		IF NOT slot^.InDataFromFb^.DUP THEN
			Publishsunacknowledged := Publishsunacknowledged + 1;
		END_IF
END_CASE</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PushError" ObjectId="032ba540-e962-4dbd-b57d-b4afe7b2b716">
              <interface>
                <inputVars>
                  <variable name="newError">
                    <type>
                      <derived name="ERRORS" />
                    </type>
                  </variable>
                  <variable name="text">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="i">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="cleanError">
                    <type>
                      <derived name="ONE_ERROR" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//move all Errors...

FOR i:= COUNT_ERROR_HISTORY - 1 TO 1 BY - 1  DO
	ErrorHistory[i] := ErrorHistory[i - 1];
END_FOR
ErrorHistory[0] := cleanError;
ErrorHistory[0].error  := newError;
ErrorHistory[0].when := localTdi.SYSTEM_TIME;
ErrorHistory[0].text := text;

IF newError = ERRORS.CONNECTION_REFUSED THEN
	ErrorHistory[0].ERROR_C := COM.ERROR_C;
	ErrorHistory[0].ERROR_T := COM.ERROR_T;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>de40940d-72fb-4911-9e82-a78a5e144b68</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HandleSplitTopic" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="MySplitTopic">
              <type>
                <derived name="SPLIT_TOPIC" />
              </type>
            </variable>
            <variable name="InitFull">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="InitLow">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SplitLength">
              <type>
                <pointer>
                  <baseType>
                    <UINT />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">this is going to be a pointer to a array of uint to store the string length(and so memmory size) in the string array </xhtml>
              </documentation>
            </variable>
            <variable name="TopicsLevel">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="SplitElementSize">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="CountSizeExceeded">
              <type>
                <ULINT />
              </type>
            </variable>
            <variable name="TopicsIndexMax">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="dynMemUsage">
              <type>
                <pointer>
                  <baseType>
                    <UDINT />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MemoryValid">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{info 'TODO test of zeros in strings'}</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="FullInit" ObjectId="ceb1e346-4e57-4b78-8421-2c1d641d22cf">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="TopicsLevelInit">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="SplitElementSizeInit">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="dynMemUsageInit">
                    <type>
                      <pointer>
                        <baseType>
                          <UDINT />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="iu">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">use FOR high change OF topic, needs more ram, saves TIME...
allocates all memory for the string arrays and strings
usefull for often changed topics like receive publish
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
dynMemUsage := dynMemUsageInit;
destroy();

InitFull := FALSE;
InitLow := FALSE;

TopicsLevel := TopicsLevelInit;
SplitElementSize := SplitElementSizeInit + 1;//add 1 for trailing 0
IF TopicsLevel &gt; 0 THEN
	TopicsIndexMax := TopicsLevel - 1;
ELSE
	TopicsIndexMax := 0;
END_IF

{warning disable C0033}
//get memory for array of pointer to strings
{info 'semaphore'}
MySplitTopic.Topics := __NEW(POINTER TO STRING, TopicsLevel);
IF MySplitTopic.Topics = 0 THEN
	FullInit := FALSE;
	RETURN;		
END_IF
dynMemUsage^ := dynMemUsage^ + TopicsLevel * SIZEOF(MySplitTopic.Topics^);
FOR iu := 0 TO TopicsLevel - 1 DO
	//Get memory for strings
	{info 'semaphore'}
	MySplitTopic.Topics[iu] := __NEW(BYTE, SplitElementSize);	
	IF MySplitTopic.Topics[iu] = 0 THEN
		FullInit := FALSE;
		RETURN;		
	END_IF
	dynMemUsage^ := dynMemUsage^ + SplitElementSize;
END_FOR
{warning restore C0033}
FullInit := TRUE;
InitFull := TRUE;
MemoryValid := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="LowInit" ObjectId="aee97ce3-b520-46d2-ba03-088505d4b950">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="TopicsLevelInit">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="SplitElementSizeInit">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="dynMemUsageInit">
                    <type>
                      <pointer>
                        <baseType>
                          <UDINT />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="iu">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">use for low change of topic, saves mem, needs time
dynamic allocation of memory, usefull for static stopis like compare of subscription topic
</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">dynMemUsage := dynMemUsageInit;
destroy();
InitFull := FALSE;
InitLow := FALSE;

TopicsLevel := TopicsLevelInit;
SplitElementSize :=SplitElementSizeInit;
IF TopicsLevel &gt; 0 THEN
	TopicsIndexMax := TopicsLevel - 1;
ELSE
	TopicsIndexMax := 0;
END_IF
{warning disable C0033}
//get memory for array of pointer to string 

MySplitTopic.Topics := __NEW(POINTER TO STRING, TopicsLevel);
IF MySplitTopic.Topics = 0 THEN
	LowInit := FALSE;
	RETURN;		
END_IF
{info 'semaphore'}
dynMemUsage^ := dynMemUsage^ + TopicsLevel * SIZEOF(MySplitTopic.Topics^);
//get memory for array of length of strings
{info 'semaphore'}
SplitLength := __NEW(POINTER TO STRING, TopicsLevel);
IF SplitLength = 0 THEN
	LowInit := FALSE;
	RETURN;		
END_IF

dynMemUsage^ := dynMemUsage^ + TopicsLevel * SIZEOF(SplitLength^);
{warning restore C0033}
MemoryValid := TRUE;
LowInit := TRUE;
InitLow := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="destroy" ObjectId="8cd22f1f-8fc7-489a-9664-9c5f3e657548">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <localVars>
                  <variable name="iu">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">GVL_MQTT.ProgNum := PROG_NUM.DESTROY_SPLIT_TOPIC;
MemoryValid := FALSE;
IF InitFull THEN
{warning disable C0033}
	FOR iu := 0 TO TopicsLevel - 1 DO
		{info 'semaphore'}
		__DELETE(MySplitTopic.Topics[iu]);
		dynMemUsage^ := dynMemUsage^ - SplitElementSize;
	END_FOR
	{info 'semaphore'}
	__DELETE(MySplitTopic.Topics);
	dynMemUsage^ := dynMemUsage^ - (TopicsLevel * SIZEOF(MySplitTopic.Topics^));
	InitFull := FALSE;
END_IF

IF InitLow THEN
	DestroyOldSplit();
	{info 'semaphore'}
	__DELETE(MySplitTopic.Topics);
	dynMemUsage^ := dynMemUsage^ - (TopicsLevel * SIZEOF(MySplitTopic.Topics^));
	{info 'semaphore'}
	__DELETE(SplitLength);
	dynMemUsage^ := dynMemUsage^ - (TopicsLevel * SIZEOF(SplitLength^));
	InitLow:= FALSE;
END_IF
{warning restore C0033}
GVL_MQTT.ProgNum := PROG_NUM.DESTROY_SPLIT_TOPIC_DONE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="GetSplitTopic" ObjectId="4fc0a7a2-e23b-474c-83c1-ce1bc25ea8e6">
              <interface>
                <returnType>
                  <pointer>
                    <baseType>
                      <derived name="SPLIT_TOPIC" />
                    </baseType>
                  </pointer>
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">GetSplitTopic := ADR(MySplitTopic);
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="FB_Exit" ObjectId="83390a32-5ae0-4d2a-9e1e-4f733a09628d">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="bInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> TRUE: the exit method is called in order to leave the instance which will be copied afterwards (online change). </xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">destroy();
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="NewTopic" ObjectId="5b35f434-7bb3-4f6b-8ddc-1205e223b0e8">
              <interface>
                <returnType>
                  <derived name="TOPIC_VALID" />
                </returnType>
                <inputVars>
                  <variable name="in">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">needs to be 0 terminated!</xhtml>
                    </documentation>
                  </variable>
                  <variable name="test">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">check topic, use this for subscriptio, topics from broker should be ok...</xhtml>
                    </documentation>
                  </variable>
                  <variable name="SizeOfString">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Size of String, if &gt; 0 then use this size and don't search for 0</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="StartSub">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">in codesys for mid function first String Position is 1 !!!! devil!!!! don't use anymore, take memmove</xhtml>
                    </documentation>
                  </variable>
                  <variable name="i">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="SplitChar">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">SubCount:UINT;</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pt">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="UseSize">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF (NOT InitFull AND NOT InitLow) OR NOT MemoryValid THEN
	NewTopic := TOPIC_VALID.TOPIC_NOT_VALID;
	RETURN;
END_IF 
DestroyOldSplit();
SplitChar := CommonTypesAndFunctions.GetChar(in:= '/');
GVL_MQTT.ProgNum := PROG_NUM.GetSplitTopic;
IF SizeOfString &gt; 0 THEN
	UseSize := TRUE;
END_IF
pt := in;
WHILE (pt[i] &lt;&gt; 0 AND NOT UseSize) OR (UseSize AND SizeOfString &gt; 0) DO
	SizeOfString := SizeOfString - 1;
	IF pt[i] = SplitChar  THEN

		IF NOT PushSplitLevel(str:= ADR(in^[StartSub]), len:= i - DINT_TO_UINT(StartSub)) THEN
			CountSizeExceeded := CountSizeExceeded + 1;
			//error pushing split topic
			DestroyOldSplit();
			NewTopic := TOPIC_VALID.TOPIC_NOT_VALID;
			RETURN;
		END_IF
		StartSub := i + 1;//Start Post at next after /
	END_IF
	i := i + 1;
END_WHILE
//get last Topic...
IF NOT (i = StartSub) THEN
	
	PushSplitLevel(str:= ADR(in^[StartSub]), len:= i - DINT_TO_UINT(StartSub));

END_IF
IF pt[i - 1] = SplitChar THEN
	//got one empty level at last
	PushSplitLevel(str:= in, len:= 0);//here str doesnt need to be a valid source
END_IF
IF test THEN
	NewTopic := CheckTopicValid();
	IF NewTopic = TOPIC_VALID.TOPIC_NOT_VALID THEN
		DestroyOldSplit();
	END_IF
ELSE
	NewTopic := TOPIC_VALID.TOPIC_NO_TEST;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PushSplitLevel" ObjectId="2308047e-24eb-4016-a5c6-8ccd0f2d9c7f">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="str">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="len">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="DynLength">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">//make sure to use no more memory as allocated
IF (MySplitTopic.ValidFields &gt;=  TopicsIndexMax) OR ((len + 1 &gt; SplitElementSize) AND InitFull) OR NOT MemoryValid  THEN
	PushSplitLevel := FALSE;
	RETURN;
ELSE
	PushSplitLevel := TRUE;
END_IF

IF InitFull THEN
	IF len &gt; 0 THEN
		{'info: TODO: check string length'}
		MEM.MemMove(pSource:= str, pDestination:= MySplitTopic.Topics[MySplitTopic.ValidFields], uiNumberOfBytes:= len);
	END_IF
	MySplitTopic.Topics[MySplitTopic.ValidFields]^[len] := 0;//string limiter
END_IF


IF InitLow THEN
	DynLength := len + 1;
	{warning disable C0033}
	MySplitTopic.Topics[MySplitTopic.ValidFields] := __NEW(BYTE, DynLength);
	IF MySplitTopic.Topics[MySplitTopic.ValidFields] = 0 THEN
		MemoryValid := FALSE;
		PushSplitLevel := FALSE;
		RETURN;
	END_IF
	dynMemUsage^ := dynMemUsage^ + DynLength;
	{warning restore C0033}
	IF len &gt; 0 THEN
		MEM.MemMove(pSource:= str, pDestination:= MySplitTopic.Topics[MySplitTopic.ValidFields], uiNumberOfBytes:= len);
	END_IF
	SplitLength[MySplitTopic.ValidFields] := DynLength;
	MySplitTopic.Topics[MySplitTopic.ValidFields]^[DynLength - 1] := 0;//string limiter
END_IF

MySplitTopic.ValidFields := MySplitTopic.ValidFields + 1;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="DestroyOldSplit" ObjectId="9fa76813-2029-4e6a-971b-f556bb4f82e5">
              <interface>
                <localVars>
                  <variable name="di">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF InitLow THEN
	FOR di := 0 TO MySplitTopic.ValidFields - 1 DO
{warning disable C0033}
{info 'semaphore'}
		//SysMem23.SysMemFree(dwAddress:= MySplitTopic.Topics[di], dwSize:= SplitLength[di]);
		__DELETE(MySplitTopic.Topics[di]);
		
		dynMemUsage^ := dynMemUsage^ - SplitLength[di];
{warning restore C0033}		
	END_FOR
END_IF

MySplitTopic.ValidFields := 0;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CheckTopicMatchToMe" ObjectId="40fb46a3-f73f-4707-8903-3d991face833">
              <interface>
                <returnType>
                  <derived name="TOPIC_MATCH" />
                </returnType>
                <inputVars>
                  <variable name="with">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="SPLIT_TOPIC" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">topic to compare with, here the topic from broker</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="i">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="pt">
                    <type>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="wildcard">
                    <type>
                      <BYTE />
                    </type>
                  </variable>
                </localVars>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">Instance needs to be subscription topic</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT MemoryValid THEN
		CheckTopicMatchToMe := TOPIC_MATCH.TOPIC_NO_MEMORY;
 	RETURN;
END_IF

wildcard := CommonTypesAndFunctions.GetChar(in:= '#');
FOR i := 0 TO MIN(MySplitTopic.ValidFields - 1, with^.ValidFields - 1) DO
	pt := MySplitTopic.Topics[i]; 
	IF pt^ = wildcard THEN
		//from here its mine
		CheckTopicMatchToMe := TOPIC_MATCH.TOPIC_MATCHES;
		RETURN;
	END_IF
	IF NOT CheckTopicLevel(s1:= with^.Topics[i] , s2:= MySplitTopic.Topics[i]) THEN
		CheckTopicMatchToMe := TOPIC_MATCH.TOPIC_DONT_MATCHES;
		RETURN;
	END_IF  
END_FOR
//if here and there are further topics then its note mine
IF MySplitTopic.ValidFields = with^.ValidFields THEN
	CheckTopicMatchToMe := TOPIC_MATCH.TOPIC_MATCHES;
	RETURN;
END_IF
pt := ADR(MySplitTopic.Topics[i]);
IF MySplitTopic.ValidFields &gt; with^.ValidFields AND 
	pt^ = wildcard THEN
	//check last Subscription topic if '#'
	CheckTopicMatchToMe := TOPIC_MATCH.TOPIC_MATCHES;
ELSE
	CheckTopicMatchToMe := TOPIC_MATCH.TOPIC_DONT_MATCHES;
END_IF</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="CheckTopicValid" ObjectId="43d1c309-2ad2-4278-9176-896480b00081">
              <interface>
                <returnType>
                  <derived name="TOPIC_VALID" />
                </returnType>
                <localVars>
                  <variable name="i">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT MemoryValid THEN
	RETURN;
END_IF
FOR i := 0 TO MySplitTopic.ValidFields - 1 DO
	IF (CommonTypesAndFunctions.find(STR1:= MySplitTopic.Topics[i], STR2:= ADR('#')) &gt;= 0) AND (CommonTypesAndFunctions.len(STR:= MySplitTopic.Topics[i]) &gt; 1) THEN
		//error # within topic
		CheckTopicValid := TOPIC_VALID.TOPIC_NOT_VALID;
		RETURN;
		
	END_IF
	IF (CommonTypesAndFunctions.find(STR1:= MySplitTopic.Topics[i], STR2:= ADR('+')) &gt;= 0) AND (CommonTypesAndFunctions.len(STR:= MySplitTopic.Topics[i]) &gt; 1) THEN
		//error + within topic
		CheckTopicValid := TOPIC_VALID.TOPIC_NOT_VALID;
		RETURN;
	END_IF
		IF (CommonTypesAndFunctions.find(STR1:= MySplitTopic.Topics[i], STR2:= ADR('#')) &gt;= 0) AND (i &lt;&gt; MySplitTopic.ValidFields - 1) THEN
		//error # not at lowest topic
		CheckTopicValid := TOPIC_VALID.TOPIC_NOT_VALID;
		RETURN;
	END_IF
END_FOR
CheckTopicValid := TOPIC_VALID.TOPIC_VALID;
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>42eb1e91-cc42-47d6-98e4-0b800a4d947f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="InsertSplitPayload" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="payload">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">payload to insert....</xhtml>
              </documentation>
            </variable>
            <variable name="len">
              <type>
                <UDINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">length of payload</xhtml>
              </documentation>
            </variable>
            <variable name="buff">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">address to buffer</xhtml>
              </documentation>
            </variable>
            <variable name="pos">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Start to insert</xhtml>
              </documentation>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">size of buffer</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="state">
              <type>
                <derived name="INSERT_SPLIT_RETURN" />
              </type>
            </variable>
            <variable name="new_pos">
              <type>
                <UINT />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="step">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="akt_pos">
              <type>
                <UDINT />
              </type>
            </variable>
          </localVars>
          <tempVars>
            <variable name="bytes_to_send">
              <type>
                <UINT />
              </type>
            </variable>
          </tempVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">//always make my output valid
new_pos := pos;

IF step = 0 THEN
	step := 10;//start insert...
END_IF

//don't use case, so save a cyle...
IF step = 10 THEN
	//evaluate if we have to split payload....
	IF size - pos &lt; len THEN
		step := 20;
		akt_pos := 0;
	ELSE
		//here no split needed
		MEM.MemMove(pSource:= payload, pDestination:= ADR(buff[new_pos]), uiNumberOfBytes:= UDINT_TO_UINT(len));
		new_pos := UDINT_TO_UINT(new_pos + len);//new pos for output
		state := INSERT_SPLIT_RETURN.INSERT_DONE;
		step := 0;
	END_IF
END_IF

IF step = 20 THEN
	//now do split payload...
	bytes_to_send := UDINT_TO_UINT(MIN(size - new_pos, len - akt_pos));
	MEM.MemMove(pSource:= ADR(payload[akt_pos]), pDestination:= ADR(buff[new_pos]), uiNumberOfBytes:= bytes_to_send);
	akt_pos := akt_pos + bytes_to_send;
	new_pos := new_pos +  bytes_to_send;
	IF akt_pos + 1 &gt;= len THEN
		//send done
		state := INSERT_SPLIT_RETURN.INSERT_DONE;
		step := 0;
	ELSE
		state := INSERT_SPLIT_RETURN.INSERT_PENDING;
	END_IF
END_IF
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="reset" ObjectId="05ae8f49-4f21-4727-8495-50c84c2a2285">
              <interface />
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">step := 0;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>22733c41-86e3-41ca-bf60-527fc6a5bc73</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="InsertSplitTopic" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="topic">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">topic to insert....</xhtml>
              </documentation>
            </variable>
            <variable name="len">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">length of topic</xhtml>
              </documentation>
            </variable>
            <variable name="buff">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">address to buffer</xhtml>
              </documentation>
            </variable>
            <variable name="pos">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Start to insert</xhtml>
              </documentation>
            </variable>
            <variable name="size">
              <type>
                <UINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">size of buffer</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="state">
              <type>
                <derived name="INSERT_SPLIT_RETURN" />
              </type>
            </variable>
            <variable name="new_pos">
              <type>
                <UINT />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="step">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="akt_pos">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
          <tempVars>
            <variable name="bytes_to_send">
              <type>
                <UINT />
              </type>
            </variable>
          </tempVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">//always make my output valid
new_pos := pos;

IF step = 0 THEN
	step := 10;//start insert...
END_IF

//don't use case, so save a cyle...
IF step = 10 THEN
	//check if buffer size is enough for header
	IF size - new_pos &lt; 2 THEN
		state := INSERT_SPLIT_RETURN.INSERT_ERROR;
		RETURN;
	END_IF
	buff[new_pos]:= OSCAT_BASIC.BYTE_OF_DWORD(in:= len, N:= 1);
	buff[new_pos+1]:= OSCAT_BASIC.BYTE_OF_DWORD(in:= len, N:= 0);
	new_pos := new_pos + 2;
	step := 20;
END_IF

IF step = 20 THEN
	//evaluate if we have to split topic....
	IF size - pos &lt; len THEN
		step := 30;
		akt_pos := 0;
	ELSE
		//here no split needed
		MEM.MemMove(pSource:= topic, pDestination:= ADR(buff[new_pos]), uiNumberOfBytes:= len);
		new_pos := new_pos + len;//new pos for output
		state := INSERT_SPLIT_RETURN.INSERT_DONE;
		step := 0;
	END_IF
END_IF

IF step = 30 THEN
	//now do split topic...
	bytes_to_send := MIN(size - new_pos, len - akt_pos);
	MEM.MemMove(pSource:= ADR(topic^[akt_pos]), pDestination:= ADR(buff[new_pos]), uiNumberOfBytes:= bytes_to_send);
	akt_pos := akt_pos + bytes_to_send;
	new_pos := new_pos +  bytes_to_send;
	IF akt_pos + 1 &gt;= len THEN
		//send done
		state := INSERT_SPLIT_RETURN.INSERT_DONE;
		step := 0;
	ELSE
		state := INSERT_SPLIT_RETURN.INSERT_PENDING;
	END_IF
END_IF
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="reset" ObjectId="1fcde2a6-7eb6-4266-9d66-95d21574ca96">
              <interface />
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">step := 0;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>86a50c54-22c9-433f-91fe-823ead6df5b5</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MQTT_CONTROL" pouType="functionBlock">
        <interface>
          <inOutVars>
            <variable name="COM">
              <type>
                <derived name="MQTT_COM" />
              </type>
            </variable>
            <variable name="INFO">
              <type>
                <derived name="MQTT_INFO" />
              </type>
            </variable>
          </inOutVars>
          <localVars>
            <variable name="IP_C">
              <type>
                <derived name="IP_C" />
              </type>
            </variable>
            <variable name="URL_DATA">
              <type>
                <derived name="url" />
              </type>
            </variable>
            <variable name="IPC">
              <type>
                <derived name="CommonTypesAndFunctions.IP_CONTROL_TLS" />
              </type>
            </variable>
            <variable name="sResultIP">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> IP-Address behind hostname</xhtml>
              </documentation>
            </variable>
            <variable name="rtsResult">
              <type>
                <derived name="RTS_IEC_RESULT" />
              </type>
            </variable>
            <variable name="step">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="snd_step">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="TON_WAIT">
              <type>
                <derived name="OSCAT_BASIC.TON" />
              </type>
            </variable>
            <variable name="last_step">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="idx1">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="connectToLocalhost">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="staticIP">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="timeout1">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="timeout2">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="ip_c_red_disable">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="remaining_length">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="domainLowercase">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="nop">
              <type>
                <INT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">
	LOG_MSG : LOG_MSG;
	_debug_enable : BOOL := TRUE;
	</xhtml>
              </documentation>
            </variable>
            <variable name="S_BUF">
              <type>
                <derived name="NETWORK_BUFFER" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">******************************************************************************
here all TLS Stuff</xhtml>
              </documentation>
            </variable>
            <variable name="R_BUF">
              <type>
                <derived name="NETWORK_BUFFER" />
              </type>
            </variable>
            <variable name="TLSConnection">
              <type>
                <derived name="RTS_IEC_HANDLE" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">******************************************************************************</xhtml>
              </documentation>
            </variable>
          </localVars>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
Controls send and receive to an MQTT broker
</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF com.ERROR_C &lt;&gt; 0 THEN
 step := step;
END_IF 
//init Pointers


CASE step OF

00:	IF COM.MQTT_CON THEN

		timeout1 := MAX(T#10S,COM.TIMEOUT);
		timeout2 := timeout1 + T#1s;
		INFO.MQTT_ERROR := '';
		COM.ERROR_C := DWORD#0;
		COM.ERROR_T := BYTE#0;
		URL_DATA := STRING_TO_URL(STR:=COM.MQTT_URL,DEFAULT_PROTOCOL:='',DEFAULT_PATH:='/');
		domainLowercase := OSCAT_BASIC.LOWERCASE(str:=URL_DATA.DOMAIN );
		IF  CommonTypesAndFunctions.StrEqualsAtStart(str1:= ADR(domainLowercase), str2:= ADR('localhost')) THEN
			connectToLocalhost := TRUE;
		ELSE
			connectToLocalhost := FALSE;
		END_IF
		IF OSCAT_NETWORK.IP4_DECODE(str:= URL_DATA.DOMAIN) &gt; 0 THEN
			sResultIP := URL_DATA.DOMAIN;
			staticIP := TRUE;
		ELSE
			staticIP := FALSE;
		END_IF
		IF connectToLocalhost OR staticIP THEN
			//jump to connect
			step := 20;
		ELSE
			//get ip by dns
			step := 10;
		END_IF
	END_IF;

10:
	IF CommonTypesAndFunctions.ResolveIPAddr(sHost:= URL_DATA.DOMAIN, sIPResult:= ADR(sResultIP)) = CmpErrors.Errors.ERR_OK THEN
		step := 20;
	ELSE
		step := 980;
	END_IF

20:	(* MQTT Steuerkanal einrichten *)
	IF URL_DATA.PORT = WORD#0 THEN
		URL_DATA.PORT := WORD#1883; (* Standard Port *)
	END_IF;
	IP_C.C_PORT := URL_DATA.PORT; (* Portnummer eintragen *)
	IF connectToLocalhost THEN
		IP_C.C_IP := IP4_DECODE('127.0.0.1'); (* IP eintragen, localhost *)
	ELSE
		IP_C.C_IP := IP4_DECODE(sResultIP); (* IP eintragen *)
	END_IF
  	
	IP_C.C_MODE := BYTE#0; (* Mode: TCP+ACTIV+PORT *)
  	IP_C.TIME_RESET := TRUE; (* Zeitueberwachung rücksetzen *)
  	IP_C.C_ENABLE := TRUE; (* Verbindungsaufbau freigeben *)
  	IP_C.R_OBSERVE := FALSE; (* Empfangsueberwachung *)
	COM.R_BUF.SIZE := UINT#0;
	COM.MQTT_RCV_STATE := BYTE#0;
	step := 30;
	

30:	 IF IP_C.C_STATE = BYTE#255 THEN
		COM.S_BUF.BUFFER[0] := MESSAGETYPE.CONNECT;
		COM.S_BUF.BUFFER[1] := 0;//Header length, cal at least
		COM.S_BUF.BUFFER[2] := 0;//Variable Header length
		COM.S_BUF.BUFFER[3] := 4;//Variable Header length
		COM.S_BUF.BUFFER[4] := OSCAT_BASIC.CODE(STR:= 'M', POS:= 1);//Protokoll name
		COM.S_BUF.BUFFER[5] := OSCAT_BASIC.CODE(STR:= 'Q', POS:= 1);//Protokoll name
		COM.S_BUF.BUFFER[6] := OSCAT_BASIC.CODE(STR:= 'T', POS:= 1);//Protokoll name
		COM.S_BUF.BUFFER[7] := OSCAT_BASIC.CODE(STR:= 'T', POS:= 1);//Protokoll name
		COM.S_BUF.BUFFER[8] := 4; //Protokoll Level
		COM.S_BUF.BUFFER[9] := 2#00110110;//Connect flags
							   //|||||||+-Reserved
							   //||||||+--Clean Session
							   //|||||+---Will Flag
							   //|||++----Will QoS
							   //||+------Will Retain
							   //|+-------Password Flag
							   //+--------UserNameFlag
		COM.S_BUF.BUFFER[10] := OSCAT_BASIC.BYTE_OF_DWORD(in:= MyConstants.KEEP_ALIVE_TIME, N:= 1);//keep alive MSB
		COM.S_BUF.BUFFER[11] := OSCAT_BASIC.BYTE_OF_DWORD(in:= MyConstants.KEEP_ALIVE_TIME, N:= 0);//keep alive LSB
		//idx1 points to next free byte
		//now put in client id 
		idx1 := InsertStringToBufferAndLength(Str:= ADR(COM.CLIENT_ID), buff:= ADR(COM.S_BUF.BUFFER), pos:= 12(*, size:= OSCAT_NETWORK.Constants.NETWORK_BUFFER_LONG_SIZE*));
		//now put in will topic
		//WillTopic := Standard.CONCAT(STR1:= COM.CLIENT_ID, STR2:= Standard.CONCAT(STR1:= '/', STR2:= COM.CLIENT_WILL_TOPIC));
		idx1 := InsertStringToBufferAndLength(Str:= ADR(COM.CLIENT_WILL_TOPIC), buff:= ADR(COM.S_BUF.BUFFER), pos:= idx1(*, size:= OSCAT_NETWORK.Constants.NETWORK_BUFFER_LONG_SIZE*));
		//now put in will message
		//IF Standard.LEN(STR:= COM.CLIENT_WILL_MESSAGE_DEAD) &gt; 0 THEN
		idx1 := InsertStringToBufferAndLength(Str:= ADR(COM.CLIENT_WILL_MESSAGE_DEAD), buff:= ADR(COM.S_BUF.BUFFER), pos:= idx1(*, size:= OSCAT_NETWORK.Constants.NETWORK_BUFFER_LONG_SIZE*));
		//END_IF
		//if user is given, set user bit an insert username
		IF Standard.LEN(STR:= URL_DATA.USER) &gt; 0 THEN
			COM.S_BUF.BUFFER[9] := COM.S_BUF.BUFFER[9] OR 2#10000000;
			//now put in user name
			idx1 := InsertStringToBufferAndLength(Str:= ADR(URL_DATA.USER), buff:= ADR(COM.S_BUF.BUFFER), pos:= idx1(*, size:= OSCAT_NETWORK.Constants.NETWORK_BUFFER_LONG_SIZE*));
		END_IF
		//if password is given, set password bit an insert username
		IF Standard.LEN(STR:= URL_DATA.PASSWORD) &gt; 0 THEN
			COM.S_BUF.BUFFER[9] := COM.S_BUF.BUFFER[9] OR 2#1000000;
			//now put in user name
			idx1 := InsertStringToBufferAndLength(Str:= ADR(URL_DATA.PASSWORD), buff:= ADR(COM.S_BUF.BUFFER), pos:= idx1(*, size:= OSCAT_NETWORK.Constants.NETWORK_BUFFER_LONG_SIZE*));
		END_IF
		//now cal packet lengt and insert remaining legth
		remaining_length := idx1 - 2;
		DoRemainingLength(buffer:= ADR(com.S_BUF.BUFFER), RemainingLength:= remaining_length);
		//now send data
		COM.S_BUF.SIZE := idx1;
		step := 40;//wait for CONNACK
	END_IF
	
		
40:	//IF COM.MQTT_RCV_STATE = BYTE#1 THEN//received packet
	IF COM.R_BUF.SIZE &gt; 0 THEN//received packet
		IF COM.R_BUF.BUFFER[0] &lt;&gt; MESSAGETYPE.CONNACK THEN
			step := 700;//close connection
		ELSE//get connack packet
			IF COM.R_BUF.BUFFER[3] = 0 THEN
				//connection accepted
				INFO.MQTT_CONNECTED := TRUE;
				COM.R_BUF.SIZE := 0;
				COM.MQTT_RCV_STATE := BYTE#0;
				step := 300;
			ELSE
				step := 700;//close connection
			END_IF
		END_IF
		
	END_IF


(* ================================================== *)

300:	step := UINT_TO_INT(SEL(COM.MQTT_CON,700,310)); (* Schritt-Selektion *)

310:	step := 300; (* dummy step *)

(* ================================================== *)

700: (* COM_QUIT *)
	//INFO.MQTT_CONNECTED := FALSE;
	IF COM.MQTT_ABORT THEN
		step := 980;//close without disconnect packet
		COM.MQTT_ABORT := FALSE;
	ELSE
		COM.S_BUF.BUFFER[0] := MESSAGETYPE.DISCONNECT; (* 0x01 COM_QUIT mqtt_close *)
		COM.S_BUF.BUFFER[1] := 0;
		COM.S_BUF.SIZE := UINT#2; (* Sendelänge eintragen *)
		
		ip_c_red_disable := TRUE;
		step := 710;
	END_IF
710:	IF COM.S_BUF.SIZE = BYTE#0 THEN (* letztes Paket gesendet?*)
		step := 980;
	END_IF;

(* ================================================== *)

980:IP_C.C_ENABLE := FALSE; (* MQTT Steuerkanal schliessen *)
	ip_c_red_disable := FALSE;
	INFO.MQTT_CONNECTED := FALSE;
	COM.MQTT_CON := FALSE;
	COM.S_BUF.SIZE := UINT#0;
	COM.R_BUF.SIZE := UINT#0;
	snd_step := 0;
	step := 990;
	(*####################  DEBUG-MESSAGE  ###################################*)
	(*IF _debug_enable THEN
		LOG_CL.NEW_MSG := 'QUIT: ERROR CODE &gt;~1&lt; TYPE &gt;~2&lt;';
		LOG_CL.PRINTF[1] := DWORD_TO_STRH(COM.ERROR_C);
		LOG_CL.PRINTF[2] := BYTE_TO_STRING(COM.ERROR_T);
		LOG_MSG();
	END_IF;*)
	(*########################################################################*)

990:IF IP_C.C_STATE = BYTE#0 THEN
		step := 0;
	END_IF;

END_CASE;

(* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *)
IF step &gt; 40 THEN
	IF COM.R_BUF.SIZE &gt;= UINT#1 THEN (* Daten wurden empfangen ? neue kommunikation*)
		
		COM.MQTT_RCV_STATE := BYTE#1;
		
	END_IF;
END_IF;
(* automatisches Datensenden *)

CASE snd_step OF

00:	IF step &gt; 40 THEN
	
		IF COM.S_BUF.SIZE &gt; UINT#0 THEN
	
		    (*####################  DEBUG-MESSAGE  ###################################*)
	        (*IF _debug_enable THEN
	          LOG_CL.NEW_MSG := 'SND: size &gt;~1&lt;';
	          LOG_CL.PRINTF[1] := UINT_TO_STRING(COM.S_BUF.SIZE);
	          LOG_MSG();
	        END_IF;*)
	        (*########################################################################*)

			snd_step := 10;
		END_IF;		
	END_IF;

10:	IF COM.S_BUF.SIZE = UINT#0 THEN (* warten bis alle daten gesendet sind *)
		snd_step := 0;
	END_IF;

END_CASE;

(* Globale Fehlerbehandlung für Haupt-Routine *)
IF COM.ERROR_T = BYTE#0 AND step &gt; 20 THEN (* noch kein Fehler gespeichert und Hauptroutine aktiv *)
	IF IP_C.ERROR &gt; DWORD#0 AND IP_C.C_ENABLE AND NOT IP_C.TIME_RESET THEN  (* IP Control *)
		IF ip_c_red_disable = FALSE OR IP_C.ERROR &lt;&gt; DWORD#16#FD000000 THEN
			COM.ERROR_C := IP_C.ERROR;
			COM.ERROR_T := BYTE#2;
			step := 980;
		END_IF;
	END_IF;
END_IF;

IF TON_WAIT.Q THEN (* Ablaufstörung - Schrittkette *)
	COM.ERROR_C := INT_TO_DWORD(step); (* aktuellen Schritt eintragen *)
	COM.ERROR_T := BYTE#5;
	step := 980;
END_IF;

(* ######################################################## *)

IPC(IP:= DWORD#0, PORT:= WORD#0 , TIME_OUT:= timeout1, IP_C:= IP_C, S_BUF:= COM.S_BUF, R_BUF:= COM.R_BUF, TLS_CONFIG_IN := COM.TLS_CONFIG, useTls:= COM.TLS); (* MQTT Steuerkanal *)

TON_WAIT(IN:=step = last_step AND step &gt; 0,PT:=timeout2);
last_step := step;


(* revision history


*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>9b642721-ce73-4258-9e15-8e2406aa0c86</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MQTTBase" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="MQTT_IN_OUT">
              <type>
                <pointer>
                  <baseType>
                    <derived name="MQTT_IN_OUT" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="DbPointerIo">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Set to true if get DB Pointer </xhtml>
              </documentation>
            </variable>
            <variable name="TokenRequested">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RTrig">
              <type>
                <derived name="r_trig" />
              </type>
            </variable>
            <variable name="COM_CONFIG">
              <type>
                <derived name="COM_CONFIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">config for boot up</xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF not DbPointerIo THEN RETURN; END_IF
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="SetMqttInOut" ObjectId="3e841b5d-b781-44dd-ba86-78e29089f6be">
              <interface>
                <returnType>
                  <INT />
                </returnType>
                <inputVars>
                  <variable name="MQTT_IN_OUT">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT_IN_OUT" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.MQTT_IN_OUT := MQTT_IN_OUT;
DbPointerIo := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>22db369a-9de1-444e-be59-cbfd328e69c6</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MQTTPublish" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Topic">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">here your topic</xhtml>
              </documentation>
            </variable>
            <variable name="PayloadString">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">here the payload String</xhtml>
              </documentation>
            </variable>
            <variable name="PublishAsString">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">set this to true to publish a string, else the data is expected on Payload</xhtml>
              </documentation>
            </variable>
            <variable name="Payload">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">binary payload</xhtml>
              </documentation>
            </variable>
            <variable name="PayloadLength">
              <type>
                <UDINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">length of binary payload</xhtml>
              </documentation>
            </variable>
            <variable name="QoSIn">
              <type>
                <derived name="QoS" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">QoS Level</xhtml>
              </documentation>
            </variable>
            <variable name="MRetain">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Message is retain?</xhtml>
              </documentation>
            </variable>
            <variable name="send">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">send on positiv edge, be aware, don't change payload and topic until send is done!!!</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="done">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">sucsessfull transmittet</xhtml>
              </documentation>
            </variable>
            <variable name="sendActive">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">trying to send</xhtml>
              </documentation>
            </variable>
            <variable name="SendTimeout">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Timout of sending while connection io --&gt; to much load</xhtml>
              </documentation>
            </variable>
            <variable name="CountSend">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">count of publish send sucsessfull</xhtml>
              </documentation>
            </variable>
          </outputVars>
          <localVars>
            <variable name="requestToSend">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TriggerEdge">
              <type>
                <derived name="Standard.R_TRIG" />
              </type>
            </variable>
            <variable name="WasSendet">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">paket gone out</xhtml>
              </documentation>
            </variable>
            <variable name="TimeToResponse">
              <type>
                <derived name="CAA.TICK" />
              </type>
            </variable>
            <variable name="LastSend">
              <type>
                <derived name="CAA.TICK" />
              </type>
            </variable>
            <variable name="MyOutData">
              <type>
                <derived name="DATA_TO_BROKER" />
              </type>
            </variable>
            <variable name="SendTimeOutTime">
              <type>
                <derived name="ton" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">timeout timer</xhtml>
              </documentation>
            </variable>
            <variable name="dataBuild">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Data was allready builded</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>MQTTBase</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">be aware, don't change payload and topic until send is done!!!

</xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
//if not config, then leave
IF NOT DbPointerIo THEN RETURN; END_IF;
GVL_MQTT.ProgNum := PROG_NUM.Publish;
{info 'TODO check this, messeg is repeated!'}
TriggerEdge(CLK:= send AND NOT requestToSend);

IF NOT MQTT_IN_OUT^.BROKER_CONNECTED THEN
	//no connection, reset
	WasSendet := FALSE;
	MyOutData.PaketData.DUP := FALSE;
END_IF

done := FALSE;

IF TriggerEdge.Q THEN
	requestToSend := TRUE;
END_IF

IF requestToSend AND NOT dataBuild THEN
	dataBuild := TRUE;
	//build data	
	MyOutData.PaketData.MqttTopicLength := CommonTypesAndFunctions.LEN(Topic);
	//don't sent zero lengt topics...
	IF  MyOutData.PaketData.MqttTopicLength &gt; 0 THEN
		MyOutData.PaketData.MessageType := MESSAGETYPE.PUBLISH;
		MyOutData.PaketData.MessageRetain := MRetain;
		MyOutData.PaketData.MessageQoS := QoSIn;
		IF PublishAsString THEN
			MyOutData.PaketData.MqttPayloadLength := CommonTypesAndFunctions.LEN(PayloadString);
			MyOutData.PaketData.MqttPayload := PayloadString;
		ELSE
			MyOutData.PaketData.MqttPayloadLength := PayloadLength;
			MyOutData.PaketData.MqttPayload := Payload;
		END_IF
		MyOutData.PaketData.MqttTopic := Topic;
		
		//WasSendet := TRUE;
		LastSend := TICKS.GetTick(xDummy:= TRUE);
	ELSE
		{info 'check if we want to diplay topic error'}
		;
	END_IF

END_IF

IF requestToSend AND NOT WasSendet AND MQTT_IN_OUT^.BROKER_CONNECTED THEN
	//try to publish
	IF MQTT_IN_OUT^.handleFB^.Publish(data:=ADR(MyOutData)) THEN
		WasSendet := TRUE;
	ELSE
		WasSendet := FALSE;
	END_IF
END_IF


IF MyOutData.PaketData.SendSucsess THEN //sucsses set by HANDLE_MQTT
	MyOutData.PaketData.SendSucsess := FALSE;
	//paket away...
	WasSendet := FALSE;
	requestToSend := FALSE; 
	done := TRUE;
	dataBuild := FALSE;
	MyOutData.PaketData.DUP := FALSE;
	TimeToResponse := TICKS.GetTick(xDummy:= TRUE) - LastSend;
	CountSend := CountSend + 1;
END_IF

SendTimeOutTime(IN:= requestToSend, PT:= MyConstants.SENDING_TIMEOUT);
SendTimeout := SendTimeOutTime.Q;

sendActive := requestToSend;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>cc2d5fcf-b68d-4e57-b744-68b746e30a3b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MQTTPushover" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Data">
              <type>
                <pointer>
                  <baseType>
                    <derived name="PUSHOVER_DATA" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="MQTT_IN_OUT">
              <type>
                <pointer>
                  <baseType>
                    <derived name="MQTT_IN_OUT" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="CountData">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="MQTTTopic">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
          </inputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="HaveToPush">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Publish">
              <type>
                <derived name="MQTTPublish" />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PushedElement">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="SendFree">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="hit">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml"> at least one message to push</xhtml>
              </documentation>
            </variable>
            <variable name="hitIndex">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="SendString">
              <type>
                <string length="500" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">build like 'Topic(n(x)):x, Payload(n(x):x, Prio:x, Sound:x'  </xhtml>
              </documentation>
            </variable>
            <variable name="tmpString">
              <type>
                <string />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT init THEN
	
	init := TRUE;
	Publish.SetMqttInOut(MQTT_IN_OUT:= MQTT_IN_OUT);
END_IF
hit := FALSE;
HaveToPush := FALSE;
FOR i := 0 TO CountData - 1 DO
	IF Data[i].IsConfig THEN
		Data[i].R_T(CLK:=Data[i].Trigger^ XOR Data[i].Negate);
		IF Data[i].R_T.Q THEN
			Data[i].NeedToPush := TRUE;
		END_IF
		IF Data[i].NeedToPush THEN
			HaveToPush := TRUE;
		END_IF
		IF HaveToPush and NOT hit THEN
			hit := TRUE;
			hitIndex := i;
		END_IF
	END_IF
END_FOR

IF Publish.done THEN
	SendFree := TRUE;
END_IF


IF HaveToPush AND SendFree THEN
	SendFree := FALSE;
	//now build message
	SendString := 'Topic(';
	//add topic length
	tmpString := TO_STRING(len(Data[hitIndex].Topic^));
 	CommonTypesAndFunctions.concat(s1:= ADR(SendString), S2:=ADR(tmpString));
	//add '):'
	CommonTypesAndFunctions.concat(s1:= ADR(SendString), S2:=ADR('):'));
	//add topic
	CommonTypesAndFunctions.concat(s1:= ADR(SendString), S2:=Data[hitIndex].Topic);
	//add fixtext
	CommonTypesAndFunctions.concat(s1:= ADR(SendString), S2:=ADR(', Payload('));
	//add payload length
	tmpString := TO_STRING(len(Data[hitIndex].Payload^));
 	CommonTypesAndFunctions.concat(s1:= ADR(SendString), S2:=ADR(tmpString));
	//add '):'
	CommonTypesAndFunctions.concat(s1:= ADR(SendString), S2:=ADR('):'));
	//add topic
	CommonTypesAndFunctions.concat(s1:= ADR(SendString), S2:=Data[hitIndex].Payload);
	//add fixtext
	CommonTypesAndFunctions.concat(s1:= ADR(SendString), S2:=ADR(', Prio:'));
	//add prio
	tmpString := TO_STRING(Data[hitIndex].Prio);
 	CommonTypesAndFunctions.concat(s1:= ADR(SendString), S2:=ADR(tmpString));
	//add fixtext
	CommonTypesAndFunctions.concat(s1:= ADR(SendString), S2:=ADR(', Sound:'));
	//add prio
	tmpString := TO_STRING(Data[hitIndex].Sound);
 	CommonTypesAndFunctions.concat(s1:= ADR(SendString), S2:=ADR(tmpString));
	//done
	Data[hitIndex].NeedToPush := FALSE;
	//now send
	
END_IF

Publish(
	Topic:= MQTTTopic, 
	PayloadString:= adr(SendString), 
	PublishAsString:= TRUE, 
	QoSIn:= QoS.ExactlyOnce, 
	MRetain:= true, 
	send:= NOT SendFree);</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>57731982-e43a-4d1d-ba2d-fa4615f45576</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MQTTState" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="State">
              <type>
                <pointer>
                  <baseType>
                    <BOOL />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="Topic">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="StateName">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="StateValueOn">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="StateValueOff">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="InitDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Send">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SendDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RequestToSendOn">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RequestToSendOff">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Publish">
              <type>
                <derived name="MQTTPublish" />
              </type>
            </variable>
            <variable name="PayloadTemplate">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="Payload">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="QoS">
              <type>
                <derived name="QoS" />
              </type>
            </variable>
            <variable name="RetainMqtt">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="RT">
              <type>
                <derived name="R_TRIG" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">SendBlock: BOOL;</xhtml>
              </documentation>
            </variable>
            <variable name="FT">
              <type>
                <derived name="F_TRIG" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">{info 'need to check string length!'}
publish(
	Topic:= Topic, 
	PayloadString:= ADR(Payload), 
	PublishAsString:= TRUE, 
	QoSIn:= QoS, 
	MRetain:= RetainMqtt, 
	send:= Send, 
	done=&gt; SendDone);

IF NOT InitDone THEN RETURN; END_IF
RT(CLK:= State^);
FT(CLK:= State^);

IF RT.Q THEN
	RequestToSendOn := TRUE;
END_IF

IF FT.Q THEN
	RequestToSendOff := TRUE;
END_IF

IF RequestToSendOn AND NOT send THEN
	//send on
	send:= TRUE;
	Payload := PayloadTemplate;
	CommonTypesAndFunctions.concat(s1:= ADR(Payload), s2:= StateValueOn);
	RequestToSendOn := FALSE;
END_IF

IF RequestToSendOff AND NOT send THEN
	//send on
	send:= TRUE;
	Payload := PayloadTemplate;
	CommonTypesAndFunctions.concat(s1:= ADR(Payload), s2:= StateValueOff);
	RequestToSendOff := FALSE;
END_IF

IF SendDone THEN
	Send := FALSE;
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Init" ObjectId="1e403734-4c33-4f63-a784-3b0e0ec24e6c">
              <interface>
                <inputVars>
                  <variable name="State">
                    <type>
                      <pointer>
                        <baseType>
                          <BOOL />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">pointer to state</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Topic">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">topic name</xhtml>
                    </documentation>
                  </variable>
                  <variable name="StateName">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">valuve name, placed with ':' bevor value</xhtml>
                    </documentation>
                  </variable>
                  <variable name="MQTT_IN_OUT">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT_IN_OUT" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="StateValueOn">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="StateValueOff">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="QoS">
                    <type>
                      <derived name="QoS" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">QoS lewvel of publish</xhtml>
                    </documentation>
                  </variable>
                  <variable name="RetainMqtt">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">message should be ratained?</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.Publish.SetMqttInOut(MQTT_IN_OUT := MQTT_IN_OUT);
THIS^.State := State;
THIS^.Topic := Topic;
THIS^.StateName := StateName;
THIS^.StateValueOff := StateValueOff;
THIS^.StateValueOn := StateValueOn;
THIS^.PayloadTemplate := StateName^;
//don't ad ':' if no name is given
IF NOT THIS^.PayloadTemplate[0] = 0 THEN
	CommonTypesAndFunctions.concat(s1:= ADR(THIS^.PayloadTemplate), s2:= ADR(':'));
ELSE
	PayloadTemplate[0] := 0;
END_IF

InitDone := TRUE;
THIS^.RetainMqtt := RetainMqtt;
THIS^.QoS := QoS;
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>45dda641-95c7-4e58-b79e-a2cab7a6bc2c</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MQTTSubscribe" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Subscribe">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">set to true to subscribe, set to false to unsubscribe</xhtml>
              </documentation>
            </variable>
            <variable name="Topic">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">your topic string</xhtml>
              </documentation>
            </variable>
            <variable name="QoSSubscribe">
              <type>
                <derived name="QoS" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">QoS level</xhtml>
              </documentation>
            </variable>
            <variable name="ExpectingString">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">set to true is you want an string as output, if so you get the String on PayloadString, else
		you get binary data on payload</xhtml>
              </documentation>
            </variable>
            <variable name="Callback">
              <type>
                <derived name="MQTT_SUBSCRIBE_CALLBACK" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">callback FB</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="SubscribeDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SendTimeout">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Timout of sending(subscribe paket) while connection io --&gt; to much load</xhtml>
              </documentation>
            </variable>
            <variable name="SubscribeFail">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">error if subscribtion on broker fails or if topic isn't valid</xhtml>
              </documentation>
            </variable>
            <variable name="TopicValid">
              <type>
                <derived name="TOPIC_VALID" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">here you get your topic check</xhtml>
              </documentation>
            </variable>
          </outputVars>
          <localVars>
            <variable name="SubscribeRising">
              <type>
                <derived name="R_TRIG" />
              </type>
            </variable>
            <variable name="SubscribeFalling">
              <type>
                <derived name="F_TRIG" />
              </type>
            </variable>
            <variable name="NeedSubscribe">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="NeedUnsubscribe">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SubscribeWasSended">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="UnsubscribeWasSended">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MyOutData">
              <type>
                <derived name="DATA_TO_BROKER" />
              </type>
            </variable>
            <variable name="TimeToResponse">
              <type>
                <derived name="CAA.TICK" />
              </type>
            </variable>
            <variable name="LastSend">
              <type>
                <derived name="CAA.TICK" />
              </type>
            </variable>
            <variable name="SendTimeOutTime">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="ReceivedQoS">
              <type>
                <derived name="QoS" />
              </type>
            </variable>
            <variable name="MySplitTopic">
              <type>
                <derived name="HandleSplitTopic" />
              </type>
            </variable>
            <variable name="ReceivedPublishs">
              <type>
                <ULINT />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">received publishs</xhtml>
              </documentation>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="iu">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Extends>MQTTBase</Extends>
              </Inheritance>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">use this to subscribe to a topic, if the topic you want to subscribe isn't valid you get an error on output SubscribeFail,

subscribing now uses callbacks for received publsih packets. you have to pass a FB instance which implements the "MQTT_SUBSCRIBE_CALLBACK" interface.
after reciving a matching topic to the subscription topic, the method PublisReceived() of the FB is called. The call passes all needed information to the callback.
in the called method you can differ the topic or payload more finer if needed. See the ListAllValueCallback() and ListStringCallback for example.
they using a list to the exact topic. So you can subscribe to a topic with wildcard or fix topic with coded payload, and the list FBs doing the fine stuff.
 </xhtml>
          </documentation>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();
//if not config, then leave
IF NOT DbPointerIo THEN RETURN; END_IF;
GVL_MQTT.ProgNum := PROG_NUM.Subscribe;
SubscribeFalling(CLK:= Subscribe);
SubscribeRising(CLK:= Subscribe);

IF NOT init THEN
	COM_CONFIG := MQTT_IN_OUT^.COM_CONFIG;
	MySplitTopic.LowInit(TopicsLevelInit:= COM_CONFIG.MaxTopicLevels, SplitElementSizeInit:= COM_CONFIG.MaxTopicElementSize, dynMemUsageInit:= ADR(MQTT_IN_OUT^.dynMemUsage));
	init:= TRUE;
END_IF

IF NOT MQTT_IN_OUT^.BROKER_CONNECTED AND Subscribe THEN
	//reconnect after disconnect
	NeedSubscribe := TRUE;
	SubscribeDone := FALSE;
	SubscribeWasSended := FALSE;
	UnsubscribeWasSended := FALSE;
END_IF

IF SubscribeRising.Q THEN
	NeedSubscribe := TRUE;
END_IF


IF SubscribeFalling.Q THEN
	NeedUnsubscribe := TRUE;
END_IF


{info 'reconnect or wait or or or or ....'}
//have to unsubscribe if callback wasn't registered
IF MyOutData.PaketData.CallbackError THEN
	NeedUnsubscribe := TRUE;
	SubscribeFail := TRUE;
END_IF

IF NeedSubscribe AND NOT SubscribeWasSended AND MQTT_IN_OUT^.InFree AND MQTT_IN_OUT^.BROKER_CONNECTED THEN
 
	TopicValid := MySplitTopic.NewTopic(in:= Topic, test:= TRUE, SizeOfString:= 0);  
	IF TopicValid = TOPIC_VALID.TOPIC_VALID THEN
		//try to subscribe
		SubscribeWasSended := TRUE;
		//send free
		MQTT_IN_OUT^.IN := ADR(MyOutData);
		MQTT_IN_OUT^.InFree := FALSE;
		MyOutData.PaketData.MessageType := MESSAGETYPE.SUBSCRIBE;
		MyOutData.PaketData.MessageQoS := QoSSubscribe;
		MyOutData.PaketData.Callback := Callback;
		MyOutData.PaketData.MqttTopic := Topic;
		MyOutData.PaketData.MqttTopicLength := CommonTypesAndFunctions.LEN(Topic);
		MyOutData.PaketData.SplitTopic := ADR(MySplitTopic);
		MyOutData.PaketData.ExpectingString := ExpectingString;
	
		SubscribeFail := FALSE;
	ELSE
		NeedSubscribe := FALSE;
		SubscribeFail := TRUE;
	END_IF
	//ReleaseToken();
END_IF

IF NeedUnsubscribe AND NOT UnsubscribeWasSended AND MQTT_IN_OUT^.InFree AND MQTT_IN_OUT^.BROKER_CONNECTED THEN
	//try to unsubscribe
	UnsubscribeWasSended := TRUE;
	//send free
	MQTT_IN_OUT^.IN := ADR(MyOutData);
	MQTT_IN_OUT^.InFree := FALSE;
	MyOutData.PaketData.Callback := Callback;
	MyOutData.PaketData.MessageType := MESSAGETYPE.UNSUBSCRIBE;
	MyOutData.PaketData.MqttTopic := Topic;
	MyOutData.PaketData.MqttTopicLength := CommonTypesAndFunctions.LEN(Topic);
	//ReleaseToken();
END_IF

//place behinde send, so leave "Token" to rest....
//here for Subscribe
IF MyOutData.PaketData.SendSucsess AND MyOutData.PaketData.MessageType = MESSAGETYPE.SUBSCRIBE THEN //scusses set by HANDLE_MQTT
	MyOutData.PaketData.SendSucsess := FALSE;
	//paket away...
	SubscribeWasSended := FALSE;
	NeedSubscribe := FALSE; 
	SubscribeDone := TRUE;
	TimeToResponse := TICKS.GetTick(xDummy:= TRUE) - LastSend;
	ReceivedQoS := MyOutData.PaketData.SubackQoS;
	IF ReceivedQoS = QoS.Fail THEN
		SubscribeFail := TRUE;
	ELSE
		SubscribeFail := FALSE;	
	END_IF
	
END_IF

//here for Unubscribe
IF MyOutData.PaketData.SendSucsess AND MyOutData.PaketData.MessageType = MESSAGETYPE.UNSUBSCRIBE THEN //scusses set by HANDLE_MQTT
	MyOutData.PaketData.SendSucsess := FALSE;
	//paket away...
	UnsubscribeWasSended := FALSE;
	NeedUnsubscribe := FALSE; 
	SubscribeDone := FALSE;
	TimeToResponse := TICKS.GetTick(xDummy:= TRUE) - LastSend;
END_IF

SendTimeOutTime(IN:= NeedSubscribe OR NeedUnsubscribe, PT:= MyConstants.SENDING_TIMEOUT);
SendTimeout := SendTimeOutTime.Q;
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>dd71ef48-a746-409a-bd12-2cc36b1fc25e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="MQTTValue" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="Topic">
              <type>
                <pointer>
                  <baseType>
                    <string length="255" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="ValueName">
              <type>
                <pointer>
                  <baseType>
                    <string length="255" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="ValuePointer">
              <type>
                <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION_POINTER" />
              </type>
            </variable>
            <variable name="ValueType">
              <type>
                <derived name="CommonTypesAndFunctions.VAR_TYPES" />
              </type>
            </variable>
            <variable name="ValueDiff">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="Value">
              <type>
                <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION" />
              </type>
            </variable>
            <variable name="InitDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Send">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SendDone">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="OldValue">
              <type>
                <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION" />
              </type>
            </variable>
            <variable name="RequestToSend">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="Publish">
              <type>
                <derived name="MQTTPublish" />
              </type>
            </variable>
            <variable name="PayloadTemplate">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="Payload">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="DecimalPlace">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="ValueString">
              <type>
                <string />
              </type>
            </variable>
            <variable name="QoS">
              <type>
                <derived name="QoS" />
              </type>
            </variable>
            <variable name="RetainMqtt">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PowerForReal">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="MinTime">
              <type>
                <TIME />
              </type>
            </variable>
            <variable name="MinTimeTimer">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="SendBlock">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Start block time of sending</xhtml>
              </documentation>
            </variable>
            <variable name="PayloadBuild">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT InitDone THEN RETURN; END_IF

publish(
	Topic:= Topic, 
	PayloadString:= ADR(Payload), 
	PublishAsString:= TRUE, 
	QoSIn:= QoS, 
	MRetain:= RetainMqtt, 
	send:= Send, 
	done=&gt; SendDone);


MinTimeTimer(IN:= SendBlock, PT:= MinTime);
IF MinTimeTimer.Q THEN
	SendBlock := FALSE;
END_IF

Value := CommonTypesAndFunctions.GetValueFromPointer(PointerToValue:= ValuePointer, TypeOfValue:= ValueType);
IF NOT SendBlock THEN
	IF CommonTypesAndFunctions.CheckDeltaValue(Value:= Value,
			 TypeOfValue:= ValueType, DeltaVar:= ValueDiff, LastValue:= OldValue,Faktor:= PowerForReal)THEN
		RequestToSend := TRUE;
	END_IF
END_IF
		 
IF RequestToSend AND NOT Send AND NOT SendBlock THEN
	
	Payload := PayloadTemplate;
	ValueString := CommonTypesAndFunctions.GetValueString(VALUE:= Value, TypeOfValue:= ValueType, DecimalPlace:= DecimalPlace);
	CommonTypesAndFunctions.concat(s1:= ADR(Payload), s2:= ADR(ValueString));
	Send := TRUE;
	RequestToSend := FALSE;
END_IF

IF SendDone THEN
	Send := FALSE;
	SendBlock := TRUE;
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="Init" ObjectId="7761ef91-55fb-474b-8fce-5f93c68f1f9d">
              <interface>
                <inputVars>
                  <variable name="Topic">
                    <type>
                      <pointer>
                        <baseType>
                          <string length="255" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">topic name</xhtml>
                    </documentation>
                  </variable>
                  <variable name="ValueName">
                    <type>
                      <pointer>
                        <baseType>
                          <string />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">valuve name, placed with ':' bevor value</xhtml>
                    </documentation>
                  </variable>
                  <variable name="ValuePointer">
                    <type>
                      <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION_POINTER" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">pointer to value, can be every datatype</xhtml>
                    </documentation>
                  </variable>
                  <variable name="ValueType">
                    <type>
                      <derived name="CommonTypesAndFunctions.VAR_TYPES" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">type of the var pointet by ValuePointer</xhtml>
                    </documentation>
                  </variable>
                  <variable name="ValueDiff">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">differenz wich the value have to change bovor it is beeing send. if floting point values it depends on decimals(differen :=1, decimal := 1 --&gt; 0.1 differenz )</xhtml>
                    </documentation>
                  </variable>
                  <variable name="DecimalPlace">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">decimal places behind comma on floting point values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="QoS">
                    <type>
                      <derived name="QoS" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">QoS level of publish</xhtml>
                    </documentation>
                  </variable>
                  <variable name="RetainMqtt">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">message should be ratained?</xhtml>
                    </documentation>
                  </variable>
                  <variable name="MinTime">
                    <type>
                      <TIME />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">min Time between publish</xhtml>
                    </documentation>
                  </variable>
                  <variable name="MQTT_IN_OUT">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="MQTT_IN_OUT" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTT_IN_OUT</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">THIS^.Publish.SetMqttInOut(MQTT_IN_OUT:= MQTT_IN_OUT);
THIS^.ValuePointer := ValuePointer;
IF ValueDiff = 0 THEN
	THIS^.ValueDiff := 1;
ELSE
	THIS^.ValueDiff := ValueDiff;	
END_IF

THIS^.Topic := Topic;
THIS^.ValueName := ValueName;
THIS^.ValueType := ValueType;
THIS^.PayloadTemplate := ValueName^;
//don't ad ':' if no name is given
IF NOT THIS^.PayloadTemplate[0] = 0 THEN
	CommonTypesAndFunctions.concat(s1:= ADR(THIS^.PayloadTemplate), s2:= ADR(':'));
END_IF
THIS^.DecimalPlace := DecimalPlace;
InitDone := TRUE;
THIS^.RetainMqtt := RetainMqtt;
THIS^.QoS := QoS;
IF THIS^.ValueType = CommonTypesAndFunctions.VAR_TYPES.LREAL_T OR 
	THIS^.ValueType = CommonTypesAndFunctions.VAR_TYPES.REAL_T THEN
	PowerForReal := TO_UINT(EXPT(10,DecimalPlace));
END_IF
THIS^.MinTime := MinTime;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>7cbccac7-37d7-452a-91d9-21795ebc51d9</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="HighLoadPublish" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="ClientID">
              <type>
                <string length="255" />
              </type>
              <initialValue>
                <simpleValue value="'TestHighReceive/Topic'" />
              </initialValue>
            </variable>
            <variable name="Topic">
              <type>
                <pointer>
                  <baseType>
                    <pointer>
                      <baseType>
                        <string />
                      </baseType>
                    </pointer>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="TopicFix">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="payload">
              <type>
                <pointer>
                  <baseType>
                    <pointer>
                      <baseType>
                        <string />
                      </baseType>
                    </pointer>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="PayloadFix">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="CountArray">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="UsedPublishFbs">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="working">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">set to high to work, low to stop....</xhtml>
              </documentation>
            </variable>
            <variable name="broker">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="QoS">
              <type>
                <derived name="QoS" />
              </type>
            </variable>
            <variable name="RetainIn">
              <type>
                <BOOL />
              </type>
            </variable>
          </inputVars>
          <outputVars>
            <variable name="finished">
              <type>
                <BOOL />
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="Publishs">
              <type>
                <array>
                  <dimension lower="0" upper="MyConstants.QoS_BUFFER_SIZE" />
                  <baseType>
                    <derived name="MQTTPublish" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="PublishSendBools">
              <type>
                <array>
                  <dimension lower="0" upper="MyConstants.QoS_BUFFER_SIZE" />
                  <baseType>
                    <BOOL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="PublishSendFree">
              <type>
                <array>
                  <dimension lower="0" upper="MyConstants.QoS_BUFFER_SIZE" />
                  <baseType>
                    <BOOL />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value repetitionValue="MyConstants.QoS_BUFFER_SIZE">
                    <simpleValue value="TRUE" />
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
            <variable name="PublishTopicStore">
              <type>
                <array>
                  <dimension lower="0" upper="MyConstants.QoS_BUFFER_SIZE" />
                  <baseType>
                    <pointer>
                      <baseType>
                        <string />
                      </baseType>
                    </pointer>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="PublishPayloadStore">
              <type>
                <array>
                  <dimension lower="0" upper="MyConstants.QoS_BUFFER_SIZE" />
                  <baseType>
                    <pointer>
                      <baseType>
                        <string />
                      </baseType>
                    </pointer>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="MQTT">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="MQTT_IN_OUT">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
            <variable name="LastPublished">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="start">
              <type>
                <derived name="R_TRIG" />
              </type>
            </variable>
            <variable name="doPublish">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT init THEN
	init := TRUE;
	MQTT_IN_OUT.ClientID := ClientID; 
	FOR i := 0 TO UsedPublishFbs - 1 DO
		
	Publishs[i].SetMqttInOut(MQTT_IN_OUT := ADR(MQTT_IN_OUT));
	END_FOR
END_IF

doPublish := working AND MQTT_IN_OUT.BROKER_CONNECTED;

IF NOT doPublish THEN
	LastPublished := 0;
	FOR i := 0 TO UsedPublishFbs - 1 DO
		PublishSendBools[i] := FALSE;
		Publishs[i](
	send:= PublishSendBools[i]);
	PublishSendFree[i] := TRUE;
	END_FOR
	
END_IF

MQTT(
	MQTT_IN_OUT:= MQTT_IN_OUT, 
	ENABLE:= TRUE, 
	URL:= broker, 
	TIMEOUT:= T#5S, 
	TLS:= FALSE);
start(CLK := working);

IF start.Q THEN
	finished := FALSE;

END_IF
IF doPublish THEN

	FOR i := 0 TO UsedPublishFbs - 1 DO
		
		IF PublishSendFree[i] AND NOT finished THEN
			PublishSendFree[i] := FALSE;
			
			//get next element
			IF LastPublished &gt;= CountArray THEN
				finished := TRUE;
	
			ELSE
				IF TopicFix THEN
					PublishTopicStore[i] := Topic;
				ELSE
					PublishTopicStore[i] := Topic[LastPublished];	
				END_IF
				
				IF PayloadFix THEN
					PublishPayloadStore[i] := Payload;
				ELSE
					PublishPayloadStore[i] := Payload[LastPublished];	
				END_IF
				
				PublishSendBools[i] := TRUE;
			END_IF
			LastPublished := LastPublished + 1;
			
		END_IF	
		
			Publishs[i](
		Topic:=PublishTopicStore[i], 
		PayloadString:= PublishPayloadStore[i], 
		PublishAsString:= TRUE, 
		QoSIn:= QoS, 
		MRetain:= RetainIn, 
		send:= PublishSendBools[i]);
		IF Publishs[i].done THEN 
			PublishSendFree[i] := TRUE;
		END_IF
		IF Publishs[i].sendActive THEN
			PublishSendBools[i] := FALSE;
		END_IF
	END_FOR
	
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>15598a63-10de-43a4-b1e5-5c4abe3bb121</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="exampleForFbs" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="FirstExtReceiver">
              <type>
                <derived name="FooBarReceivingFB" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">the MQTT client
client:ClientWrapper;
some reciving FBs</xhtml>
              </documentation>
            </variable>
            <variable name="SecondExtReceiver">
              <type>
                <derived name="FooBarReceivingFB" />
              </type>
            </variable>
            <variable name="ThirdExtReceiver">
              <type>
                <derived name="FooBarReceivingFB" />
              </type>
            </variable>
            <variable name="FourthExtReceiver">
              <type>
                <derived name="FooBarReceivingFB" />
              </type>
            </variable>
            <variable name="ArrayReceive">
              <type>
                <array>
                  <dimension lower="0" upper="9" />
                  <baseType>
                    <derived name="FooBarReceivingFB" />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">a Array of receiving FBs</xhtml>
              </documentation>
            </variable>
            <variable name="stock">
              <type>
                <derived name="CallbackCollector" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">the collector of the FBs</xhtml>
              </documentation>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">

(*
client(
	broker:= 'test.mosquitto.org:1883', 
	connect:= TRUE, 
	tls:= FALSE);

	*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>65ff7880-8a04-45c8-97d1-778b8fbd262b</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="FooBarReceivingFB" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="instanceName">
              <type>
                <string length="255" />
              </type>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="instance-path" Value="" />
                    <Attribute Name="noinit" Value="" />
                  </Attributes>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">this string contains the instance name of the FB</xhtml>
              </documentation>
            </variable>
            <variable name="LastTreeName">
              <type>
                <string />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">here we get the "lowest" element of the name...</xhtml>
              </documentation>
            </variable>
            <variable name="splitTopic">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">if set to true we search the instance name in the lowest topic</xhtml>
              </documentation>
            </variable>
            <variable name="splitPayload">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">if set to true we search the instance name in Payload separatet by the split char </xhtml>
              </documentation>
            </variable>
            <variable name="SplitPayloadChar">
              <type>
                <BYTE />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">an this is the split char...</xhtml>
              </documentation>
            </variable>
            <variable name="Target">
              <type>
                <string length="255" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">here is the target where we will place the payload contend
	this can be anything...</xhtml>
              </documentation>
            </variable>
          </localVars>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
              <Inheritance>
                <Implements>MQTT_SUBSCRIBE_CALLBACK</Implements>
              </Inheritance>
            </data>
            <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
              <Attributes>
                <Attribute Name="reflection" Value="" />
              </Attributes>
            </data>
          </addData>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml" />
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="PublishReceived" ObjectId="977f1a95-4a9f-45ac-a8a9-6eb1ca600c5d">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="Data">
                    <type>
                      <derived name="CALLBACK_DATA" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of received Data</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="StrPt">
                    <type>
                      <pointer>
                        <baseType>
                          <string length="255" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">// no we can check if the topic/payload fits to my instance name.... 

//now search the right topic 
IF splitTopic THEN
	
	IF CommonTypesAndFunctions.StrEquals(str1:= Data.TopicOutSplit^.Topics[Data.TopicOutSplit^.ValidFields - 1], str2:= ADR(LastTreeName)) THEN
		Target := Data.PayloadString^;
	END_IF

END_IF

//now look into the payload
IF splitPayload THEN
	
	IF CommonTypesAndFunctions.StrEqualsAtStartWithDelimiter(str1:= ADR(LastTreeName), str2:= Data.PayloadString, delimiter:= SplitPayloadChar) THEN
		//now search split char
		StrPt := Data.PayloadString;
		StrPt := StrPt + TO_DWORD(CommonTypesAndFunctions.find(str1 := StrPt, str2:= ADR(SplitPayloadChar))) + 1;
		Target := StrPt^;
	END_IF
END_IF
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initAsFindTopic" ObjectId="ab04c67c-7d3e-4095-91a2-01154907cca9">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">getLastTreeName();
splitPayload := FALSE;
splitTopic := TRUE;</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="getLastTreeName" ObjectId="cfa27fa7-8fad-472e-bd8b-c46f2a6664fa">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">LastTreeName := CommonTypesAndFunctions.FindLastDot(ADR(instanceName))^;
</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="initAsFindPayload" ObjectId="fcd2a1c3-70a3-4baa-a5a5-ad1cee7fad61">
              <interface>
                <returnType>
                  <BOOL />
                </returnType>
                <inputVars>
                  <variable name="splitChar">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">only first char is selected</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">getLastTreeName();
splitPayload := TRUE;
splitTopic := FALSE;

SplitPayloadChar := CommonTypesAndFunctions.GetChar(in:= splitChar);</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2a453000-4796-432a-bd58-15292d7ac300</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestCallbackCollecktor" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="var1">
              <type>
                <derived name="AllValuesCallback" />
              </type>
            </variable>
            <variable name="var2">
              <type>
                <derived name="AllValuesCallback" />
              </type>
            </variable>
            <variable name="var3">
              <type>
                <derived name="AllValuesCallback" />
              </type>
            </variable>
            <variable name="collector">
              <type>
                <derived name="CallbackCollector" />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="target1">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="pt1">
              <type>
                <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION_POINTER" />
              </type>
            </variable>
            <variable name="callbackData">
              <type>
                <derived name="CALLBACK_DATA" />
              </type>
            </variable>
            <variable name="stringPayload">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'123'" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT init THEN
	init := TRUE;
	pt1.POINTER_TO_INT_T := ADR(target1);
	var1.Init(SetType := CommonTypesAndFunctions.VAR_TYPES.INT_T, Target := pt1);
	callbackData.PayloadString := ADR(stringPayload);
END_IF

//try delet without registert instance
collector.destroy();
//put one instance
collector.put(instance:= var1);

collector.PublishReceived(Data:= callbackData);

collector.destroy();

//put two instance
collector.put(instance:= var1);
collector.put(instance:= var1);

collector.PublishReceived(Data:= callbackData);

collector.destroy();

//put tree instance
collector.put(instance:= var1);
collector.put(instance:= var1);
collector.put(instance:= var1);

collector.PublishReceived(Data:= callbackData);

collector.destroy();

//put tree instance
collector.put(instance:= var1);
collector.put(instance:= var2);
collector.put(instance:= var3);</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
            <Method name="FB_Exit" ObjectId="383d48b9-a34d-4e53-96fe-6494a1e650b0">
              <interface>
                <inputVars>
                  <variable name="bInCopyCode">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> TRUE: the exit method is called in order to leave the instance which will be copied afterwards (online change). </xhtml>
                    </documentation>
                  </variable>
                </inputVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">collector.destroy();</xhtml>
                </ST>
              </body>
              <addData />
            </Method>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>50db2ef6-17e2-42a9-ae41-9bd9a0909cd2</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestcaseCheckTopivValid" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="t1">
              <type>
                <derived name="HandleSplitTopic" />
              </type>
            </variable>
            <variable name="s100">
              <type>
                <string length="101" />
              </type>
              <initialValue>
                <simpleValue value="'1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'" />
              </initialValue>
            </variable>
            <variable name="splus">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'+'" />
              </initialValue>
            </variable>
            <variable name="ssharp">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'#'" />
              </initialValue>
            </variable>
            <variable name="stest">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'test'" />
              </initialValue>
            </variable>
            <variable name="valids">
              <type>
                <array>
                  <dimension lower="0" upper="30" />
                  <baseType>
                    <string />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="'/+//sdf/test1'" />
                  </value>
                  <value>
                    <simpleValue value="'/sd//'" />
                  </value>
                  <value>
                    <simpleValue value="'test1/+/rest/#'" />
                  </value>
                  <value>
                    <simpleValue value="'test1/#'" />
                  </value>
                  <value>
                    <simpleValue value="'test1/topic2/+/Topic3/+/5636/ggesd'" />
                  </value>
                  <value>
                    <simpleValue value="'///'" />
                  </value>
                  <value>
                    <simpleValue value="'///+//sdf/test1//'" />
                  </value>
                  <value>
                    <simpleValue value="'//+//sdf/test1/'" />
                  </value>
                  <value>
                    <simpleValue value="'#'" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
            <variable name="falses">
              <type>
                <array>
                  <dimension lower="0" upper="30" />
                  <baseType>
                    <string />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <simpleValue value="'test1/topic2/+/Topic3#/'" />
                  </value>
                  <value>
                    <simpleValue value="'test1/#/topic2/+/Topic3/#456'" />
                  </value>
                  <value>
                    <simpleValue value="'test1+'" />
                  </value>
                  <value>
                    <simpleValue value="'test1/#/topic2/+/Topic3/+/5636/ggesd'" />
                  </value>
                  <value>
                    <simpleValue value="'test1#'" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                  <value>
                    <simpleValue value="''" />
                  </value>
                </arrayValue>
              </initialValue>
            </variable>
            <variable name="s1">
              <type>
                <string length="64000" />
              </type>
            </variable>
            <variable name="valid">
              <type>
                <derived name="TOPIC_VALID" />
              </type>
            </variable>
            <variable name="pts">
              <type>
                <array>
                  <dimension lower="0" upper="20" />
                  <baseType>
                    <pointer>
                      <baseType>
                        <string />
                      </baseType>
                    </pointer>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="sp">
              <type>
                <pointer>
                  <baseType>
                    <derived name="SPLIT_TOPIC" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="COM_CONFIG">
              <type>
                <derived name="COM_CONFIG" />
              </type>
            </variable>
            <variable name="dynMemUsage">
              <type>
                <UDINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">	(*GetSplitTopic(in:= 'test1/topic2/+/Topic3#/', Target:= ADR(dis1), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
	
	GetSplitTopic(in:= 'test1/#/topic2/+/Topic3/#456', Target:= ADR(dis2), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
	GetSplitTopic(in:= 'test1/+/rest/#', Target:= ADR(dis3), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
	GetSplitTopic(in:= 'test1/#', Target:= ADR(dis4), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
	GetSplitTopic(in:= 'test1/topic2/+/Topic3/+/5636/ggesd', Target:= ADR(dis5), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
	GetSplitTopic(in:= 'test1/#/topic2/+/Topic3/+/5636/ggesd', Target:= ADR(dis6), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
	GetSplitTopic(in:= 'test1#', Target:= ADR(dis7), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
	GetSplitTopic(in:= 'test1+', Target:= ADR(dis8), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
	GetSplitTopic(in:= '/+//sdf/test1', Target:= ADR(dis9), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
	GetSplitTopic(in:= '//+//sdf/test1/', Target:= ADR(dis10), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
	GetSplitTopic(in:= '///+//sdf/test1//', Target:= ADR(dis11), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
	GetSplitTopic(in:= '///', Target:= ADR(dis12), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
	GetSplitTopic(in:= '/sd//', Target:= ADR(dis13), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
	Valid1:=CheckTopicValid(Target:= ADR(dis1));
	Valid2:=CheckTopicValid(Target:= ADR(dis2));
	Valid3:=CheckTopicValid(Target:= ADR(dis3));
	Valid4:=CheckTopicValid(Target:= ADR(dis4));
	Valid5:=CheckTopicValid(Target:= ADR(dis5));
	Valid6:=CheckTopicValid(Target:= ADR(dis6));
	Valid7:=CheckTopicValid(Target:= ADR(dis7));
	Valid8:=CheckTopicValid(Target:= ADR(dis8));
	Valid9:=CheckTopicValid(Target:= ADR(dis9));
	*)
	
	t1.LowInit(SplitElementSizeInit:=400, TopicsLevelInit:= 40, dynMemUsageInit:= ADR(dynMemUsage));
	valid := t1.NewTopic(in := ADR(valids[0]), test:= TRUE, SizeOfString:= 0);
	sp := t1.GetSplitTopic();
	pts[0] := sp^.Topics[0];
	pts[1] := sp^.Topics[1];
	pts[2] := sp^.Topics[2];
	pts[3] := sp^.Topics[3];
	pts[4] := sp^.Topics[4];
	pts[5] := sp^.Topics[5];
	pts[6] := sp^.Topics[6];
	pts[7] := sp^.Topics[7];
	pts[8] := sp^.Topics[8];
	valid := t1.NewTopic(in := ADR(valids[1]), test:= TRUE, SizeOfString:= 0);
	valid := t1.NewTopic(in := ADR(valids[2]), test:= TRUE, SizeOfString:= 0);
	valid := t1.NewTopic(in := ADR(valids[3]), test:= TRUE, SizeOfString:= 0);
	valid := t1.NewTopic(in := ADR(valids[4]), test:= TRUE, SizeOfString:= 0);
	valid := t1.NewTopic(in := ADR(valids[5]), test:= TRUE, SizeOfString:= 0);
	valid := t1.NewTopic(in := ADR(valids[6]), test:= TRUE, SizeOfString:= 0);
	valid := t1.NewTopic(in := ADR(valids[7]), test:= TRUE, SizeOfString:= 0);
	valid := t1.NewTopic(in := ADR(valids[8]), test:= TRUE, SizeOfString:= 0);
	
	valid := t1.NewTopic(in := ADR(falses[0]), test:= TRUE, SizeOfString:= 0);
	valid := t1.NewTopic(in := ADR(falses[1]), test:= TRUE, SizeOfString:= 0);
	valid := t1.NewTopic(in := ADR(falses[2]), test:= TRUE, SizeOfString:= 0);
	valid := t1.NewTopic(in := ADR(falses[3]), test:= TRUE, SizeOfString:= 0);
	valid := t1.NewTopic(in := ADR(falses[4]), test:= TRUE, SizeOfString:= 0);
	valid := t1.NewTopic(in := ADR(falses[5]), test:= TRUE, SizeOfString:= 0);
	valid := t1.NewTopic(in := ADR(falses[6]), test:= TRUE, SizeOfString:= 0);
	valid := t1.NewTopic(in := ADR(falses[7]), test:= TRUE, SizeOfString:= 0);
	
	
	//now bulid some realy big topics and thest them....
	s1 :='';
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(s100));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(splus));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(s100));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(s100));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(ssharp));
	//valid
	valid := t1.NewTopic(in := ADR(s1), test:= TRUE, SizeOfString:= 0);
	s1 :='';
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(s100));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(splus));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(s100));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(s100));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(ssharp));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	//not valid # not at last pos
	valid := t1.NewTopic(in := ADR(s1), test:= TRUE, SizeOfString:= 0);
	s1 :='';
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(s100));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(splus));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(s100));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(splus));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(s100));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(ssharp));
	
	//not valid + within topic
	valid := t1.NewTopic(in := ADR(s1), test:= TRUE, SizeOfString:= 0);
	
	s1 :='';
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(s100));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(splus));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(s100));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(ssharp));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(s100));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(ssharp));
	
	//not valid # within topic
	valid := t1.NewTopic(in := ADR(s1), test:= TRUE, SizeOfString:= 0);</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>632e8e92-ad6c-45dd-90a7-c985f011dd34</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="testHighLoadPublish" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="topics">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="TEST_TOPICS" />
              </initialValue>
            </variable>
            <variable name="broker">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'test.mosquitto.org:1883'" />
              </initialValue>
            </variable>
            <variable name="addTopic">
              <type>
                <string length="200" />
              </type>
            </variable>
            <variable name="retpeatTime">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1m0s0ms" />
              </initialValue>
            </variable>
          </inputVars>
          <localVars>
            <variable name="HighLoad">
              <type>
                <derived name="HighLoadPublish" />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="testTopic">
              <type>
                <string length="255" />
              </type>
              <initialValue>
                <simpleValue value="'High Payload Test with very very very very very very very very very very big topic/Outs'" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">testTopics:ARRAY[0..TOPICS_MAX] OF STRING(255);</xhtml>
              </documentation>
            </variable>
            <variable name="testPayload">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <string length="255" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="splitChar">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'='" />
              </initialValue>
            </variable>
            <variable name="PayloadPrefix">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'Output:'" />
              </initialValue>
            </variable>
            <variable name="ReceivePayloadStore">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <LINT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="SendPayloadStore">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <string length="255" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="SendPayloadStorePointerArray">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <pointer>
                      <baseType>
                        <string />
                      </baseType>
                    </pointer>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="tmpString">
              <type>
                <string />
              </type>
            </variable>
            <variable name="tmpString2">
              <type>
                <string />
              </type>
            </variable>
            <variable name="step">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="nextRun">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="tNewRun">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="work">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="TEST_TOPICS">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="200" />
              </initialValue>
            </variable>
            <variable name="TOPICS_MAX">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="10000" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT init THEN
	 init := TRUE;
	//Testtopic();
	FOR i := 0 TO topics - 1 DO
		
		tmpString := PayloadPrefix;
		tmpString2 := UINT_TO_STRING(i);
		CommonTypesAndFunctions.concat(s1:= ADR(tmpString), s2:= ADR(tmpString2));
		
		CommonTypesAndFunctions.concat(s1:= ADR(tmpString), s2:= ADR(splitChar));
		CommonTypesAndFunctions.concat(s1:= ADR(tmpString), s2:= ADR(tmpString2));
		SendPayloadStore[i] := tmpString;
		SendPayloadStorePointerArray[i] := ADR(SendPayloadStore[i]);
		step := 10;
	END_FOR
	
END_IF

HighLoad(
	ClientID:= 'Test for HighLoadPublish', 
	Topic:= ADR(testTopic), 
	TopicFix:= TRUE, 
	payload:= ADR(SendPayloadStorePointerArray[0]),
	PayloadFix := FALSE, 
	CountArray:= topics, 
	UsedPublishFbs:= MyConstants.QoS_BUFFER_SIZE - 1, 
	working:= work, 
	broker:= 'windows-10-pro:1883', 
	QoS:= QoS.ExactlyOnce, 
	RetainIn:= FALSE);

IF topics &gt;= TOPICS_MAX THEN
	topics := TOPICS_MAX - 1;
END_IF


	
CASE step OF
	10: //empty
		step := 20;
	
	20: 
		work := TRUE; 
		step := 30;
	30: //wait for finish
		IF HighLoad.finished THEN
			work := FALSE;
			step := 40;
			
		END_IF
		
	40: //wait for next run
		IF tNewRun.Q OR nextRun THEN
			step := 10;
		END_IF 
END_CASE

tNewRun(in := step = 40,PT:= retpeatTime);</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>bbbbcdfa-0e74-417f-ba45-d6fd521403de</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="testHighReceive" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="topics">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="TEST_TOPICS" />
              </initialValue>
            </variable>
            <variable name="broker">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'test.mosquitto.org:1883'" />
              </initialValue>
            </variable>
            <variable name="addTopic">
              <type>
                <string length="200" />
              </type>
            </variable>
            <variable name="repeatTime">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1m0s0ms" />
              </initialValue>
            </variable>
          </inputVars>
          <localVars>
            <variable name="MQTT">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
            <variable name="send">
              <type>
                <derived name="HighLoadPublish" />
              </type>
            </variable>
            <variable name="sendWork">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="PayloadTarget">
              <type>
                <pointer>
                  <baseType>
                    <pointer>
                      <baseType>
                        <string />
                      </baseType>
                    </pointer>
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="subs">
              <type>
                <derived name="MQTTSubscribe" />
              </type>
            </variable>
            <variable name="MQTT_IN_OUT">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
            <variable name="tNewRun">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="testPayload">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <string />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="testPayloadPointer">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <pointer>
                      <baseType>
                        <string />
                      </baseType>
                    </pointer>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="emptyString">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="''" />
              </initialValue>
            </variable>
            <variable name="pointerToEmptyString">
              <type>
                <pointer>
                  <baseType>
                    <string />
                  </baseType>
                </pointer>
              </type>
              <initialValue>
                <simpleValue value="ADR(emptyString)" />
              </initialValue>
            </variable>
            <variable name="testTopics">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <string length="255" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="testTopicsPointer">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <pointer>
                      <baseType>
                        <string />
                      </baseType>
                    </pointer>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="compareTopic">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <string length="255" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="testPayloadReceive">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <string />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="PayloadReceiveValue">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <string length="255" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="SplitChar">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'='" />
              </initialValue>
            </variable>
            <variable name="tmpString">
              <type>
                <string />
              </type>
            </variable>
            <variable name="step">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="topic">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="payload">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="sendPublish">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="subscribe">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="noData">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="nextRun">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ListCallback">
              <type>
                <derived name="ListStringCallback" />
              </type>
            </variable>
            <variable name="CallbackData">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <derived name="LIST_STRING_CALLBACK_DATA" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="PayloadFix">
              <type>
                <BOOL />
              </type>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="TEST_TOPICS">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="200" />
              </initialValue>
            </variable>
            <variable name="TOPICS_MAX">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="10000" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT init THEN
	init := TRUE;
	subs.SetMqttInOut(MQTT_IN_OUT:= ADR(MQTT_IN_OUT)); 
	//Testtopic();
	FOR i := 0 TO topics - 1 DO
		tmpString := UINT_TO_STRING(i);
		testTopics[i] := 'RetainTopicSD/Topic:';
		CommonTypesAndFunctions.concat(s1:= ADR(testTopics[i]), s2:= ADR(addTopic));
		CommonTypesAndFunctions.concat(s1:= ADR(testTopics[i]), s2:= ADR(tmpString));
		testTopicsPointer[i] := ADR(testTopics[i]);
		testPayloadPointer[i] := ADR(testPayload[i]);
		//CommonTypesAndFunctions.concat(s1:= ADR(testTopics[i]), s2:= ADR('/'));
		testPayload[i] := tmpString;
		compareTopic[i] :='Topic:';
		CommonTypesAndFunctions.concat(s1:= ADR(compareTopic[i]), s2:= ADR(addTopic));
		CommonTypesAndFunctions.concat(s1:= ADR(compareTopic[i]), s2:= ADR(tmpString));
		
		//compareTopic[i] := tmpString;
		CallbackData[i].SubTopic := ADR(compareTopic[i]);
		CallbackData[i].Target := ADR(testPayloadReceive[i]);
	END_FOR
	ListCallback.InitAsSplitTopic(ListData:= ADR(CallbackData[0]), LengthOfData:= i);
END_IF
IF topics &gt;= TOPICS_MAX THEN
	topics := TOPICS_MAX;
END_IF

send(
	ClientID:= 'SendHighReceive test', 
	Topic:= ADR(testTopicsPointer), 
	TopicFix:= FALSE, 
	payload:= PayloadTarget, 
	PayloadFix := PayloadFix,
	CountArray:= topics, 
	UsedPublishFbs:= 48, 
	working:= sendWork, 
	broker:= broker, 
	QoS:= QoS.ExactlyOnce, 
	RetainIn:= TRUE);
subs(
	Subscribe:= subscribe, 
	Topic:= ADR('RetainTopicSD/#'), 
	QoSSubscribe:= QoS.ExactlyOnce, 
	ExpectingString:= TRUE,
	Callback := ListCallback);
	

MQTT(
	MQTT_IN_OUT:= MQTT_IN_OUT, 
	ENABLE:= TRUE, 
	URL:= broker, 
	TIMEOUT:= T#5S, 
	TLS:= FALSE);
IF NOT MQTT_IN_OUT.BROKER_CONNECTED THEN
	step := 0;
END_IF
	
CASE step OF
	0: 	step := 1;
		
		FOR i := 0 TO topics - 1 DO
			testPayloadReceive[i] := '';
		END_FOR
	1: IF MQTT_IN_OUT.BROKER_CONNECTED THEN
			step:= 10;
			PayloadTarget := ADR(testPayloadPointer); 
			sendWork := TRUE;
			PayloadFix := FALSE;
		END_IF
	10: //publish all data
		IF send.finished THEN
			sendWork := FALSE;
			step := 30; 
			
		END_IF
	
	30: subscribe := TRUE;
		step := 40;
		
	40: // wait to receive all topics
		noData := FALSE;
		FOR i := 0 TO topics - 1 DO
			IF testPayloadReceive[i] &lt;&gt; testPayload[i] THEN
				noData := TRUE;
			END_IF
		END_FOR
		IF NOT noData THEN
			step := 50; 
		END_IF 
		//unsubscripe
	50: subscribe := FALSE;
		step := 52;
		PayloadTarget := pointerToEmptyString; 
		//cleanup receive buffer
		FOR i := 0 TO topics - 1 DO
			testPayloadReceive[i] :='';
		END_FOR
		sendWork := TRUE;
		PayloadFix := TRUE;
	52: //discharge retain messages from broker
		IF send.finished  THEN
			sendWork := FALSE;
			step := 60;
		END_IF
	
	60:
		IF nextRun OR tNewRun.Q THEN 
			nextRun := FALSE;
			step := 0;
		END_IF
END_CASE

tNewRun(in := step = 60,PT:= repeatTime);</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>2c7b7c99-a3d9-49b0-b749-8e7ba380eebe</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="testHighReceiveSplitPayload" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="Count">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="TEST_TOPICS" />
              </initialValue>
            </variable>
            <variable name="broker">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'test.mosquitto.org:1883'" />
              </initialValue>
            </variable>
            <variable name="addTopic">
              <type>
                <string length="200" />
              </type>
            </variable>
            <variable name="repeatTime">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#1m0s0ms" />
              </initialValue>
            </variable>
          </inputVars>
          <localVars>
            <variable name="MQTT_RECEIVE">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
            <variable name="subs">
              <type>
                <derived name="MQTTSubscribe" />
              </type>
            </variable>
            <variable name="MQTT_IN_OUT_RECEIVE">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
            <variable name="tNewRun">
              <type>
                <derived name="TON" />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="testTopic">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'SD_MQTT/TEST_PAYLOAD/PAYLOAD'" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">testTopics:ARRAY[0..TOPICS_MAX] OF STRING(255);</xhtml>
              </documentation>
            </variable>
            <variable name="testPayloadString">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <string length="255" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="splitChar">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'='" />
              </initialValue>
            </variable>
            <variable name="PayloadPrefix">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'Output'" />
              </initialValue>
            </variable>
            <variable name="comparePayload">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <string length="255" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="SendPayloadStorePointerArray">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <pointer>
                      <baseType>
                        <string />
                      </baseType>
                    </pointer>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="ReceivePayloadStore">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <LINT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="SendPayloadStore">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <LINT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="tmpString">
              <type>
                <string />
              </type>
            </variable>
            <variable name="tmpString2">
              <type>
                <string />
              </type>
            </variable>
            <variable name="step">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="subscribe">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="HighSendPublish">
              <type>
                <derived name="HighLoadPublish" />
              </type>
            </variable>
            <variable name="runPublishWorker">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="noData">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="nextRun">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ListCallback">
              <type>
                <derived name="ListAllValuesCallback" />
              </type>
            </variable>
            <variable name="CallbackData">
              <type>
                <array>
                  <dimension lower="0" upper="TOPICS_MAX" />
                  <baseType>
                    <derived name="LIST_ALLVALUES_CALLBACK_DATA" />
                  </baseType>
                </array>
              </type>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="TEST_TOPICS">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="200" />
              </initialValue>
            </variable>
            <variable name="TOPICS_MAX">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="10000" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT init THEN
	init := TRUE;
	MQTT_IN_OUT_RECEIVE.ClientID := 'Test Client Receive';
	subs.SetMqttInOut(MQTT_IN_OUT:= ADR(MQTT_IN_OUT_RECEIVE)); 
	//Testtopic();
	FOR i := 0 TO Count - 1 DO

		tmpString := PayloadPrefix;
		tmpString2 := UINT_TO_STRING(i);
		CommonTypesAndFunctions.concat(s1:= ADR(tmpString), s2:= ADR(tmpString2));
		//finished building compare payload
		comparePayload[i] := tmpString;
		CommonTypesAndFunctions.concat(s1:= ADR(tmpString), s2:= ADR(splitChar));
		SendPayloadStore[i] := i + 22;
		tmpString2 := TO_STRING(SendPayloadStore[i]);
		CommonTypesAndFunctions.concat(s1:= ADR(tmpString), s2:= ADR(tmpString2));
		//CommonTypesAndFunctions.concat(s1:= ADR(tmpString), s2:= ADR(splitChar));
		
		testPayloadString[i] := tmpString; 
		
		//compareTopic[i] := tmpString;
		CallbackData[i].SubTopic := ADR(comparePayload[i]);
		CallbackData[i].Target.POINTER_TO_LINT_T := ADR(ReceivePayloadStore[i]);
		CallbackData[i].VarTYPE := CommonTypesAndFunctions.VAR_TYPES.LINT_T;
		SendPayloadStorePointerArray[i] := ADR(testPayloadString[i]);
	END_FOR
	ListCallback.InitAsSplitPayload(Data:= ADR(CallbackData[0]), LengthOfData:= i, SplitChar:= CommonTypesAndFunctions.GetChar(splitChar));
END_IF
IF Count &gt;= TOPICS_MAX THEN
	Count := TOPICS_MAX;
END_IF

subs(
	Subscribe:= subscribe, 
	Topic:= ADR(testTopic), 
	QoSSubscribe:= QoS.ExactlyOnce, 
	ExpectingString:= TRUE,
	Callback := ListCallback);
	
MQTT_RECEIVE(
	MQTT_IN_OUT:= MQTT_IN_OUT_RECEIVE, 
	ENABLE:= TRUE, 
	URL:= broker, 
	TIMEOUT:= T#5S, 
	TLS:= FALSE);
IF NOT MQTT_IN_OUT_RECEIVE.BROKER_CONNECTED THEN
	step := 0;
END_IF
	
HighSendPublish(
	ClientID:= 'HighSendClient', 
	Topic:= ADR(testTopic), 
	TopicFix:= TRUE, 
	payload:= ADR(SendPayloadStorePointerArray), 
	CountArray:= Count, 
	UsedPublishFbs:= 49, 
	working:= runPublishWorker, 
	broker:= broker, 
	QoS:= QoS.ExactlyOnce, 
	RetainIn:= FALSE);


CASE step OF
	0: 	step := 1;
		FOR i := 0 TO Count - 1 DO
			ReceivePayloadStore[i] := 0;
		END_FOR
	1: IF MQTT_IN_OUT_RECEIVE.BROKER_CONNECTED THEN
			step:= 5;
			//subscribe
			subscribe := TRUE;
		END_IF
	5: //wait for subscribe
		IF subs.SubscribeDone THEN
			step:= 10;
		END_IF
		 
	10: //publish all and receive data
		//start publish
		runPublishWorker := TRUE;
		step := 20;
	20: IF HighSendPublish.finished THEN
		//wait until send is done		
			runPublishWorker := FALSE;
			step:= 30;

		END_IF
	30: //now check payload
		
			noData := FALSE;
		FOR i := 0 TO Count - 1 DO
			IF ReceivePayloadStore[i] &lt;&gt; SendPayloadStore[i] THEN
				noData := TRUE;
				EXIT;
			END_IF
		END_FOR
		IF NOT noData THEN
			step := 40;
			//unsubscripe
			subscribe := FALSE; 
		END_IF	
	40: 
		IF nextRun OR tNewRun.Q THEN 
			nextRun := FALSE;
			step := 0;
		END_IF
END_CASE

tNewRun(in := step = 40,PT:= repeatTime);</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>139df6d3-53ef-4b7d-825c-852c7cfdd82d</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestLongPublish" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="broker">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'test.mosquitto.org:1883'" />
              </initialValue>
            </variable>
          </inputVars>
          <localVars>
            <variable name="longPayload">
              <type>
                <string length="8000" />
              </type>
              <initialValue>
                <simpleValue value="''" />
              </initialValue>
            </variable>
            <variable name="longTopic">
              <type>
                <string length="8000" />
              </type>
              <initialValue>
                <simpleValue value="'TestTopic/'" />
              </initialValue>
            </variable>
            <variable name="longPayloadReceive">
              <type>
                <string length="8000" />
              </type>
            </variable>
            <variable name="longTopicReceive">
              <type>
                <string length="8000" />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="i1">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="i2">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="countAsciis">
              <type>
                <UINT />
              </type>
              <initialValue>
                <simpleValue value="48" />
              </initialValue>
            </variable>
            <variable name="pt1">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="pt2">
              <type>
                <pointer>
                  <baseType>
                    <BYTE />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="step">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="MQTT">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
            <variable name="MQTT_IN_OUT">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
            <variable name="ComConfig">
              <type>
                <derived name="COM_CONFIG" />
              </type>
            </variable>
            <variable name="pup">
              <type>
                <derived name="MQTTPublish" />
              </type>
            </variable>
            <variable name="send">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="SUB1">
              <type>
                <derived name="MQTTSubscribe" />
              </type>
            </variable>
            <variable name="subscribe">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="callback">
              <type>
                <derived name="SingelStringCallback" />
              </type>
            </variable>
            <variable name="connect">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="nextRung">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="lenPayload">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="lenTopic">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT init THEN
	init := TRUE;
	SUB1.SetMqttInOut(MQTT_IN_OUT := ADR(MQTT_IN_OUT));
	pup.SetMqttInOut(MQTT_IN_OUT := ADR(MQTT_IN_OUT));
	ComConfig.MaxPayloadSize := 20000;
	ComConfig.MaxTopicLevels := 10;
	ComConfig.MaxTopicElementSize := 10000;
	
	MQTT_IN_OUT.ClientID := 'TestCodesys';
	MQTT_IN_OUT.COM_CONFIG := ComConfig;
	//firs build some nice pacload ...
	pt1 := ADR(longPayload);
	pt2 := ADR(longTopic);
	pt2 := pt2 + 10;
	FOR i1 := 0 TO 8000 / countAsciis - 1 DO
		FOR i2 := 0 TO countAsciis - 1 DO
			pt1^ := TO_BYTE(i2 + 16#30); //16#30 --&gt; ASCII zero
			pt2^ := TO_BYTE(i2 + 16#30); //16#30 --&gt; ASCII zero
			pt1 := pt1 + 1;
			pt2 := pt2 + 1;
		END_FOR
	END_FOR
	//need termination...
	pt1^:= 0;
	pt2^:= 0;
	callback.Init(payload:= ADR(longPayloadReceive), topic:= ADR(longTopicReceive));
END_IF

SUB1(
	Subscribe:= subscribe, 
	Topic:= ADR('TestTopic/#'), 
	QoSSubscribe:= QoS.ExactlyOnce, 
	ExpectingString:= TRUE, 
	Callback:= callback);

	
	pup(
	Topic:= ADR(longTopic), 
	PayloadString:= ADR(longPayload), 
	PublishAsString:= TRUE, 
	QoSIn:= Qos.ExactlyOnce, 
	MRetain:= FALSE, 
	send:= send);

MQTT(
	MQTT_IN_OUT:= MQTT_IN_OUT, 
	ENABLE:= connect, 
	URL:= broker, 
	TIMEOUT:= T#5S);


CASE step OF 
	0://begin
		//connect
		connect := TRUE;
		step := 10;
	10://wait connected
		IF MQTT_IN_OUT.BROKER_CONNECTED THEN
			//subscribe
			subscribe := TRUE;		
			step := 20;
		END_IF
	20://wait subscribed
		IF SUB1.SubscribeDone THEN
			//send packet and check receive
			send := TRUE;
			step := 30;
		END_IF
		
	30:
		//reset send
		send := FALSE;
		step := 40;
	40:
		lenPayload:= CommonTypesAndFunctions.len(ADR(longPayloadReceive));
		lenTopic:= CommonTypesAndFunctions.len(ADR(longTopicReceive));
		//check if payload and topic received....
		IF CommonTypesAndFunctions.StrEquals(str1:= ADR(longPayload), str2:= ADR(longPayloadReceive)) AND
			CommonTypesAndFunctions.StrEquals(str1:= ADR(longTopic), str2:= ADR(longTopicReceive)) THEN
			//deled received strings
			longTopicReceive := '';
			longPayloadReceive := '';
			//go wait repeat
			step := 50;
		END_IF
		
	50:
		IF nextRung.Q THEN
			step := 0;
		END_IF
END_CASE

nextRung(IN:= step = 50, PT:= T#5S);</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>b18c8267-7251-461e-ae79-29a6c51f3a8f</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestLongStringList" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="client">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'test.mosquitto.org:1883'" />
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">test.mosquitto.org</xhtml>
              </documentation>
            </variable>
          </inputVars>
          <localVars>
            <variable name="MQTTClient">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
            <variable name="MQTT_IN_OUT">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
            <variable name="MQTTInfo">
              <type>
                <derived name="MQTT_INFO" />
              </type>
            </variable>
            <variable name="publish">
              <type>
                <derived name="MQTTPublish" />
              </type>
            </variable>
            <variable name="subscribe">
              <type>
                <derived name="MQTTSubscribe" />
              </type>
            </variable>
            <variable name="ReceiveSubscribeTopic">
              <type>
                <string length="255" />
              </type>
            </variable>
            <variable name="ReceiveSubscribePayloadLong">
              <type>
                <string length="500" />
              </type>
            </variable>
            <variable name="State">
              <type>
                <derived name="MQTTState" />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="varSend">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="timerSend">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="t1">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="t2">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="Payload">
              <type>
                <string />
              </type>
            </variable>
            <variable name="StringCallback">
              <type>
                <derived name="ListStringCallback" />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">the method PublishReceved() is call when an publsih packet form the broker is received.</xhtml>
              </documentation>
            </variable>
            <variable name="CallBackTargets">
              <type>
                <array>
                  <dimension lower="0" upper="1" />
                  <baseType>
                    <derived name="LIST_STRING_CALLBACK_DATA" />
                  </baseType>
                </array>
              </type>
              <initialValue>
                <arrayValue>
                  <value>
                    <structValue>
                      <value member="Target">
                        <simpleValue value="ADR(ReceiveSubscribePayloadLong)" />
                      </value>
                      <value member="SubTopic">
                        <simpleValue value="ADR('Long')" />
                      </value>
                    </structValue>
                  </value>
                </arrayValue>
              </initialValue>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">the array contains the targets and sub topics for receive</xhtml>
              </documentation>
            </variable>
            <variable name="len1">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">//here init is done
IF NOT init THEN
	init := TRUE;
	MQTT_IN_OUT.ClientID := CONCAT('CodesysMqtt',TO_STRING(TICKS.GetTick(xDummy:= TRUE)));
	//init state FB, so you only have to call state();without parameters... 
	State.Init(
	State:= ADR(t1.Q), 
	Topic:= ADR('CODESYS-MQTT-BY-SD/Long'), 
	StateName:= ADR(''), 
	StateValueOn:= ADR('LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOg:On'), 
	StateValueOff:= ADR('LOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOg:Off'), 
	QoS:= QoS.ExactlyOnce, 
	RetainMqtt:= TRUE,
	MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	StringCallback.InitAsSplitTopic(ListData := ADR(CallBackTargets), LengthOfData:= 1);
	
	subscribe.SetMqttInOut(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	
END_IF
//timer for repeating packets
t1(IN:= NOT t2.Q, PT:= T#1S, );
t2(IN:= t1.Q, PT:= T#1S);
//call of MQTT client
MQTTClient(
	MQTT_IN_OUT:= MQTT_IN_OUT, 
	ENABLE:= TRUE, 
	URL:= client, 
	TIMEOUT:= T#5S, 
	TLS:= FALSE);
//Subscribe to topic
subscribe(
	Subscribe:= TRUE, 
	Topic:= ADR('CODESYS-MQTT-BY-SD/#'), 
	QoSSubscribe:= QoS.ExactlyOnce, 
	ExpectingString:= TRUE,
	Callback:= StringCallback);
len1 := CommonTypesAndFunctions.len(str:= ADR(ReceiveSubscribePayloadLong));

//call of state FB
State();</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>ba26506c-e830-4dfd-b732-7d24065c29cf</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestMemHandle" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="MQTT_IN_OUT_1">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
            <variable name="MQTT_IN_OUT_2">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
            <variable name="Client1">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
            <variable name="Client2">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Client1(
	MQTT_IN_OUT:= MQTT_IN_OUT_1, 
	ENABLE:= TRUE, 
	URL:= 'test.mosquitto.org:1883', 
	TIMEOUT:= T#5S);
	
Client2(
	MQTT_IN_OUT:= MQTT_IN_OUT_2, 
	ENABLE:= TRUE, 
	URL:= 'test.mosquitto.org:1883', 
	TIMEOUT:= T#5S);</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>af680a5d-43a6-49f6-9b4a-66feec0848d3</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestMqtt" pouType="functionBlock">
        <interface>
          <inputVars>
            <variable name="clientID">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'testCodesys'" />
              </initialValue>
            </variable>
          </inputVars>
          <localVars>
            <variable name="MQTT">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
            <variable name="MQTT_IN_OUT">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
            <variable name="ERROR_C">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="ERROR_T">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="testPublish">
              <type>
                <array>
                  <dimension lower="0" upper="100" />
                  <baseType>
                    <derived name="MQTTPublish" />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">testPiublish: SD_MQTT.MQTTPublish;</xhtml>
              </documentation>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="sendTest">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="testBigPublish">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="testBigPayload">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="testTimeBigPublish">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="testTimeBigPayload">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="testtime">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="i">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="qos">
              <type>
                <derived name="QoS" />
              </type>
              <initialValue>
                <simpleValue value="2" />
              </initialValue>
            </variable>
            <variable name="sub1">
              <type>
                <derived name="MQTTSubscribe" />
              </type>
            </variable>
            <variable name="sub2">
              <type>
                <derived name="MQTTSubscribe" />
              </type>
            </variable>
            <variable name="sub3">
              <type>
                <derived name="MQTTSubscribe" />
              </type>
            </variable>
            <variable name="con">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TestLongSubscribe">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="received1">
              <type>
                <BOOL />
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">Testtopic:SD_MQTT.TestcaseCheckTopivValid;
TestSubscribe:SD_MQTT.TestSubscribe;</xhtml>
              </documentation>
            </variable>
            <variable name="received2">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="received3">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="longReceived">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="CountSucsess">
              <type>
                <array>
                  <dimension lower="0" upper="100" />
                  <baseType>
                    <ULINT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="MQTTretain">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="enable">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ReceiveData">
              <type>
                <array>
                  <dimension lower="0" upper="100" />
                  <baseType>
                    <derived name="RECEIVE_PAKET" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="receiveIndex">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="TestLen">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="SubscribeForBigPaket">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="t1">
              <type>
                <derived name="HandleSplitTopic" />
              </type>
            </variable>
            <variable name="s100">
              <type>
                <string length="101" />
              </type>
              <initialValue>
                <simpleValue value="'1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'" />
              </initialValue>
            </variable>
            <variable name="sa">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'abcdefghijklmnopqrstuvwxyz'" />
              </initialValue>
            </variable>
            <variable name="sb">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />
              </initialValue>
            </variable>
            <variable name="sc">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'0123456789'" />
              </initialValue>
            </variable>
            <variable name="sd">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'9876543210'" />
              </initialValue>
            </variable>
            <variable name="splus">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'+'" />
              </initialValue>
            </variable>
            <variable name="ssharp">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'#'" />
              </initialValue>
            </variable>
            <variable name="stest">
              <type>
                <string />
              </type>
              <initialValue>
                <simpleValue value="'test'" />
              </initialValue>
            </variable>
            <variable name="s1">
              <type>
                <string length="64000" />
              </type>
            </variable>
            <variable name="s2">
              <type>
                <string length="64000" />
              </type>
            </variable>
            <variable name="b1">
              <type>
                <array>
                  <dimension lower="0" upper="(bSize + 2)" />
                  <baseType>
                    <BYTE />
                  </baseType>
                </array>
              </type>
            </variable>
          </localVars>
          <localVars constant="true">
            <variable name="bSize">
              <type>
                <UDINT />
              </type>
              <initialValue>
                <simpleValue value="((1024 * 1024) * 30)" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTT_IN_OUT.ClientID :=clientID;
MQTT_IN_OUT.COM_CONFIG.MaxPayloadSize :=50000;
MQTT_IN_OUT.COM_CONFIG.MaxTopicLevels := 200;
//MQTT_IN_OUT.PORT := 1883;
//MQTT_IN_OUT.URL := 'test.mosquitto.org';


{info 'TODO make some nice test cases'}




//testtime(IN:= , PT:= );
testtime(IN:= NOT testtime.Q AND sendTest, PT:= T#50MS);
testTimeBigPublish(IN:= NOT testTimeBigPublish.Q AND testBigPublish, PT:= T#100MS);
testTimeBigPayload(IN:= NOT testTimeBigPayload.Q AND testBigPayload, PT:= T#100MS);
//testtime(IN:= NOT testtime.Q AND sendTest, PT:= T#10S);
IF NOT init THEN
	init := TRUE;
	//Testtopic();
	FOR i := 0 TO 100 DO
		testPublish[i].SetMqttInOut(MQTT_IN_OUT := ADR(MQTT_IN_OUT));
	END_FOR
	FOR i := 0 TO 90 DO
		CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(sa));
		CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
		CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR(sb));
		CommonTypesAndFunctions.concat(s1:= ADR(s1), s2:= ADR('/'));
	END_FOR
	FOR i := 0 TO 10 DO
		CommonTypesAndFunctions.concat(s1:= ADR(s2), s2:= ADR(sc));
		CommonTypesAndFunctions.concat(s1:= ADR(s2), s2:= ADR('/'));
		CommonTypesAndFunctions.concat(s1:= ADR(s2), s2:= ADR(sd));
		CommonTypesAndFunctions.concat(s1:= ADR(s2), s2:= ADR('/'));
	END_FOR
	FOR i := 0 TO bSize DO
		b1[i] := UDINT_TO_BYTE(i);
	END_FOR
	sub1.SetMqttInOut(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	sub2.SetMqttInOut(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	sub3.SetMqttInOut(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	
END_IF

FOR i := 0 TO 20 DO
	CountSucsess[i] := testPublish[i].CountSend;
END_FOR

TestLen := CommonTypesAndFunctions.len(str:= ADR(''));
TestLen := CommonTypesAndFunctions.len(str:= ADR('a'));
TestLen := CommonTypesAndFunctions.len(str:= ADR('aa'));

//	TestSubscribe();
(*
sub1(
	Subscribe:= con, 
	Topic:= ADR(s2), 
	QoSSubscribe:= 2,
	Received =&gt; longReceived,
	ExpectingString := TRUE
	 );
sub2(
	Subscribe:= TestLongSubscribe, 
	Topic:= ADR(s1), 
	QoSSubscribe:= 2 ,
	Recieved =&gt; received1,
	ExpectingString := TRUE
	 );
sub3(
	Subscribe:= SubscribeForBigPaket, 
	Topic:= ADR('#'), 
	QoSSubscribe:= 2 ,
	Received =&gt; received2,
	ExpectingString := FALSE
	 );
IF received1 THEN
	i:=i;
	RecieveData[receiveIndex].MqttPayload := sub1.PayloadString^;
	ReceiveData[receiveIndex].MqttTopic := sub1.TopicOut^;
	receiveIndex := receiveIndex + 1;
	IF receiveIndex &gt; 100 THEN
		receiveIndex := 0;
	END_IF
END_IF*)
testPublish[17](
	Topic:= ADR(s1), 
	Payload:= ADR(b1), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testTimeBigPayload.Q,
	PayloadLength :=  3654,
	PublishAsString := FALSE
	);
testPublish[16](
	Topic:= ADR(s1), 
	PayloadString:= ADR(s2), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testTimeBigPublish.Q, 
	PublishAsString := TRUE
	);
testPublish[0](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/1'), 
	PayloadString:= ADR('test pi1'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q,
	PublishAsString := TRUE 
	);
	
testPublish[1](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/2'), 
	PayloadString:= ADR('test pi2'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q,
	PublishAsString := TRUE 
	);
testPublish[2](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/3'), 
	PayloadString:= ADR('test pi3'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q,
	PublishAsString := TRUE 
	);
testPublish[3](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/4'), 
	PayloadString:= ADR('test pi4'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[4](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/5'), 
	PayloadString:= ADR('test pi5'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[5](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/6'), 
	PayloadString:= ADR('test pi6'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[6](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/7'), 
	PayloadString:= ADR('test pi7'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[7](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/8'), 
	PayloadString:= ADR('test pi8'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[8](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/9'), 
	PayloadString:= ADR('test pi9'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[9](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/10'), 
	PayloadString:= ADR('test pi10'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[10](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/11'), 
	PayloadString:= ADR('test pi11'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[11](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/12'), 
	PayloadString:= ADR('test pi12'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[12](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/13'), 
	PayloadString:= ADR('test pi13'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[13](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/14'), 
	PayloadString:= ADR('test pi14'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[14](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/15'), 
	PayloadString:= ADR('test pi15'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[15](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/16'), 
	PayloadString:= ADR('test pi16'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);






MQTT(
	MQTT_IN_OUT:= MQTT_IN_OUT, 
	ENABLE:= enable, 
	URL:= 'test.mosquitto.org:1883', 
	TIMEOUT:= T#5S, 
	ERROR_C=&gt; ERROR_C, 
	ERROR_T=&gt; ERROR_T);
</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>04fc90f3-c020-40ea-9831-93a03c452235</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestMqttTLS" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="MQTT">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
            <variable name="MQTT_IN_OUT">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
            <variable name="ERROR_C">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="ERROR_T">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="testPublish">
              <type>
                <array>
                  <dimension lower="0" upper="100" />
                  <baseType>
                    <derived name="MQTTPublish" />
                  </baseType>
                </array>
              </type>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">testPiublish: SD_MQTT.MQTTPublish;</xhtml>
              </documentation>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="sendTest">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="testtime">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="i">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="qos">
              <type>
                <derived name="QoS" />
              </type>
              <initialValue>
                <simpleValue value="2" />
              </initialValue>
            </variable>
            <variable name="sub1">
              <type>
                <derived name="MQTTSubscribe" />
              </type>
            </variable>
            <variable name="sub2">
              <type>
                <derived name="MQTTSubscribe" />
              </type>
            </variable>
            <variable name="con">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="received">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="CountSucsess">
              <type>
                <array>
                  <dimension lower="0" upper="100" />
                  <baseType>
                    <ULINT />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="MQTTretain">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="enable">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ReceiveData">
              <type>
                <array>
                  <dimension lower="0" upper="100" />
                  <baseType>
                    <derived name="RECEIVE_PAKET" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="receiveIndex">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="testTls">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="TLS_CONFIG">
              <type>
                <derived name="CommonTypesAndFunctions.TLS_CONFIG" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTT_IN_OUT.ClientID :='testCodesys';
//MQTT_IN_OUT.PORT := 1883;
//MQTT_IN_OUT.URL := 'test.mosquitto.org';

testtime(IN:= NOT testtime.Q AND sendTest, PT:= T#100MS);
//testtime(IN:= NOT testtime.Q AND sendTest, PT:= T#10S);
IF NOT init THEN
	init := TRUE;
	sub1.SetMqttInOut(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	sub2.SetMqttInOut(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	//Testtopic();
	FOR i := 0 TO 100 DO
		testPublish[i].SetMqttInOut(MQTT_IN_OUT := ADR(MQTT_IN_OUT));
	END_FOR
	
	
	MQTT_IN_OUT.TLS_CONFIG := ADR(TLS_CONFIG);

END_IF

FOR i := 0 TO 20 DO
	CountSucsess[i] := testPublish[i].CountSend;
END_FOR

//	TestSubscribe();
(*
sub1(
	Subscribe:= con, 
	Topic:= ADR('test/#'), 
	QoSSubscribe:= 2 ,
	Received =&gt; received,
	ExpectingString := TRUE
	 );
	 
sub2(
	Subscribe:= con, 
	Topic:= ADR('#'), 
	QoSSubscribe:= 2 ,
	Received =&gt; received,
	ExpectingString := TRUE
	 );
IF received THEN
	i:=i;
	ReceiveData[receiveIndex].MqttPayload := sub1.PayloadString^;
	ReceiveData[receiveIndex].MqttTopic := sub1.TopicOut^;
	receiveIndex := receiveIndex + 1;
	IF receiveIndex &gt; 100 THEN
		receiveIndex := 0;
	END_IF
END_IF*)
testPublish[0](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/1'), 
	PayloadString:= ADR('test pi1'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q,
	PublishAsString := TRUE 
	);
	
testPublish[1](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/2'), 
	PayloadString:= ADR('test pi2'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q,
	PublishAsString := TRUE 
	);
testPublish[2](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/3'), 
	PayloadString:= ADR('test pi3'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q,
	PublishAsString := TRUE 
	);
testPublish[3](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/4'), 
	PayloadString:= ADR('test pi4'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[4](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/5'), 
	PayloadString:= ADR('test pi5'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[5](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/6'), 
	PayloadString:= ADR('test pi6'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[6](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/7'), 
	PayloadString:= ADR('test pi7'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[7](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/8'), 
	PayloadString:= ADR('test pi8'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[8](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/9'), 
	PayloadString:= ADR('test pi9'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[9](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/10'), 
	PayloadString:= ADR('test pi10'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[10](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/11'), 
	PayloadString:= ADR('test pi11'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[11](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/12'), 
	PayloadString:= ADR('test pi12'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[12](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/13'), 
	PayloadString:= ADR('test pi13'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[13](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/14'), 
	PayloadString:= ADR('test pi14'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[14](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/15'), 
	PayloadString:= ADR('test pi15'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);
testPublish[15](
	Topic:= ADR('test/topic veryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy big topic/16'), 
	PayloadString:= ADR('test pi16'), 
	QoSIn:= qos, 
	MRetain:= MQTTretain, 
	send := testtime.Q, 
	PublishAsString := TRUE
	);




(*
MQTT(
	MQTT_INFO:= MQTT_INFO, 
	MQTT_IN_OUT:= MQTT_IN_OUT, 
	ENABLE:= TRUE, 
	URL:= 'test.mosquitto.org:1883', 
	TIMEOUT:= T#5S, 
	ERROR_C=&gt; ERROR_C, 
	ERROR_T=&gt; ERROR_T);
	*)
	(*
	MQTT(
	MQTT_INFO:= MQTT_INFO, 
	MQTT_IN_OUT:= MQTT_IN_OUT, 
	ENABLE:= enable, 
	URL:= 'localhost:1883', 
	TIMEOUT:= T#5S, 
	ERROR_C=&gt; ERROR_C, 
	ERROR_T=&gt; ERROR_T);
	*)


IF testtls THEN
	
(*
MQTT(
	MQTT_INFO:= MQTT_INFO, 
	MQTT_IN_OUT:= MQTT_IN_OUT, 
	ENABLE:= enable, 
	URL:= 'windows-10-pro:8883', //8883 encryptet, 1883 unencryptet
	TIMEOUT:= T#5S, 
	TLS := TRUE,
	ERROR_C=&gt; ERROR_C, 
	ERROR_T=&gt; ERROR_T);
	*)
	MQTT(
	MQTT_IN_OUT:= MQTT_IN_OUT, 
	ENABLE:= enable, 
	URL:= 'test.mosquitto.org:8883', //8883 encryptet, 1883 unencryptet
	TIMEOUT:= T#5S, 
	TLS := TRUE,
	ERROR_C=&gt; ERROR_C, 
	ERROR_T=&gt; ERROR_T);
	
	

ELSE
MQTT(
	MQTT_IN_OUT:= MQTT_IN_OUT, 
	ENABLE:= enable, 
	URL:= 'test.mosquitto.org:1883', //8883 encryptet, 1883 unencryptet
	TIMEOUT:= T#5S, 
	TLS := FALSE,
	ERROR_C=&gt; ERROR_C, 
	ERROR_T=&gt; ERROR_T);
END_IF</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>e6632a47-4b1f-4808-9ba9-69205ba08238</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestPublishValue" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="MQTT">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
            <variable name="MQTT_IN_OUT">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="FALSE" />
              </initialValue>
            </variable>
            <variable name="sendTest">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="TestValue">
              <type>
                <array>
                  <dimension lower="0" upper="99" />
                  <baseType>
                    <derived name="MQTTValue" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="testtime">
              <type>
                <derived name="ton" />
              </type>
            </variable>
            <variable name="i">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="qos">
              <type>
                <derived name="QoS" />
              </type>
              <initialValue>
                <simpleValue value="2" />
              </initialValue>
            </variable>
            <variable name="sub1">
              <type>
                <derived name="MQTTSubscribe" />
              </type>
            </variable>
            <variable name="Values">
              <type>
                <array>
                  <dimension lower="0" upper="99" />
                  <baseType>
                    <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="temp1">
              <type>
                <LREAL />
              </type>
            </variable>
            <variable name="tmpPointer">
              <type>
                <derived name="CommonTypesAndFunctions.ALL_TYPES_UNION_POINTER" />
              </type>
            </variable>
            <variable name="MQTTretain">
              <type>
                <BOOL />
              </type>
              <initialValue>
                <simpleValue value="TRUE" />
              </initialValue>
            </variable>
            <variable name="enable">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="ERROR_C">
              <type>
                <DWORD />
              </type>
            </variable>
            <variable name="ERROR_T">
              <type>
                <BYTE />
              </type>
            </variable>
            <variable name="ValueTime">
              <type>
                <TIME />
              </type>
              <initialValue>
                <simpleValue value="TIME#5s0ms" />
              </initialValue>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTT_IN_OUT.ClientID :='testCodesys';
MQTT_IN_OUT.COM_CONFIG.MaxPayloadSize :=50000;
MQTT_IN_OUT.COM_CONFIG.MaxTopicLevels := 200;
//testtime(IN:= , PT:= );
testtime(IN:= NOT testtime.Q AND sendTest, PT:= T#100MS);

//testtime(IN:= NOT testtime.Q AND sendTest, PT:= T#10S);
IF NOT init THEN
	init := TRUE;
	sub1.SetMqttInOut(MQTT_IN_OUT:= ADR(MQTT_IN_OUT));
	tmpPointer.POINTER_TO_LREAL_T := ADR(temp1);
	TestValue[0].Init(
	Topic:= ADR('Haus/Raum1/Tisch/'), 
	ValueName:= ADR('Temperatur'), 
	ValuePointer:= tmpPointer, 
	ValueType:= CommonTypesAndFunctions.VAR_TYPES.LREAL_T, 
	ValueDiff:= 1, 
	DecimalPlace:= 2, 
	QoS:= qos, 
	RetainMqtt:= MQTTretain,
	MinTime:=ValueTime,
	MQTT_IN_OUT:=ADR(MQTT_IN_OUT));
	
END_IF
TestValue[0]();


MQTT(
	MQTT_IN_OUT:= MQTT_IN_OUT, 
	ENABLE:= enable, 
	URL:= 'test.mosquitto.org:1883', 
	TIMEOUT:= T#5S, 
	ERROR_C=&gt; ERROR_C, 
	ERROR_T=&gt; ERROR_T);</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>aa9e1f7c-7bc1-4db0-be80-d6343d327e02</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestSplitTopic" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="Split1">
              <type>
                <derived name="HandleSplitTopic" />
              </type>
            </variable>
            <variable name="Split2">
              <type>
                <derived name="HandleSplitTopic" />
              </type>
            </variable>
            <variable name="Usage1">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="Usage2">
              <type>
                <UDINT />
              </type>
            </variable>
            <variable name="COM_CONFIG">
              <type>
                <derived name="COM_CONFIG" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Split1.FullInit(TopicsLevelInit:= COM_CONFIG.MaxTopicLevels, SplitElementSizeInit:= COM_CONFIG.MaxTopicElementSize, dynMemUsageInit:= ADR(Usage1));
Split2.LowInit(TopicsLevelInit:= COM_CONFIG.MaxTopicLevels, SplitElementSizeInit:= COM_CONFIG.MaxTopicElementSize, dynMemUsageInit:= ADR(Usage1));

Split1.destroy();
Split2.destroy();</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>07e7ce58-0fec-422e-bef4-775d4692bdd1</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestStringPointer" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="SFrom">
              <type>
                <string length="2000" />
              </type>
              <initialValue>
                <simpleValue value
              </initialValue>
            </variable>
            <variable name="STo">
              <type>
                <string length="1000" />
              </type>
              <initialValue>
                <simpleValue value="''" />
              </initialValue>
            </variable>
            <variable name="p1">
              <type>
                <pointer>
                  <baseType>
                    <string length="2000" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="p2">
              <type>
                <pointer>
                  <baseType>
                    <string length="2000" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="l1">
              <type>
                <UINT />
              </type>
            </variable>
            <variable name="l2">
              <type>
                <UINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">l1 := CommonTypesAndFunctions.len(str:= ADR(SFrom));
l2 := CommonTypesAndFunctions.len(str:= ADR(STo));
p1:= ADR(SFrom);
p2:= ADR(STo);
p2^:= p1^;</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>3b7f3b24-7fb1-4e89-9afb-39c5a11dd2c3</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestSubscribeOld" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="MQTT_IN_OUT">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
            <variable name="subscribe">
              <type>
                <array>
                  <dimension lower="0" upper="20" />
                  <baseType>
                    <derived name="MQTTSubscribe" />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="init">
              <type>
                <BOOL />
              </type>
            </variable>
            <variable name="i">
              <type>
                <INT />
              </type>
            </variable>
            <variable name="received">
              <type>
                <array>
                  <dimension lower="0" upper="20" />
                  <baseType>
                    <BOOL />
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="CountSplitTopicSizeExceeded">
              <type>
                <ULINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">IF NOT init THEN
	init := TRUE;
	FOR i := 0 TO 20 DO
		subscribe[i].SetMqttInOut(MQTT_IN_OUT := ADR(MQTT_IN_OUT));
	END_FOR
END_IF

MQTT_IN_OUT.InFree := TRUE;
(*
MQTT_IN_OUT.OUT.MqttTopic := 'r//test';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=0;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= '+//test', 
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := '/rest/zt';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= '#', 
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := '566//test/3565/356';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= '+//test/#', 
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := 'test';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= 'test', 
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := '/test/';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= 'test/', 
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := 'test/test1';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= 'test/test1', 
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := 'a/ret/test';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= 'a/+/test', 
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := '/test/etwetre/';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= '/test/+',//no match !!!!!
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := '/test/etwetre';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= '/test/+',//match !!!!!!
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := '/finance';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= '+/+', //match
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := '/finance';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= '/+', //match
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := '/finance';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= '+',//no match 
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := 'finance/test';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= 'finance/test/',//** 
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := 'finance/test';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= 'finance/test',//?? 
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := 'finance/test';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= 'finance/test/+',//?? 
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);

MQTT_IN_OUT.OUT.MqttTopic := 'finance';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= 'finance/#',//?match
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := 'finance/';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= 'finance/#',// match 
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := 'test/ff';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= 'test/ff/+',//no match 
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
MQTT_IN_OUT.OUT.MqttTopic := 'test/ff';
//GetSplitTopic(in:= MQTT_IN_OUT.OUT.MqttTopic, Target:= ADR(MQTT_IN_OUT.OUT.Topics), CountSplitTopicSizeExceeded:= ADR(CountSplitTopicSizeExceeded));
i:=i+1;
subscribe[i](
	Subscribe:= TRUE, 
	Topic:= 'test/ff/#',//match 
	QoSSubscribe:= 0, 
	Payload=&gt; , 
	TopicOut=&gt; , 
	SendTimeout=&gt; , 
	SubscribeFail=&gt; , 
	TopicValid=&gt; , 
	Received=&gt; received[i]);
*)</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>00aa4d68-8bf8-4d2b-a7f7-d45d92feacef</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestTopicMatch" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="t1">
              <type>
                <derived name="HandleSplitTopic" />
              </type>
            </variable>
            <variable name="t2">
              <type>
                <derived name="HandleSplitTopic" />
              </type>
            </variable>
            <variable name="match">
              <type>
                <derived name="TOPIC_MATCH" />
              </type>
            </variable>
            <variable name="pts">
              <type>
                <array>
                  <dimension lower="0" upper="20" />
                  <baseType>
                    <pointer>
                      <baseType>
                        <string />
                      </baseType>
                    </pointer>
                  </baseType>
                </array>
              </type>
            </variable>
            <variable name="sp">
              <type>
                <pointer>
                  <baseType>
                    <derived name="SPLIT_TOPIC" />
                  </baseType>
                </pointer>
              </type>
            </variable>
            <variable name="COM_CONFIG">
              <type>
                <derived name="COM_CONFIG" />
              </type>
            </variable>
            <variable name="dynMemUsage">
              <type>
                <UDINT />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">t1.FullInit(TopicsLevelInit:= 40, SplitElementSizeInit:= 5000, dynMemUsageInit:= ADR(dynMemUsage));
t2.FullInit(TopicsLevelInit:= 40, SplitElementSizeInit:= 5000, dynMemUsageInit:= ADR(dynMemUsage));


t1.NewTopic(in:=ADR('/+/test/#'),test:= TRUE, SizeOfString:= 0);
	sp := t1.GetSplitTopic();
	pts[0] := sp^.Topics[0];
	pts[1] := sp^.Topics[1];
	pts[2] := sp^.Topics[2];
	pts[3] := sp^.Topics[3];
	pts[4] := sp^.Topics[4];
	pts[5] := sp^.Topics[5];
	pts[6] := sp^.Topics[6];
	pts[7] := sp^.Topics[7];
	pts[8] := sp^.Topics[8];
t2.NewTopic(in:=ADR('/rtt/test/tr'),test:= FALSE, SizeOfString:= 0);
	sp := t2.GetSplitTopic();
	pts[10] := sp^.Topics[0];
	pts[11] := sp^.Topics[1];
	pts[12] := sp^.Topics[2];
	pts[13] := sp^.Topics[3];
	pts[14] := sp^.Topics[4];
	pts[15] := sp^.Topics[5];
	pts[16] := sp^.Topics[6];
	pts[17] := sp^.Topics[7];
	pts[18] := sp^.Topics[8];
match := t1.CheckTopicMatchToMe(with:= t2.GetSplitTopic());


//test from MQTT doku
t1.NewTopic(in:=ADR('sport/tennis/+'),test:= TRUE, SizeOfString:= 0);
t2.NewTopic(in:=ADR('sport/tennis/player1'),test:= FALSE, SizeOfString:= 0);
match := t1.CheckTopicMatchToMe(with:= t2.GetSplitTopic()); //match
t2.NewTopic(in:=ADR('sport/tennis/player2'),test:= FALSE, SizeOfString:= 0);
match := t1.CheckTopicMatchToMe(with:= t2.GetSplitTopic());//match
t2.NewTopic(in:=ADR('sport/tennis/player1/ranking'),test:= FALSE, SizeOfString:= 0);
match := t1.CheckTopicMatchToMe(with:= t2.GetSplitTopic());//no match


t1.NewTopic(in:=ADR('sport/+'),test:= TRUE, SizeOfString:= 0);
t2.NewTopic(in:=ADR('sport'),test:= FALSE, SizeOfString:= 0);
match := t1.CheckTopicMatchToMe(with:= t2.GetSplitTopic()); //no match

t2.NewTopic(in:=ADR('sport/'),test:= FALSE, SizeOfString:= 0);
match := t1.CheckTopicMatchToMe(with:= t2.GetSplitTopic()); //match

t1.NewTopic(in:=ADR('+/+'),test:= TRUE, SizeOfString:= 0);
t2.NewTopic(in:=ADR('/finance'),test:= FALSE, SizeOfString:= 0);
match := t1.CheckTopicMatchToMe(with:= t2.GetSplitTopic()); //match

t1.NewTopic(in:=ADR('/+'),test:= TRUE, SizeOfString:= 0);
match := t1.CheckTopicMatchToMe(with:= t2.GetSplitTopic()); //match

t1.NewTopic(in:=ADR('+'),test:= TRUE, SizeOfString:= 0);
match := t1.CheckTopicMatchToMe(with:= t2.GetSplitTopic()); //no match
//just for breakpoint
t1.NewTopic(in:=ADR('+/+'),test:= TRUE, SizeOfString:= 0);


</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>d3ebd239-47a7-4078-8606-b8b2c7e92d0e</ObjectId>
          </data>
        </addData>
      </pou>
      <pou name="TestUserPassword" pouType="functionBlock">
        <interface>
          <localVars>
            <variable name="MQTT1">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
            <variable name="MQTT2">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
            <variable name="MQTT3">
              <type>
                <derived name="HANDLE_MQTT" />
              </type>
            </variable>
            <variable name="info">
              <type>
                <derived name="MQTT_INFO" />
              </type>
            </variable>
            <variable name="MQTT_IN_OUT">
              <type>
                <derived name="MQTT_IN_OUT" />
              </type>
            </variable>
          </localVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">MQTT1(MQTT_IN_OUT := MQTT_IN_OUT,
	ENABLE := TRUE,
	URL:= 'User1:Mypassword@test.mosquitto.org:1883');
	
MQTT2(MQTT_IN_OUT := MQTT_IN_OUT,
	ENABLE := TRUE,
	URL:= 'User1@test.mosquitto.org:1883');
	
MQTT3(MQTT_IN_OUT := MQTT_IN_OUT,
	ENABLE := TRUE,
	URL:= 'User2:Mypassword@test.mosquitto.org:1883');
	

</xhtml>
          </ST>
        </body>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>43d8c8a6-2fd8-4484-9753-2e4760687975</ObjectId>
          </data>
        </addData>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/globalvars" handleUnknown="implementation">
      <globalVars name="MyConstants" constant="true">
        <variable name="QoS_BUFFER_SIZE">
          <type>
            <UINT />
          </type>
          <initialValue>
            <simpleValue value="50" />
          </initialValue>
        </variable>
        <variable name="NETWORK_BUFFER_LONG_SIZE">
          <type>
            <UINT />
          </type>
          <initialValue>
            <simpleValue value="4095" />
          </initialValue>
        </variable>
        <variable name="KEEP_ALIVE_TIME">
          <type>
            <DWORD />
          </type>
          <initialValue>
            <simpleValue value="8" />
          </initialValue>
        </variable>
        <variable name="SENDING_TIMEOUT">
          <type>
            <TIME />
          </type>
          <initialValue>
            <simpleValue value="TIME#4s0ms" />
          </initialValue>
        </variable>
        <variable name="REPEAT_TIMEOUT">
          <type>
            <TIME />
          </type>
          <initialValue>
            <simpleValue value="TIME#2s0ms" />
          </initialValue>
        </variable>
        <variable name="REORDER_VALUE">
          <type>
            <UINT />
          </type>
          <initialValue>
            <simpleValue value="50000" />
          </initialValue>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">50000</xhtml>
          </documentation>
        </variable>
        <variable name="SUBSTRACTION_VALUE">
          <type>
            <UINT />
          </type>
          <initialValue>
            <simpleValue value="30000" />
          </initialValue>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">20000</xhtml>
          </documentation>
        </variable>
        <variable name="MAX_PUBREL_REPEATS">
          <type>
            <UINT />
          </type>
          <initialValue>
            <simpleValue value="10" />
          </initialValue>
        </variable>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>838b66a3-7c96-4a86-a453-6bfd80ff3824</ObjectId>
          </data>
        </addData>
      </globalVars>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/globalvars" handleUnknown="implementation">
      <globalVars name="GVL_MQTT">
        <variable name="ProgNum">
          <type>
            <derived name="PROG_NUM" />
          </type>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">Last Progamm stat for debug timeout exception</xhtml>
          </documentation>
        </variable>
        <variable name="LOG_BUFFER_MOVES">
          <type>
            <BOOL />
          </type>
        </variable>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
            <Attributes>
              <Attribute Name="qualified_only" Value="" />
            </Attributes>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>976dc25f-9617-40b0-bef6-a6cbfe28769f</ObjectId>
          </data>
        </addData>
      </globalVars>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/interface" handleUnknown="implementation">
      <Interface name="MQTT_SUBSCRIBE_CALLBACK" ObjectId="e660310b-faa4-451b-a1d2-29e1de805966">
        <Methods>
          <Method name="PublishReceived" ObjectId="be7bf08c-3df1-45ec-998a-a1cb9cf27092">
            <interface>
              <returnType>
                <BOOL />
              </returnType>
              <inputVars>
                <variable name="Data">
                  <type>
                    <derived name="CALLBACK_DATA" />
                  </type>
                  <documentation>
                    <xhtml xmlns="http://www.w3.org/1999/xhtml">Collection of received Data</xhtml>
                  </documentation>
                </variable>
              </inputVars>
            </interface>
            <addData />
          </Method>
        </Methods>
        <documentation>
          <xhtml xmlns="http://www.w3.org/1999/xhtml">this is the interface for subscription callbacks.
you can implement it in you one FBs and pass this to the CallbackStock or subscription FB</xhtml>
        </documentation>
        <addData />
      </Interface>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/libraries" handleUnknown="implementation">
      <Libraries>
        <Library Name="#CAA Types" Namespace="CAA" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="CAA Types Extern, * (CAA Technical Workgroup)" />
        <Library Name="#CAA Behaviour Model" Namespace="CBM" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="CAA Behaviour Model, * (CAA Technical Workgroup)" />
        <Library Name="#CAA FB Factory" Namespace="FBF" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="CAA FB Factory, * (CAA Technical Workgroup)" />
        <Library Name="OSCAT NETWORK, 1.30 (OSCAT)" Namespace="OSCAT_NETWORK" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="#Standard" Namespace="Standard" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="Standard, * (System)" />
        <Library Name="SysProcess, 3.5.7.0 (System)" Namespace="SysProcess" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="BASIC, 3.3.3.0 (OSCAT)" Namespace="OSCAT_BASIC" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="CAA Memory, 3.5.12.0 (CAA Technical Workgroup)" Namespace="MEM" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="#IecSfc" Namespace="IecSfc" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="IecSfc, 3.4.2.0 (System)" />
        <Library Name="#Analyzation" Namespace="Analyzation" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="true" LinkAllContent="false" DefaultResolution="Analyzation, 3.5.2.0 (System)">
          <Parameters>
            <Parameter Name="TABLE_UPPER_BOUND" Value="15" />
            <Parameter Name="STRING_LENGTH_EXP" Value="255" />
            <Parameter Name="STRING_LENGTH_ADDRESS" Value="20" />
            <Parameter Name="STRING_LENGTH_COMMENT" Value="255" />
            <Parameter Name="STRING_LENGTH_OUTSTRING" Value="255" />
            <Parameter Name="TABLE_SHOW_VALID_ITEMS" Value="FALSE" />
          </Parameters>
        </Library>
        <Library Name="Time and Date, 3.5.7.0 (3S - Smart Software Solutions GmbH)" Namespace="Time_and_Date" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="#CommonTypsFunctions" Namespace="CommonTypesAndFunctions" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" DefaultResolution="Common Helper for development, * (Stefan Dreyer)" />
        <Library Name="SysTarget, 3.5.5.0 (System)" Namespace="SysTarget" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="Plc Services, 3.5.8.0 (System)" Namespace="Plc_Services" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="3S Storage, 3.5.13.0 (3S - Smart Software Solutions GmbH)" Namespace="STI" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="Element Collections, 3.5.14.0 (3S - Smart Software Solutions GmbH)" Namespace="COL" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="SysMem, 3.5.12.0 (System)" Namespace="SysMem" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="SysTypes2 Interfaces, 3.5.4.0 (System)" Namespace="SysTypes" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="SysSem, 3.5.15.0 (System)" Namespace="SysSem" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="MemoryUtils, 3.5.15.0 (3S - Smart Software Solutions GmbH)" Namespace="MEMUtils" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="CAA File, 3.5.15.0 (CAA Technical Workgroup)" Namespace="FILE" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="StringUtils, 3.5.15.0 (System)" Namespace="Stu" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <Library Name="CmpErrors2 Interfaces, 3.5.15.0 (System)" Namespace="CmpErrors" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>8c1463b5-02f2-427d-bd06-9e39d42fcbff</ObjectId>
          </data>
        </addData>
      </Libraries>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/projectstructure" handleUnknown="discard">
      <ProjectStructure>
        <Object Name="Bibliotheksverwalter" ObjectId="8c1463b5-02f2-427d-bd06-9e39d42fcbff" />
        <Folder Name="MQTT">
          <Folder Name="Function Blocks">
            <Object Name="HANDLE_MQTT" ObjectId="de40940d-72fb-4911-9e82-a78a5e144b68">
              <Object Name="ResetPingTime" ObjectId="6b44b8d0-7adf-48d8-b75c-dd2acfbff3a1" />
              <Object Name="MakePingPaket" ObjectId="f2386f31-8fa4-46c4-b65c-985254494317" />
              <Object Name="StateMashineOut" ObjectId="76450c13-0057-4d67-9911-3a23329af831" />
              <Object Name="StateMashineIn" ObjectId="d87fe352-763e-4ff2-8fe2-b22ed364192e" />
              <Object Name="BuildPublishPaket" ObjectId="b579d915-d9ab-4cac-94a6-062255c7cdcc" />
              <Object Name="MoveBufferForSplitPaket" ObjectId="329db169-e7d1-4ba4-8fa9-f8151db084da" />
              <Object Name="BuildSubscribePaket" ObjectId="cda195a3-d851-43ea-b874-50b26c5632c5" />
              <Object Name="BuildUnsubscribePaket" ObjectId="688a96f0-99e0-4a03-95f7-16628eca43f4" />
              <Object Name="SendOutData" ObjectId="eaf44d39-53ab-4f9b-83b9-193ac4c883af" />
              <Object Name="SendInData" ObjectId="a7ea802c-6124-4ca3-9c46-9debb67a877b" />
              <Object Name="ParseIncoming" ObjectId="a0195934-de34-4282-bca7-4efe8c4c5b8c" />
              <Object Name="ParseIncomingPublish" ObjectId="e0043f8f-3a31-4d50-8659-2ad99197624b" />
              <Object Name="CheckLenghtBuffer" ObjectId="d2d33c09-9dff-4eb5-b512-251000170b1a" />
              <Object Name="FB_Exit" ObjectId="b9c05d0c-ef6e-4249-9bbd-be68de915780" />
              <Object Name="destroy" ObjectId="4ec73c21-a461-466b-8611-c64366e7705a" />
              <Object Name="OutputPublish" ObjectId="41ef459f-dc94-4b40-9ac4-ceeadc73dff2" />
              <Object Name="MergeSplitedPublish" ObjectId="9d396c27-f37d-4dd3-95cd-3c260fb5beb7" />
              <Object Name="Publish" ObjectId="69dd8b32-66a3-4c6d-a9c4-38a21807fc8e" />
              <Object Name="PublishSendDone" ObjectId="e9258dd2-b3b8-4973-b15f-4cab2caff9e9" />
              <Object Name="PushError" ObjectId="032ba540-e962-4dbd-b57d-b4afe7b2b716" />
            </Object>
            <Object Name="MQTT_CONTROL" ObjectId="9b642721-ce73-4258-9e15-8e2406aa0c86" />
            <Object Name="MQTTPublish" ObjectId="cc2d5fcf-b68d-4e57-b744-68b746e30a3b" />
            <Object Name="MQTTBase" ObjectId="22db369a-9de1-444e-be59-cbfd328e69c6">
              <Object Name="SetMqttInOut" ObjectId="3e841b5d-b781-44dd-ba86-78e29089f6be" />
            </Object>
            <Object Name="MQTTSubscribe" ObjectId="dd71ef48-a746-409a-bd12-2cc36b1fc25e" />
            <Object Name="InsertSplitTopic" ObjectId="86a50c54-22c9-433f-91fe-823ead6df5b5">
              <Object Name="reset" ObjectId="1fcde2a6-7eb6-4266-9d66-95d21574ca96" />
            </Object>
            <Object Name="HandleSplitTopic" ObjectId="42eb1e91-cc42-47d6-98e4-0b800a4d947f">
              <Object Name="FullInit" ObjectId="ceb1e346-4e57-4b78-8421-2c1d641d22cf" />
              <Object Name="LowInit" ObjectId="aee97ce3-b520-46d2-ba03-088505d4b950" />
              <Object Name="destroy" ObjectId="8cd22f1f-8fc7-489a-9664-9c5f3e657548" />
              <Object Name="GetSplitTopic" ObjectId="4fc0a7a2-e23b-474c-83c1-ce1bc25ea8e6" />
              <Object Name="FB_Exit" ObjectId="83390a32-5ae0-4d2a-9e1e-4f733a09628d" />
              <Object Name="NewTopic" ObjectId="5b35f434-7bb3-4f6b-8ddc-1205e223b0e8" />
              <Object Name="PushSplitLevel" ObjectId="2308047e-24eb-4016-a5c6-8ccd0f2d9c7f" />
              <Object Name="DestroyOldSplit" ObjectId="9fa76813-2029-4e6a-971b-f556bb4f82e5" />
              <Object Name="CheckTopicMatchToMe" ObjectId="40fb46a3-f73f-4707-8903-3d991face833" />
              <Object Name="CheckTopicValid" ObjectId="43d1c309-2ad2-4278-9176-896480b00081" />
            </Object>
            <Object Name="InsertSplitPayload" ObjectId="22733c41-86e3-41ca-bf60-527fc6a5bc73">
              <Object Name="reset" ObjectId="05ae8f49-4f21-4727-8495-50c84c2a2285" />
            </Object>
            <Object Name="MQTTValue" ObjectId="7cbccac7-37d7-452a-91d9-21795ebc51d9">
              <Object Name="Init" ObjectId="7761ef91-55fb-474b-8fce-5f93c68f1f9d" />
            </Object>
            <Object Name="MQTTState" ObjectId="45dda641-95c7-4e58-b79e-a2cab7a6bc2c">
              <Object Name="Init" ObjectId="1e403734-4c33-4f63-a784-3b0e0ec24e6c" />
            </Object>
            <Object Name="MQTTPushover" ObjectId="57731982-e43a-4d1d-ba2d-fa4615f45576" />
            <Folder Name="CallbackFBs">
              <Folder Name="SingelCallbacks">
                <Object Name="SingelStringCallback" ObjectId="0c518722-7423-4fb1-8412-7ed77d1701cb">
                  <Object Name="PublishReceived" ObjectId="53ab1c96-daf3-4024-886c-6c34b29b131b" />
                  <Object Name="Init" ObjectId="b4b0937c-ab6a-4856-949b-021a2f0bb119" />
                  <Object Name="ResetReceived" ObjectId="fccdeeed-1425-41ac-ace9-47ad69c149a4" />
                </Object>
                <Object Name="AllValuesCallback" ObjectId="c91c0058-ed3d-408b-a92c-8647174c1ede">
                  <Object Name="PublishReceived" ObjectId="2f430b41-f79b-4620-a1d7-437ad308f9f0" />
                  <Object Name="Init" ObjectId="38707088-83ca-4b74-8afc-12273cd2b412" />
                  <Object Name="ResetReceived" ObjectId="d7a3321e-332f-47ba-93d8-27fc9741fd3c" />
                </Object>
              </Folder>
              <Folder Name="ListCallbacks">
                <Object Name="ListStringCallback" ObjectId="332de4d0-cc8a-469a-bec9-dd445ce42a98">
                  <Object Name="PublishReceived" ObjectId="300d94f1-6aa0-4736-9113-e9dcac12f765" />
                  <Object Name="InitAsSplitTopic" ObjectId="b9376d50-1013-4c93-b633-4561784d46db" />
                  <Object Name="InitAsSplitPayload" ObjectId="a744126e-37a2-4e09-a308-1dc43301a511" />
                </Object>
                <Object Name="ListAllValuesCallback" ObjectId="84025d8c-083e-4de9-a0cc-21ea2e4ce371">
                  <Object Name="PublishReceived" ObjectId="4b13837b-0910-4d97-83b1-7e6b12575041" />
                  <Object Name="InitAsSplitTopic" ObjectId="ec841e67-d08f-4bb1-ac80-2e5d19cfcde9" />
                  <Object Name="InitAsSplitPayload" ObjectId="7333d65b-e3b6-4bf9-9f1c-f201407da786" />
                </Object>
              </Folder>
              <Folder Name="Callback Collector">
                <Object Name="CallbackCollector" ObjectId="51a2a9c5-9a9b-49de-af5a-7d0f559e2242">
                  <Object Name="put" ObjectId="6f3a77df-e47f-497e-83b0-884bd2a6ad09" />
                  <Object Name="PublishReceived" ObjectId="fdb48a87-3183-43d6-b109-1174e4291775" />
                  <Object Name="destroy" ObjectId="80a0328b-46e3-417c-8576-fbd361f44c56" />
                  <Object Name="FB_Exit" ObjectId="5fdc8552-ab1f-4d80-a6dd-b946a8ffbea6" />
                </Object>
                <Object Name="ReceiveValueWithStrucur" ObjectId="99ceed21-5186-417f-a187-d8491765488e">
                  <Object Name="InitReceiveStructur" ObjectId="f50c2837-88e0-4865-9cda-a8a2f7f1dd91" />
                </Object>
                <Object Name="ReceiveValue" ObjectId="e79e061e-307d-4296-993d-9a352fb8e8d6">
                  <Object Name="PublishReceived" ObjectId="5dac2322-5ac7-4538-93c4-0b74db522b57" />
                  <Object Name="initAsFindPayload" ObjectId="e6ddf348-ea05-4bcf-81e6-0069705572a2" />
                  <Object Name="initAsFindTopic" ObjectId="6c7387cb-4893-4974-b840-7e19d60c9699" />
                  <Object Name="makePointer" ObjectId="473b6f42-69a5-47ab-854c-26478a68a4fc" />
                  <Object Name="initAsFindTopicAndPayload" ObjectId="eea491e6-688d-4c83-b797-32128c1e8652" />
                  <Object Name="SetOutput" ObjectId="3d28e94b-7d99-4f05-aabe-eef9ba1e98a4" />
                  <Object Name="initAsFindLastTopic" ObjectId="b80a74e9-4694-4459-b362-513bb6d2c6b2" />
                </Object>
                <Object Name="ReceiveString" ObjectId="1969c053-827c-4deb-a980-a43c9464a8f0">
                  <Object Name="PublishReceived" ObjectId="8f6a5d94-9a77-4546-aa4e-4be60b6f742a" />
                  <Object Name="initAsFindTopic" ObjectId="1c97c33a-bc98-4772-8829-5c0d0b69bcf5" />
                  <Object Name="initAsFindPayload" ObjectId="f219fd6a-098e-4674-b852-aa0881a3dcc1" />
                </Object>
                <Object Name="ReceiverBase" ObjectId="d88c92f3-0988-4c5a-8475-ed12edb68e38">
                  <Object Name="init" ObjectId="a0ab10da-ed41-410c-ade4-441967294689" />
                  <Object Name="CheckMatch" ObjectId="633ebb81-2cad-499a-8a5e-4a734d8d13b7" />
                  <Object Name="GetValue" ObjectId="14cbd1ea-3487-4189-8a94-6fb11210d4c8" />
                </Object>
              </Folder>
            </Folder>
          </Folder>
          <Folder Name="Global Constants">
            <Object Name="MyConstants" ObjectId="838b66a3-7c96-4a86-a453-6bfd80ff3824" />
          </Folder>
          <Folder Name="Function">
            <Object Name="InsertStringToBufferAndLength" ObjectId="ed441082-1d3e-463c-bc84-a704e7534de7" />
            <Object Name="DoRemainingLength" ObjectId="e2e73127-c450-4db7-8e16-8119af21d884" />
            <Object Name="GetRemainingLength" ObjectId="168ed935-d7fd-4c44-93c7-2a8614b8ecf9" />
            <Object Name="CheckTopicLevel" ObjectId="655f312f-4e19-41ff-9a48-b9cd257567fd" />
            <Object Name="DoRemainingLengthBevor" ObjectId="7a7085eb-fade-40fb-a106-1b3f7da54eb0" />
            <Object Name="InitMQTTValue" ObjectId="70f8d7c7-9e63-4b4a-8ece-1a8da2fb05e1" />
          </Folder>
          <Folder Name="Structs">
            <Object Name="MQTT_IN_OUT" ObjectId="55008e55-a327-4545-aaa7-3221c41bb9e1" />
            <Object Name="DATA_FROM_BROKER" ObjectId="32b50b35-fcff-4e03-852b-c3c9dacef9d9" />
            <Object Name="MQTT_INFO" ObjectId="32a39fb8-f516-444c-be3c-83354e376270" />
            <Object Name="MQTT_COM" ObjectId="5209abac-a19a-4b19-a65e-8a7aaacdb271" />
            <Object Name="DATA_TO_BROKER" ObjectId="8f262079-4448-4ad4-914c-e723074c16c8" />
            <Object Name="MQTT_IN_DATA" ObjectId="4c7c1bae-e8c3-425f-ac0b-be3e1bb059c6" />
            <Object Name="PAKET_DATA" ObjectId="562b289a-9159-4417-8182-cc4e81b366b8" />
            <Object Name="MQTT_OUT_DATA" ObjectId="ae326562-56be-495d-a72e-4a01b53e8ece" />
            <Object Name="REMAINING_LENGTH_RETURN" ObjectId="94c78556-e4a3-4405-aebc-1e66657239c5" />
            <Object Name="SPLIT_TOPIC" ObjectId="093130aa-4b04-4d26-9869-e5698edc6583" />
            <Object Name="SEND_INFOS" ObjectId="2bc87a2f-4743-4048-b61f-7cca24bbfb38" />
            <Object Name="RECEIVE_PAKET" ObjectId="5ccc79d7-9560-4034-9035-9d8c8e8be5c7" />
            <Object Name="COM_CONFIG" ObjectId="f023999e-09e0-4a7b-bf94-bca33e8956a1" />
            <Object Name="PUSHOVER_DATA" ObjectId="c93db81f-bcea-4deb-b019-5f8f7b88cd10" />
            <Folder Name="CallbackStuff">
              <Object Name="MQTT_SUBSCRIBE_CALLBACKS" ObjectId="960c94c7-5314-4b94-96fc-777034edf963" />
              <Object Name="LIST_STRING_CALLBACK_DATA" ObjectId="2be988fc-7d0a-4fb7-85f2-77deb2f228a5" />
              <Object Name="CALLBACK_DATA" ObjectId="963855a0-a0d7-4fbc-9ce0-5579e6e76a87" />
              <Object Name="LIST_ALLVALUES_CALLBACK_DATA" ObjectId="4fbfdae5-c719-45fc-8db1-5715a3d53dc8" />
              <Object Name="CALLBACK_INSTANCES" ObjectId="6adfb87c-f00b-4c51-89ce-56189477a479" />
            </Folder>
            <Object Name="ONE_ERROR" ObjectId="438702c0-b52d-451f-8dd4-20eaa74fc723" />
          </Folder>
          <Folder Name="ENUMs">
            <Object Name="MESSAGETYPE" ObjectId="f2b44ef8-0bd0-44af-8bb1-57f4cebd4fde" />
            <Object Name="QoS" ObjectId="dc0ab29a-e4c9-4251-b775-e8f4fc8a2ed4" />
            <Object Name="STEPS_OUT" ObjectId="959ee70e-6c1f-4f46-b4d6-2e47c7bb5ec5" />
            <Object Name="STEPS_IN" ObjectId="62f118e5-0ccc-4d99-91e8-1c5458854c9a" />
            <Object Name="INSERT_SPLIT_RETURN" ObjectId="bb4d1531-d91b-43d0-a2e0-94b8e19d747c" />
            <Object Name="TOPIC_VALID" ObjectId="f7ef1884-ffea-471c-909d-3b229bcf4d4a" />
            <Object Name="TOPIC_MATCH" ObjectId="2d2ca9f7-31bc-451a-aac6-7d56f3a3c2f7" />
            <Object Name="PROG_NUM" ObjectId="c96a8249-695b-4b97-a93f-d9c79b7ceae9" />
            <Object Name="PUSHOVER_SOUND" ObjectId="323c00fa-583c-4685-ad23-5c7dea71be00" />
            <Object Name="ERRORS" ObjectId="e92c2094-9817-4ed4-9dc8-48cfc52fdd42" />
            <Object Name="RECEIVER_INIT_TYPS" ObjectId="414e9f82-a8cb-4603-93ee-01cc5691e372" />
            <Object Name="RECEIVE_TYPS" ObjectId="05bcf203-f13b-4816-b393-deb4dfb10f8f" />
          </Folder>
          <Folder Name="TestCases">
            <Object Name="TestcaseCheckTopivValid" ObjectId="632e8e92-ad6c-45dd-90a7-c985f011dd34" />
            <Object Name="TestSubscribeOld" ObjectId="00aa4d68-8bf8-4d2b-a7f7-d45d92feacef" />
            <Object Name="TestMqtt" ObjectId="04fc90f3-c020-40ea-9831-93a03c452235" />
            <Object Name="TestMqttTLS" ObjectId="e6632a47-4b1f-4808-9ba9-69205ba08238" />
            <Object Name="TestTopicMatch" ObjectId="d3ebd239-47a7-4078-8606-b8b2c7e92d0e" />
            <Object Name="TestPublishValue" ObjectId="aa9e1f7c-7bc1-4db0-be80-d6343d327e02" />
            <Object Name="testHighReceive" ObjectId="2c7b7c99-a3d9-49b0-b749-8e7ba380eebe" />
            <Object Name="testHighReceiveSplitPayload" ObjectId="139df6d3-53ef-4b7d-825c-852c7cfdd82d" />
            <Object Name="HighLoadPublish" ObjectId="15598a63-10de-43a4-b1e5-5c4abe3bb121" />
            <Object Name="testHighLoadPublish" ObjectId="bbbbcdfa-0e74-417f-ba45-d6fd521403de" />
            <Folder Name="Test Interfaces">
              <Object Name="FooBarReceivingFB" ObjectId="2a453000-4796-432a-bd58-15292d7ac300">
                <Object Name="PublishReceived" ObjectId="977f1a95-4a9f-45ac-a8a9-6eb1ca600c5d" />
                <Object Name="initAsFindTopic" ObjectId="ab04c67c-7d3e-4095-91a2-01154907cca9" />
                <Object Name="getLastTreeName" ObjectId="cfa27fa7-8fad-472e-bd8b-c46f2a6664fa" />
                <Object Name="initAsFindPayload" ObjectId="fcd2a1c3-70a3-4baa-a5a5-ad1cee7fad61" />
              </Object>
              <Object Name="exampleForFbs" ObjectId="65ff7880-8a04-45c8-97d1-778b8fbd262b" />
              <Object Name="TestCallbackCollecktor" ObjectId="50db2ef6-17e2-42a9-ae41-9bd9a0909cd2">
                <Object Name="FB_Exit" ObjectId="383d48b9-a34d-4e53-96fe-6494a1e650b0" />
              </Object>
            </Folder>
            <Object Name="TestLongPublish" ObjectId="b18c8267-7251-461e-ae79-29a6c51f3a8f" />
            <Object Name="TestLongStringList" ObjectId="ba26506c-e830-4dfd-b732-7d24065c29cf" />
            <Object Name="TestStringPointer" ObjectId="3b7f3b24-7fb1-4e89-9afb-39c5a11dd2c3" />
            <Object Name="TestUserPassword" ObjectId="43d8c8a6-2fd8-4484-9753-2e4760687975" />
            <Object Name="TestMemHandle" ObjectId="af680a5d-43a6-49f6-9b4a-66feec0848d3" />
            <Object Name="TestSplitTopic" ObjectId="07e7ce58-0fec-422e-bef4-775d4692bdd1" />
          </Folder>
          <Object Name="GVL_MQTT" ObjectId="976dc25f-9617-40b0-bef6-a6cbfe28769f" />
          <Folder Name="Docs">
            <Object Name="Doku" ObjectId="19d5ffa0-ed0e-45b0-9ceb-9920b74e90c1" />
          </Folder>
          <Folder Name="Exampels">
            <Object Name="TestOutOfTheBoxNoTLS" ObjectId="7710ce00-c1ae-47be-931d-77aa31d80969" />
            <Object Name="TestOutOfTheBoxTLS" ObjectId="2f0f42d5-f5e7-4150-9177-534c70b72865" />
          </Folder>
          <Folder Name="Interfaces">
            <Object Name="MQTT_SUBSCRIBE_CALLBACK" ObjectId="e660310b-faa4-451b-a1d2-29e1de805966">
              <Object Name="PublishReceived" ObjectId="be7bf08c-3df1-45ec-998a-a1cb9cf27092" />
            </Object>
          </Folder>
        </Folder>
        <Object Name="Projektinformationen" ObjectId="11c0fc3a-9bcf-4dd8-ac38-efb93363e521" />
      </ProjectStructure>
    </data>
  </addData>
</project>